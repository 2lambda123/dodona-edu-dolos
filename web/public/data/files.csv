id,path,content,ast
8,samples/python/benchmark_files/UPGMA_A.py,"from collections import defaultdict

import numpy as np
import sys

class DistanceMatrix:
    def __init__(self, *args):
        self.D = np.array(*args)
        return

    def __str__(self):
        return str([[float(a) for a in x] for x in self.D])

    def __repr__(self):
        return type(self).__name__ + ""("" + str([[float(a) for a in x] for x in self.D]) + "")""

    @staticmethod
    def loadtxt(file_name, dtype=None,F comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0):
        D = np.loadtxt(file_name, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
        return DistanceMatrix(D)

    def savetxt(self, output_file, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# '):
        np.savetxt(output_file, self.D, fmt, delimiter, newline, header, footer, comments)
        return

    def nr_leaves(self):
        return len(self.D)

    def limb_length(self, j):
        n = self.nr_leaves()
        assert(j < n)
        minimum = sys.maxsize
        for i in range(n):
            if i != j:
                for k in range(n):
                    if k != j:
                        Dij = self.D[i][j]
                        Djk = self.D[j][k]
                        Dik = self.D[i][k]
                        minimum = min([minimum, (Dij+Djk-Dik)/2])
        return minimum

    def additive_phylogeny(self):
        self.node_count = self.nr_leaves()
        return self.additive_phylogeny_rec(self, self.nr_leaves())

    def find_i_n_k(self, n):
        for i in range(n-1):
            for k in range(n-1):
                if i != k:
                    if self.D[i][k] == self.D[i][n-1] + self.D[n-1][k]:
                        return (i, n, k)
        return ""nop""

    def additive_phylogeny_rec(self, D, n):
        if n == 3:
            ll1 = (D.D[0][1] + D.D[1][2] - D.D[0][2])/2
            ll2 = D.D[1][2] - ll1
            ll0 = D.D[0][1] - ll1
            edges = {(0, self.node_count, ll0), (1, self.node_count, ll1), (2, self.node_count, ll2)}
            self.node_count += 1
            return UnrootedTree(*edges)

        ll = D.limb_length(n-1)
        D_bald = DistanceMatrix(D.D[:])
        for x in range(n-1):
            D_bald.D[n-1][x] -= ll
            D_bald.D[x][n-1] -= ll

        i,n,k = D_bald.find_i_n_k(n)
        x = D_bald.D[i][n-1]
        trimmed_D = DistanceMatrix([[D_bald.D[a][b] for a in range(n-1)] for b in range(n-1)])
        T = self.additive_phylogeny_rec(trimmed_D, n-1)
        path = T.path(i,k)
        i = 1
        while i < len(path) -1 and T.distance(path[0],path[i]) < x:
            i += 1

        if i is not 0 and  T.distance(path[0],path[i]) == x:
            T.add_edge(path[i-1],n-1,ll)
        else:
            a,b = path[i-1],path[i]
            new_d = D.D[path[0]][b] - x if b < len(D.D) else T.distance(path[0],b) - x
            T.add_edge(self.node_count, b, new_d)
            T.add_edge(a, self.node_count, T.distance(a,b) - new_d)
            T.add_edge(n-1, self.node_count, ll)
            T.remove_edge(a, b)
            self.node_count += 1

        return T

    def UPGMA(self):
        self.nr_count = self.nr_leaves()
        clusters = [{i} for i in range(self.nr_leaves())]
        trees = [Tree(i) for i in range(self.nr_leaves())]
        ages = [0 for _ in range(self.nr_leaves())]
        while len(clusters) > 1:
            min_d = sys.maxsize
            min_C1, min_C2 = None, None
            n = len(clusters)
            for i in range(n):
                for j in range(i+1,n):
                    C1, C2 = clusters[i], clusters[j]
                    d = self.pairwise_distance(C1,C2)
                    if d < min_d:
                        min_d = d
                        min_C1, min_C2 = C1, C2

            C1_index, C2_index = clusters.index(min_C1), clusters.index(min_C2)
            age = min_d/2
            clusters[C1_index] = min_C1 | min_C2
            clusters.pop(C2_index)
            trees[C1_index] = Tree(self.nr_count, (trees[C1_index], age - ages[C1_index]), (trees[C2_index], age - ages[C2_index] ))
            trees.pop(C2_index)
            ages[C1_index] = age
            ages.pop(C2_index)
            self.nr_count += 1
        return trees[0]

    def pairwise_distance(self,C1, C2):
        n, m = len(C1), len(C2)
        s = sum([self.D[i][j] for i in C1 for j in C2])
        return s/(n*m)

class UnrootedTree:
    def __init__(self, *edges):
        self.edges = list()
        for edge in edges:
            a,b,c = edge
            a, b, c = int(a), int(b), float(c)
            self.edges.append((a,b,c))
        d = dict()
        for edge in self.edges:
            x, y, w = edge
            d[(x, y)] = w
            d[(y, x)] = w
        self.d = d
        nb = defaultdict(list)
        for edge in self.edges:
            x, y, w = edge
            nb[x].append(y)
            nb[y].append(x)
        self.nb = nb

    def __str__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def __repr__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def add_edge(self, a,b,w):
        self.edges.append((a,b,w))
        self.d[(a,b)] = w
        self.d[(b,a)] = w
        self.nb[a].append(b)
        self.nb[b].append(a)

    def remove_edge(self,a,b):
        for edge in self.edges:
            x,y,w = edge
            if (x == a and b == y) or (x == b and y == a):
                self.edges.remove(edge)
                break
        del self.d[(a,b)]
        del self.d[(b,a)]
        self.nb[a].remove(b)
        self.nb[b].remove(a)

    @staticmethod
    def loadtxt(input_file):
        edges = list()
        f = open(input_file)
        for line in f:
            line = line.rstrip().split("":"")
            line[0] = line[0].split(""<->"")
            edges.append((line[0][0],line[0][1],line[1]))

        return UnrootedTree(*edges)

    def path(self, i, j):
        self.visited = [i]
        p = self.path_dfs(self.nb, i, j, [i])
        if p[0] != i:
            p = p [::-1]
        return p

    def distance(self, i,j):
        if (i,j) in self.d:
            return self.d[(i,j)]
        else:
            path = self.path(i,j)
            return self.path_weight(path)

    def path_dfs(self, graph, current_i, j, current_path):
        nb = graph[current_i]
        for n in nb:
            if n not in self.visited:
                self.visited.append(n)
                if n == j:
                    return current_path + [j]
                else:
                    r = self.path_dfs(graph, n, j, current_path + [n])
                    if r:
                        return r

    def nr_leaf_nodes(self):
        s = set()
        for edge in self.edges:
            x,y,w = edge
            if len(self.nb[x]) == 1:
                s.add(x)
            if len(self.nb[y]) == 1:
                s.add(y)
        return len(s)

    def path_weight(self, path):
        s = 0
        for i in range(len(path) -1):
            s += self.d[(path[i],path[i+1])]
        return s

    def distance_matrix(self):
        n = self.nr_leaf_nodes()
        D = [[0 for _ in range(n)] for _ in range(n)]
        self.path_weight(self.path(0,2))
        for i in range(n):
            for j in range(i+1,n):
                path = self.path(i,j)
                w = self.path_weight(path)
        D[i][j], D[j][i] = w, w
        return DistanceMatrix(D)

class Tree:
    def __init__(self, root, *subtrees):
        self.root = root
        self.subtrees = subtrees

    def __str__(self):
        subtrees_str = "", "".join([str(tree) for tree in self.subtrees])
        return type(self).__name__ + ""("" + str(self.root) + ("", "" if len(self.subtrees) > 0 else """") + subtrees_str + "")""

    def __repr__(self):
        return self.__str__()
",(module (import_from_statement (dotted_name (identifier)) (dotted_name (identifier))) (import_statement (aliased_import (dotted_name (identifier)) (identifier))) (import_statement (dotted_name (identifier))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list (list_splat (identifier))))))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier)))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))) (string)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (default_parameter (identifier) (none)) (ERROR (identifier)) (default_parameter (identifier) (string)) (default_parameter (identifier) (none)) (default_parameter (identifier) (none)) (default_parameter (identifier) (integer)) (default_parameter (identifier) (none)) (default_parameter (identifier) (false)) (default_parameter (identifier) (integer))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))) (return_statement (expression_list (call (identifier) (argument_list (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string (escape_sequence))) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (assert_statement (parenthesized_expression (comparison_operator (identifier) (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list (identifier) (binary_operator (parenthesized_expression (binary_operator (binary_operator (identifier) (identifier)) (identifier))) (integer)))))))))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (call (attribute (identifier) (identifier)) (argument_list)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (if_statement (comparison_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer))) (attribute (identifier) (identifier))) (binary_operator (identifier) (integer))) (identifier))) (block (return_statement (expression_list (tuple (identifier) (identifier) (identifier)))))))))))) (return_statement (expression_list (string))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (identifier) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (parenthesized_expression (subscript (subscript (binary_operator (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer))) (integer))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (set (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)))))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier)))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (slice))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (binary_operator (identifier) (integer))) (identifier))) (expression_list (identifier)))) (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer)))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer))))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (while_statement (boolean_operator (comparison_operator (identifier) (binary_operator (call (identifier) (argument_list (identifier))) (integer))) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (integer)))))) (if_statement (boolean_operator (comparison_operator (identifier) (integer)) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (binary_operator (identifier) (integer))) (binary_operator (identifier) (integer)) (identifier))))) (else_clause (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (conditional_expression (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (identifier)) (comparison_operator (identifier) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (identifier))) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier))) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer)) (attribute (identifier) (identifier)) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (set (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (while_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (none) (none)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (identifier)) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (identifier) (identifier)))))))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier))) (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (identifier) (integer))))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (binary_operator (identifier) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier))) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))))) (return_statement (expression_list (subscript (identifier) (integer)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)))))))) (return_statement (expression_list (binary_operator (identifier) (parenthesized_expression (binary_operator (identifier) (identifier)))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (boolean_operator (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier)))) (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier))))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (break_statement))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (call (attribute (identifier) (identifier)) (argument_list)) (identifier)) (argument_list (string)))))) (expression_statement (assignment (expression_list (subscript (identifier) (integer))) (expression_list (call (attribute (subscript (identifier) (integer)) (identifier)) (argument_list (string)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (subscript (identifier) (integer)) (integer)) (subscript (subscript (identifier) (integer)) (integer)) (subscript (identifier) (integer)))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (list (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier) (list (identifier))))))) (if_statement (comparison_operator (subscript (identifier) (integer)) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (slice (unary_operator (integer))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (tuple (identifier) (identifier)) (attribute (identifier) (identifier))) (block (return_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (if_statement (comparison_operator (identifier) (attribute (identifier) (identifier))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (if_statement (comparison_operator (identifier) (identifier)) (block (return_statement (expression_list (binary_operator (identifier) (list (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (binary_operator (identifier) (list (identifier)))))))) (if_statement (identifier) (block (return_statement (expression_list (identifier)))))))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (call (identifier) (argument_list (identifier))) (integer))))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (identifier) (binary_operator (identifier) (integer)))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (call (attribute (identifier) (identifier)) (argument_list (integer) (integer)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier)) (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier) (identifier)))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (string) (identifier)) (argument_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))))) (return_statement (expression_list (binary_operator (binary_operator (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (parenthesized_expression (conditional_expression (string) (comparison_operator (call (identifier) (argument_list (attribute (identifier) (identifier)))) (integer)) (string)))) (identifier)) (string)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list)))))))))
9,samples/python/benchmark_files/UPGMA_A_B_combined.py,"from collections import defaultdict

import numpy as np
import sys

#from A, except some functions
class DistanceMatrix:
    def __init__(self, *args):
        self.D = np.array(*args)
        return

    def __str__(self):
        return str([[float(a) for a in x] for x in self.D])

    def __repr__(self):
        return type(self).__name__ + ""("" + str([[float(a) for a in x] for x in self.D]) + "")""

    @staticmethod
    def loadtxt(file_name, dtype=None, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0):
        D = np.loadtxt(file_name, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
        return DistanceMatrix(D)

    def savetxt(self, output_file, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# '):
        np.savetxt(output_file, self.D, fmt, delimiter, newline, header, footer, comments)
        return

    def nr_leaves(self):
        return len(self.D)

    def limb_length(self, j):
        n = self.nr_leaves()
        assert(j < n)
        minimum = sys.maxsize
        for i in range(n):
            if i != j:
                for k in range(n):
                    if k != j:
                        Dij = self.D[i][j]
                        Djk = self.D[j][k]
                        Dik = self.D[i][k]
                        minimum = min([minimum, (Dij+Djk-Dik)/2])
        return minimum

    #from B
    def additive_phylogeny(self):
        self.max_node = len(self.matrix)
        return UnrootedTree(*sorted(self.additive_phylogeny_recursive(self.matrix, len(self.matrix))))

    #from B
    def additive_phylogeny_recursive(self, mat, n):
        if n == 2:
            return [(0, 1, mat[0][1])]
        limb_size = DistanceMatrix.limb_length_from_matrix(mat[:n, :n], n - 1)
        for j in range(n - 1):
            mat[n - 1][j] = mat[n - 1][j] - limb_size
            mat[j][n - 1] = mat[n - 1][j]
        for i in range(n - 1):
            found = False
            for k in range(i, n - 1):
                if mat[i][k] == mat[i][n - 1] + mat[k][n - 1]:
                    found = True
                    break
            if found:
                break
        x = mat[i][n - 1]
        tree_list = self.additive_phylogeny_recursive(mat.copy(), n - 1)
        tree = UnrootedTree(*tree_list)
        path = tree.path(i, k)
        for j in range(1, len(path)):
            edge = (path[j - 1], path[j])
            edge_sorted = tuple(sorted(edge))
            if tree.edges[edge_sorted] > x:
                tree_list.remove((edge_sorted[0], edge_sorted[1], tree.edges[edge_sorted]))
                tree_list.append((edge[0], self.max_node, x))
                tree_list.append((edge[1], self.max_node, tree.edges[edge_sorted] - x))
                tree_list.append((n - 1, self.max_node, limb_size))
                self.max_node += 1
                break
            elif tree.edges[edge_sorted] == x:
                new_edge = sorted((n - 1, edge[1]))
                tree_list.append((new_edge[0], new_edge[1], limb_size))
                break
            else:
                x -= tree.edges[edge_sorted]

        return tree_list

    def UPGMA(self):
        self.nr_count = self.nr_leaves()
        clusters = [{i} for i in range(self.nr_leaves())]
        trees = [Tree(i) for i in range(self.nr_leaves())]
        ages = [0 for _ in range(self.nr_leaves())]
        while len(clusters) > 1:
            min_d = sys.maxsize
            min_C1, min_C2 = None, None
            n = len(clusters)
            for i in range(n):
                for j in range(i+1,n):
                    C1, C2 = clusters[i], clusters[j]
                    d = self.pairwise_distance(C1,C2)
                    if d < min_d:
                        min_d = d
                        min_C1, min_C2 = C1, C2

            C1_index, C2_index = clusters.index(min_C1), clusters.index(min_C2)
            age = min_d/2
            clusters[C1_index] = min_C1 | min_C2
            clusters.pop(C2_index)
            trees[C1_index] = Tree(self.nr_count, (trees[C1_index], age - ages[C1_index]), (trees[C2_index], age - ages[C2_index] ))
            trees.pop(C2_index)
            ages[C1_index] = age
            ages.pop(C2_index)
            self.nr_count += 1
        return trees[0]

    def pairwise_distance(self,C1, C2):
        n, m = len(C1), len(C2)
        s = sum([self.D[i][j] for i in C1 for j in C2])
        return s/(n*m)

#from B completely
class UnrootedTree:

    def __init__(self, *args):
        self.graph = defaultdict(set)
        self.edges = defaultdict(int)
        self.nodes = set()
        self.edges_list = list()
        self.leaves = set()
        for tup in args:
            self.graph[tup[0]].add((tup[1]))
            self.graph[tup[1]].add((tup[0]))
            self.edges[tuple(sorted((tup[0], tup[1])))] = tup[2]
            self.edges_list.append((tup[0], tup[1], float(tup[2])))
            self.nodes.add(tup[0])
            self.nodes.add(tup[1])
        for key, val in self.graph.items():
            if len(val) == 1:
                self.leaves.add(key)

    def __repr__(self):
        repr_str = ""UnrootedTree(""
        for edge in self.edges_list:
            repr_str += str(edge) + "", ""
        return repr_str[:-2] + "")""

    @staticmethod
    def loadtxt(f):
        with open(f, ""r"") as graph_file:
            tuple_list = []
            for line in graph_file:
                line_arr = line.strip().split(""<->"")
                rhs = line_arr[1].split("":"")
                tuple_list.append((int(line_arr[0]), int(rhs[0]), float(rhs[1])))
            return UnrootedTree(*tuple_list)

    def path(self, first_node, second_node):
        stack = [(first_node, [first_node])]
        while stack:
            (vertex, path) = stack.pop()
            for next_vertex in self.graph[vertex] - set(path):
                if next_vertex == second_node:
                    return path + [next_vertex]
                else:
                    stack.append((next_vertex, path + [next_vertex]))

    def distance_matrix(self):
        mat = [[0 for _ in range(len(self.leaves))] for _ in range(len(self.leaves))]
        for n1 in self.leaves:
            for n2 in self.leaves:
                if n1 < n2:
                    path = self.path(n1, n2)
                    length = 0
                    for i in range(1, len(path)):
                        length += self.edges[tuple(sorted((path[i - 1], path[i])))]
                    mat[n1][n2] = length
                    mat[n2][n1] = length
        return DistanceMatrix(mat)

#from A
class Tree:
    def __init__(self, root, *subtrees):
        self.root = root
        self.subtrees = subtrees

    def __str__(self):
        subtrees_str = "", "".join([str(tree) for tree in self.subtrees])
        return type(self).__name__ + ""("" + str(self.root) + ("", "" if len(self.subtrees) > 0 else """") + subtrees_str + "")""

    def __repr__(self):
        return self.__str__()
",(module (import_from_statement (dotted_name (identifier)) (dotted_name (identifier))) (import_statement (aliased_import (dotted_name (identifier)) (identifier))) (import_statement (dotted_name (identifier))) (comment) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list (list_splat (identifier))))))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier)))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))) (string)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (default_parameter (identifier) (none)) (default_parameter (identifier) (string)) (default_parameter (identifier) (none)) (default_parameter (identifier) (none)) (default_parameter (identifier) (integer)) (default_parameter (identifier) (none)) (default_parameter (identifier) (false)) (default_parameter (identifier) (integer))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))) (return_statement (expression_list (call (identifier) (argument_list (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string (escape_sequence))) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (assert_statement (parenthesized_expression (comparison_operator (identifier) (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list (identifier) (binary_operator (parenthesized_expression (binary_operator (binary_operator (identifier) (identifier)) (identifier))) (integer)))))))))))))))) (return_statement (expression_list (identifier))))) (comment) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))))))) (comment) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (identifier) (integer)) (block (return_statement (expression_list (list (tuple (integer) (integer) (subscript (subscript (identifier) (integer)) (integer)))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (slice (identifier)) (slice (identifier))) (binary_operator (identifier) (integer))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (expression_statement (assignment (expression_list (subscript (subscript (identifier) (binary_operator (identifier) (integer))) (identifier))) (expression_list (binary_operator (subscript (subscript (identifier) (binary_operator (identifier) (integer))) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (binary_operator (identifier) (integer)))) (expression_list (subscript (subscript (identifier) (binary_operator (identifier) (integer))) (identifier))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (false)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier) (binary_operator (identifier) (integer))))) (block (if_statement (comparison_operator (subscript (subscript (identifier) (identifier)) (identifier)) (subscript (subscript (binary_operator (subscript (subscript (identifier) (identifier)) (binary_operator (identifier) (integer))) (identifier)) (identifier)) (binary_operator (identifier) (integer)))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (true)))) (break_statement))))) (if_statement (identifier) (block (break_statement))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (identifier) (identifier)) (binary_operator (identifier) (integer)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (call (attribute (identifier) (identifier)) (argument_list)) (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_splat (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (integer) (call (identifier) (argument_list (identifier)))))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (tuple (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (call (identifier) (argument_list (identifier)))))))) (if_statement (comparison_operator (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (subscript (identifier) (integer)) (subscript (attribute (identifier) (identifier)) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (attribute (identifier) (identifier)) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (attribute (identifier) (identifier)) (binary_operator (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (binary_operator (identifier) (integer)) (attribute (identifier) (identifier)) (identifier))))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))) (break_statement)) (elif_clause (comparison_operator (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (tuple (binary_operator (identifier) (integer)) (subscript (identifier) (integer)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (subscript (identifier) (integer)) (identifier))))) (break_statement))) (else_clause (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (identifier)))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (set (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (while_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (none) (none)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (identifier)) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (identifier) (identifier)))))))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier))) (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (identifier) (integer))))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (binary_operator (identifier) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier))) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))))) (return_statement (expression_list (subscript (identifier) (integer)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)))))))) (return_statement (expression_list (binary_operator (identifier) (parenthesized_expression (binary_operator (identifier) (identifier)))))))))) (comment) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (argument_list (parenthesized_expression (subscript (identifier) (integer)))))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (argument_list (parenthesized_expression (subscript (identifier) (integer)))))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (tuple (subscript (identifier) (integer)) (subscript (identifier) (integer))))))))) (expression_list (subscript (identifier) (integer))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (subscript (identifier) (integer)) (call (identifier) (argument_list (subscript (identifier) (integer)))))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (subscript (identifier) (integer))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (subscript (identifier) (integer))))))) (for_statement (variables (identifier) (identifier)) (expression_list (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list))) (block (if_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (string)))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (binary_operator (call (identifier) (argument_list (identifier))) (string))))))) (return_statement (expression_list (binary_operator (subscript (identifier) (slice (unary_operator (integer)))) (string)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier)) (block (with_statement (with_item (call (identifier) (argument_list (identifier) (string))) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (list)))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (call (attribute (identifier) (identifier)) (argument_list)) (identifier)) (argument_list (string)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (subscript (identifier) (integer)) (identifier)) (argument_list (string)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (call (identifier) (argument_list (subscript (identifier) (integer)))) (call (identifier) (argument_list (subscript (identifier) (integer)))) (call (identifier) (argument_list (subscript (identifier) (integer)))))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (list (tuple (identifier) (list (identifier))))))) (while_statement (identifier) (block (expression_statement (assignment (expression_list (tuple (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (for_statement (variables (identifier)) (expression_list (binary_operator (subscript (attribute (identifier) (identifier)) (identifier)) (call (identifier) (argument_list (identifier))))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (return_statement (expression_list (binary_operator (identifier) (list (identifier)))))) (else_clause (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (identifier) (binary_operator (identifier) (list (identifier)))))))))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier)))))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (integer) (call (identifier) (argument_list (identifier)))))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (tuple (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier))))))))))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier)))))))))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))))) (comment) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (string) (identifier)) (argument_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))))) (return_statement (expression_list (binary_operator (binary_operator (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (parenthesized_expression (conditional_expression (string) (comparison_operator (call (identifier) (argument_list (attribute (identifier) (identifier)))) (integer)) (string)))) (identifier)) (string)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list)))))))))
10,samples/python/benchmark_files/UPGMA_A_copy.py,"from collections import defaultdict

import numpy as np
import sys

class DistanceMatrix:
    def __init__(self, *args):
        self.D = np.array(*args)
        return

    def __str__(self):
        return str([[float(a) for a in x] for x in self.D])

    def __repr__(self):
        return type(self).__name__ + ""("" + str([[float(a) for a in x] for x in self.D]) + "")""

    @staticmethod
    def loadtxt(file_name, dtype=None, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0):
        D = np.loadtxt(file_name, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
        return DistanceMatrix(D)

    def savetxt(self, output_file, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# '):
        np.savetxt(output_file, self.D, fmt, delimiter, newline, header, footer, comments)
        return

    def nr_leaves(self):
        return len(self.D)

    def limb_length(self, j):
        n = self.nr_leaves()
        assert(j < n)
        minimum = sys.maxsize
        for i in range(n):
            if i != j:
                for k in range(n):
                    if k != j:
                        Dij = self.D[i][j]
                        Djk = self.D[j][k]
                        Dik = self.D[i][k]
                        minimum = min([minimum, (Dij+Djk-Dik)/2])
        return minimum

    def additive_phylogeny(self):
        self.node_count = self.nr_leaves()
        return self.additive_phylogeny_rec(self, self.nr_leaves())

    def find_i_n_k(self, n):
        for i in range(n-1):
            for k in range(n-1):
                if i != k:
                    if self.D[i][k] == self.D[i][n-1] + self.D[n-1][k]:
                        return (i, n, k)
        return ""nop""

    def additive_phylogeny_rec(self, D, n):
        if n == 3:
            ll1 = (D.D[0][1] + D.D[1][2] - D.D[0][2])/2
            ll2 = D.D[1][2] - ll1
            ll0 = D.D[0][1] - ll1
            edges = {(0, self.node_count, ll0), (1, self.node_count, ll1), (2, self.node_count, ll2)}
            self.node_count += 1
            return UnrootedTree(*edges)

        ll = D.limb_length(n-1)
        D_bald = DistanceMatrix(D.D[:])
        for x in range(n-1):
            D_bald.D[n-1][x] -= ll
            D_bald.D[x][n-1] -= ll

        i,n,k = D_bald.find_i_n_k(n)
        x = D_bald.D[i][n-1]
        trimmed_D = DistanceMatrix([[D_bald.D[a][b] for a in range(n-1)] for b in range(n-1)])
        T = self.additive_phylogeny_rec(trimmed_D, n-1)
        path = T.path(i,k)
        i = 1
        while i < len(path) -1 and T.distance(path[0],path[i]) < x:
            i += 1

        if i is not 0 and  T.distance(path[0],path[i]) == x:
            T.add_edge(path[i-1],n-1,ll)
        else:
            a,b = path[i-1],path[i]
            new_d = D.D[path[0]][b] - x if b < len(D.D) else T.distance(path[0],b) - x
            T.add_edge(self.node_count, b, new_d)
            T.add_edge(a, self.node_count, T.distance(a,b) - new_d)
            T.add_edge(n-1, self.node_count, ll)
            T.remove_edge(a, b)
            self.node_count += 1

        return T

    def UPGMA(self):
        self.nr_count = self.nr_leaves()
        clusters = [{i} for i in range(self.nr_leaves())]
        trees = [Tree(i) for i in range(self.nr_leaves())]
        ages = [0 for _ in range(self.nr_leaves())]
        while len(clusters) > 1:
            min_d = sys.maxsize
            min_C1, min_C2 = None, None
            n = len(clusters)
            for i in range(n):
                for j in range(i+1,n):
                    C1, C2 = clusters[i], clusters[j]
                    d = self.pairwise_distance(C1,C2)
                    if d < min_d:
                        min_d = d
                        min_C1, min_C2 = C1, C2

            C1_index, C2_index = clusters.index(min_C1), clusters.index(min_C2)
            age = min_d/2
            clusters[C1_index] = min_C1 | min_C2
            clusters.pop(C2_index)
            trees[C1_index] = Tree(self.nr_count, (trees[C1_index], age - ages[C1_index]), (trees[C2_index], age - ages[C2_index] ))
            trees.pop(C2_index)
            ages[C1_index] = age
            ages.pop(C2_index)
            self.nr_count += 1
        return trees[0]

    def pairwise_distance(self,C1, C2):
        n, m = len(C1), len(C2)
        s = sum([self.D[i][j] for i in C1 for j in C2])
        return s/(n*m)

class UnrootedTree:
    def __init__(self, *edges):
        self.edges = list()
        for edge in edges:
            a,b,c = edge
            a, b, c = int(a), int(b), float(c)
            self.edges.append((a,b,c))
        d = dict()
        for edge in self.edges:
            x, y, w = edge
            d[(x, y)] = w
            d[(y, x)] = w
        self.d = d
        nb = defaultdict(list)
        for edge in self.edges:
            x, y, w = edge
            nb[x].append(y)
            nb[y].append(x)
        self.nb = nb

    def __str__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def __repr__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def add_edge(self, a,b,w):
        self.edges.append((a,b,w))
        self.d[(a,b)] = w
        self.d[(b,a)] = w
        self.nb[a].append(b)
        self.nb[b].append(a)

    def remove_edge(self,a,b):
        for edge in self.edges:
            x,y,w = edge
            if (x == a and b == y) or (x == b and y == a):
                self.edges.remove(edge)
                break
        del self.d[(a,b)]
        del self.d[(b,a)]
        self.nb[a].remove(b)
        self.nb[b].remove(a)

    @staticmethod
    def loadtxt(input_file):
        edges = list()
        f = open(input_file)
        for line in f:
            line = line.rstrip().split("":"")
            line[0] = line[0].split(""<->"")
            edges.append((line[0][0],line[0][1],line[1]))

        return UnrootedTree(*edges)

    def path(self, i, j):
        self.visited = [i]
        p = self.path_dfs(self.nb, i, j, [i])
        if p[0] != i:
            p = p [::-1]
        return p

    def distance(self, i,j):
        if (i,j) in self.d:
            return self.d[(i,j)]
        else:
            path = self.path(i,j)
            return self.path_weight(path)

    def path_dfs(self, graph, current_i, j, current_path):
        nb = graph[current_i]
        for n in nb:
            if n not in self.visited:
                self.visited.append(n)
                if n == j:
                    return current_path + [j]
                else:
                    r = self.path_dfs(graph, n, j, current_path + [n])
                    if r:
                        return r

    def nr_leaf_nodes(self):
        s = set()
        for edge in self.edges:
            x,y,w = edge
            if len(self.nb[x]) == 1:
                s.add(x)
            if len(self.nb[y]) == 1:
                s.add(y)
        return len(s)

    def path_weight(self, path):
        s = 0
        for i in range(len(path) -1):
            s += self.d[(path[i],path[i+1])]
        return s

    def distance_matrix(self):
        n = self.nr_leaf_nodes()
        D = [[0 for _ in range(n)] for _ in range(n)]
        self.path_weight(self.path(0,2))
        for i in range(n):
            for j in range(i+1,n):
                path = self.path(i,j)
                w = self.path_weight(path)
        D[i][j], D[j][i] = w, w
        return DistanceMatrix(D)

class Tree:
    def __init__(self, root, *subtrees):
        self.root = root
        self.subtrees = subtrees

    def __str__(self):
        subtrees_str = "", "".join([str(tree) for tree in self.subtrees])
        return type(self).__name__ + ""("" + str(self.root) + ("", "" if len(self.subtrees) > 0 else """") + subtrees_str + "")""

    def __repr__(self):
        return self.__str__()

",(module (import_from_statement (dotted_name (identifier)) (dotted_name (identifier))) (import_statement (aliased_import (dotted_name (identifier)) (identifier))) (import_statement (dotted_name (identifier))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list (list_splat (identifier))))))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier)))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))) (string)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (default_parameter (identifier) (none)) (default_parameter (identifier) (string)) (default_parameter (identifier) (none)) (default_parameter (identifier) (none)) (default_parameter (identifier) (integer)) (default_parameter (identifier) (none)) (default_parameter (identifier) (false)) (default_parameter (identifier) (integer))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))) (return_statement (expression_list (call (identifier) (argument_list (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string (escape_sequence))) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (assert_statement (parenthesized_expression (comparison_operator (identifier) (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list (identifier) (binary_operator (parenthesized_expression (binary_operator (binary_operator (identifier) (identifier)) (identifier))) (integer)))))))))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (call (attribute (identifier) (identifier)) (argument_list)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (if_statement (comparison_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer))) (attribute (identifier) (identifier))) (binary_operator (identifier) (integer))) (identifier))) (block (return_statement (expression_list (tuple (identifier) (identifier) (identifier)))))))))))) (return_statement (expression_list (string))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (identifier) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (parenthesized_expression (subscript (subscript (binary_operator (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer))) (integer))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (set (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)))))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier)))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (slice))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (binary_operator (identifier) (integer))) (identifier))) (expression_list (identifier)))) (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer)))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer))))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (while_statement (boolean_operator (comparison_operator (identifier) (binary_operator (call (identifier) (argument_list (identifier))) (integer))) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (integer)))))) (if_statement (boolean_operator (comparison_operator (identifier) (integer)) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (binary_operator (identifier) (integer))) (binary_operator (identifier) (integer)) (identifier))))) (else_clause (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (conditional_expression (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (identifier)) (comparison_operator (identifier) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (identifier))) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier))) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer)) (attribute (identifier) (identifier)) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (set (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (while_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (none) (none)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (identifier)) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (identifier) (identifier)))))))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier))) (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (identifier) (integer))))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (binary_operator (identifier) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier))) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))))) (return_statement (expression_list (subscript (identifier) (integer)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)))))))) (return_statement (expression_list (binary_operator (identifier) (parenthesized_expression (binary_operator (identifier) (identifier)))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (boolean_operator (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier)))) (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier))))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (break_statement))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (call (attribute (identifier) (identifier)) (argument_list)) (identifier)) (argument_list (string)))))) (expression_statement (assignment (expression_list (subscript (identifier) (integer))) (expression_list (call (attribute (subscript (identifier) (integer)) (identifier)) (argument_list (string)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (subscript (identifier) (integer)) (integer)) (subscript (subscript (identifier) (integer)) (integer)) (subscript (identifier) (integer)))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (list (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier) (list (identifier))))))) (if_statement (comparison_operator (subscript (identifier) (integer)) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (slice (unary_operator (integer))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (tuple (identifier) (identifier)) (attribute (identifier) (identifier))) (block (return_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (if_statement (comparison_operator (identifier) (attribute (identifier) (identifier))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (if_statement (comparison_operator (identifier) (identifier)) (block (return_statement (expression_list (binary_operator (identifier) (list (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (binary_operator (identifier) (list (identifier)))))))) (if_statement (identifier) (block (return_statement (expression_list (identifier)))))))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (call (identifier) (argument_list (identifier))) (integer))))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (identifier) (binary_operator (identifier) (integer)))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (call (attribute (identifier) (identifier)) (argument_list (integer) (integer)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier)) (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier) (identifier)))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (string) (identifier)) (argument_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))))) (return_statement (expression_list (binary_operator (binary_operator (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (parenthesized_expression (conditional_expression (string) (comparison_operator (call (identifier) (argument_list (attribute (identifier) (identifier)))) (integer)) (string)))) (identifier)) (string)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list)))))))))
11,samples/python/benchmark_files/UPGMA_A_functioncopied.py,"from collections import defaultdict

import numpy as np
import sys

class DistanceMatrix:
    def __init__(self, *args):
        self.D = np.array(*args)
        return

    def __str__(self):
        return str([[float(a) for a in x] for x in self.D])

    def __repr__(self):
        return type(self).__name__ + ""("" + str([[float(a) for a in x] for x in self.D]) + "")""

    @staticmethod
    def loadtxt(file_name, dtype=None, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0):
        D = np.loadtxt(file_name, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
        return DistanceMatrix(D)

    def savetxt(self, output_file, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# '):
        np.savetxt(output_file, self.D, fmt, delimiter, newline, header, footer, comments)
        return

    def nr_leaves(self):
        return len(self.D)

    def limb_length(self, j):
        n = self.nr_leaves()
        assert(j < n)
        minimum = sys.maxsize
        for i in range(n):
            if i != j:
                for k in range(n):
                    if k != j:
                        Dij = self.D[i][j]
                        Djk = self.D[j][k]
                        Dik = self.D[i][k]
                        minimum = min([minimum, (Dij+Djk-Dik)/2])
        return minimum

    def additive_phylogeny(self):
        self.node_count = self.nr_leaves()
        return self.additive_phylogeny_rec(self, self.nr_leaves())

    def find_i_n_k(self, n):
        for i in range(n-1):
            for k in range(n-1):
                if i != k:
                    if self.D[i][k] == self.D[i][n-1] + self.D[n-1][k]:
                        return (i, n, k)
        return ""nop""

    def additive_phylogeny_rec(self, D, n):
        if n == 3:
            ll1 = (D.D[0][1] + D.D[1][2] - D.D[0][2])/2
            ll2 = D.D[1][2] - ll1
            ll0 = D.D[0][1] - ll1
            edges = {(0, self.node_count, ll0), (1, self.node_count, ll1), (2, self.node_count, ll2)}
            self.node_count += 1
            return UnrootedTree(*edges)

        ll = D.limb_length(n-1)
        D_bald = DistanceMatrix(D.D[:])
        for x in range(n-1):
            D_bald.D[n-1][x] -= ll
            D_bald.D[x][n-1] -= ll

        i,n,k = D_bald.find_i_n_k(n)
        x = D_bald.D[i][n-1]
        trimmed_D = DistanceMatrix([[D_bald.D[a][b] for a in range(n-1)] for b in range(n-1)])
        T = self.additive_phylogeny_rec(trimmed_D, n-1)
        path = T.path(i,k)
        i = 1
        while i < len(path) -1 and T.distance(path[0],path[i]) < x:
            i += 1

        if i is not 0 and  T.distance(path[0],path[i]) == x:
            T.add_edge(path[i-1],n-1,ll)
        else:
            a,b = path[i-1],path[i]
            new_d = D.D[path[0]][b] - x if b < len(D.D) else T.distance(path[0],b) - x
            T.add_edge(self.node_count, b, new_d)
            T.add_edge(a, self.node_count, T.distance(a,b) - new_d)
            T.add_edge(n-1, self.node_count, ll)
            T.remove_edge(a, b)
            self.node_count += 1

        return T

    def UPGMA(self):
        self.nr_count = self.nr_leaves()
        clusters = [{i} for i in range(self.nr_leaves())]
        trees = [Tree(i) for i in range(self.nr_leaves())]
        ages = [0 for _ in range(self.nr_leaves())]
        while len(clusters) > 1:
            min_d = sys.maxsize
            min_C1, min_C2 = None, None
            n = len(clusters)
            for i in range(n):
                for j in range(i+1,n):
                    C1, C2 = clusters[i], clusters[j]
                    d = self.pairwise_distance(C1,C2)
                    if d < min_d:
                        min_d = d
                        min_C1, min_C2 = C1, C2

            C1_index, C2_index = clusters.index(min_C1), clusters.index(min_C2)
            age = min_d/2
            clusters[C1_index] = min_C1 | min_C2
            clusters.pop(C2_index)
            trees[C1_index] = Tree(self.nr_count, (trees[C1_index], age - ages[C1_index]), (trees[C2_index], age - ages[C2_index] ))
            trees.pop(C2_index)
            ages[C1_index] = age
            ages.pop(C2_index)
            self.nr_count += 1
        return trees[0]

    def pairwise_distance(self,C1, C2):
        n, m = len(C1), len(C2)
        s = sum([self.D[i][j] for i in C1 for j in C2])
        return s/(n*m)

class UnrootedTree:
    def __init__(self, *edges):
        self.edges = list()
        for edge in edges:
            a,b,c = edge
            a, b, c = int(a), int(b), float(c)
            self.edges.append((a,b,c))
        d = dict()
        for edge in self.edges:
            x, y, w = edge
            d[(x, y)] = w
            d[(y, x)] = w
        self.d = d
        nb = defaultdict(list)
        for edge in self.edges:
            x, y, w = edge
            nb[x].append(y)
            nb[y].append(x)
        self.nb = nb

    def __str__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def __repr__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def add_edge(self, a,b,w):
        self.edges.append((a,b,w))
        self.d[(a,b)] = w
        self.d[(b,a)] = w
        self.nb[a].append(b)
        self.nb[b].append(a)

    def remove_edge(self,a,b):
        for edge in self.edges:
            x,y,w = edge
            if (x == a and b == y) or (x == b and y == a):
                self.edges.remove(edge)
                break
        del self.d[(a,b)]
        del self.d[(b,a)]
        self.nb[a].remove(b)
        self.nb[b].remove(a)

    #from B
    @staticmethod
    def loadtxt(f):
        with open(f, ""r"") as graph_file:
            tuple_list = []
            for line in graph_file:
                line_arr = line.strip().split(""<->"")
                rhs = line_arr[1].split("":"")
                tuple_list.append((int(line_arr[0]), int(rhs[0]), float(rhs[1])))
            return UnrootedTree(*tuple_list)

    def path(self, i, j):
        self.visited = [i]
        p = self.path_dfs(self.nb, i, j, [i])
        if p[0] != i:
            p = p [::-1]
        return p

    def distance(self, i,j):
        if (i,j) in self.d:
            return self.d[(i,j)]
        else:
            path = self.path(i,j)
            return self.path_weight(path)

    def path_dfs(self, graph, current_i, j, current_path):
        nb = graph[current_i]
        for n in nb:
            if n not in self.visited:
                self.visited.append(n)
                if n == j:
                    return current_path + [j]
                else:
                    r = self.path_dfs(graph, n, j, current_path + [n])
                    if r:
                        return r

    def nr_leaf_nodes(self):
        s = set()
        for edge in self.edges:
            x,y,w = edge
            if len(self.nb[x]) == 1:
                s.add(x)
            if len(self.nb[y]) == 1:
                s.add(y)
        return len(s)

    def path_weight(self, path):
        s = 0
        for i in range(len(path) -1):
            s += self.d[(path[i],path[i+1])]
        return s

    def distance_matrix(self):
        n = self.nr_leaf_nodes()
        D = [[0 for _ in range(n)] for _ in range(n)]
        self.path_weight(self.path(0,2))
        for i in range(n):
            for j in range(i+1,n):
                path = self.path(i,j)
                w = self.path_weight(path)
        D[i][j], D[j][i] = w, w
        return DistanceMatrix(D)

class Tree:
    def __init__(self, root, *subtrees):
        self.root = root
        self.subtrees = subtrees

    def __str__(self):
        subtrees_str = "", "".join([str(tree) for tree in self.subtrees])
        return type(self).__name__ + ""("" + str(self.root) + ("", "" if len(self.subtrees) > 0 else """") + subtrees_str + "")""

    def __repr__(self):
        return self.__str__()
",(module (import_from_statement (dotted_name (identifier)) (dotted_name (identifier))) (import_statement (aliased_import (dotted_name (identifier)) (identifier))) (import_statement (dotted_name (identifier))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list (list_splat (identifier))))))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier)))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))) (string)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (default_parameter (identifier) (none)) (default_parameter (identifier) (string)) (default_parameter (identifier) (none)) (default_parameter (identifier) (none)) (default_parameter (identifier) (integer)) (default_parameter (identifier) (none)) (default_parameter (identifier) (false)) (default_parameter (identifier) (integer))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))) (return_statement (expression_list (call (identifier) (argument_list (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string (escape_sequence))) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (assert_statement (parenthesized_expression (comparison_operator (identifier) (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list (identifier) (binary_operator (parenthesized_expression (binary_operator (binary_operator (identifier) (identifier)) (identifier))) (integer)))))))))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (call (attribute (identifier) (identifier)) (argument_list)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (if_statement (comparison_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer))) (attribute (identifier) (identifier))) (binary_operator (identifier) (integer))) (identifier))) (block (return_statement (expression_list (tuple (identifier) (identifier) (identifier)))))))))))) (return_statement (expression_list (string))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (identifier) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (parenthesized_expression (subscript (subscript (binary_operator (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer))) (integer))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (set (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)))))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier)))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (slice))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (binary_operator (identifier) (integer))) (identifier))) (expression_list (identifier)))) (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer)))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer))))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (while_statement (boolean_operator (comparison_operator (identifier) (binary_operator (call (identifier) (argument_list (identifier))) (integer))) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (integer)))))) (if_statement (boolean_operator (comparison_operator (identifier) (integer)) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (binary_operator (identifier) (integer))) (binary_operator (identifier) (integer)) (identifier))))) (else_clause (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (conditional_expression (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (identifier)) (comparison_operator (identifier) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (identifier))) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier))) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer)) (attribute (identifier) (identifier)) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (set (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (while_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (none) (none)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (identifier)) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (identifier) (identifier)))))))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier))) (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (identifier) (integer))))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (binary_operator (identifier) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier))) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))))) (return_statement (expression_list (subscript (identifier) (integer)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)))))))) (return_statement (expression_list (binary_operator (identifier) (parenthesized_expression (binary_operator (identifier) (identifier)))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (boolean_operator (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier)))) (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier))))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (break_statement))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (comment) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier)) (block (with_statement (with_item (call (identifier) (argument_list (identifier) (string))) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (list)))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (call (attribute (identifier) (identifier)) (argument_list)) (identifier)) (argument_list (string)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (subscript (identifier) (integer)) (identifier)) (argument_list (string)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (call (identifier) (argument_list (subscript (identifier) (integer)))) (call (identifier) (argument_list (subscript (identifier) (integer)))) (call (identifier) (argument_list (subscript (identifier) (integer)))))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (list (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier) (list (identifier))))))) (if_statement (comparison_operator (subscript (identifier) (integer)) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (slice (unary_operator (integer))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (tuple (identifier) (identifier)) (attribute (identifier) (identifier))) (block (return_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (if_statement (comparison_operator (identifier) (attribute (identifier) (identifier))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (if_statement (comparison_operator (identifier) (identifier)) (block (return_statement (expression_list (binary_operator (identifier) (list (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (binary_operator (identifier) (list (identifier)))))))) (if_statement (identifier) (block (return_statement (expression_list (identifier)))))))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (call (identifier) (argument_list (identifier))) (integer))))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (identifier) (binary_operator (identifier) (integer)))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (call (attribute (identifier) (identifier)) (argument_list (integer) (integer)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier)) (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier) (identifier)))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (string) (identifier)) (argument_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))))) (return_statement (expression_list (binary_operator (binary_operator (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (parenthesized_expression (conditional_expression (string) (comparison_operator (call (identifier) (argument_list (attribute (identifier) (identifier)))) (integer)) (string)))) (identifier)) (string)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list)))))))))
12,samples/python/benchmark_files/UPGMA_A_functionsmoved.py,"from collections import defaultdict

import numpy as np
import sys

class Tree:
    def __str__(self):
        subtrees_str = "", "".join([str(tree) for tree in self.subtrees])
        return type(self).__name__ + ""("" + str(self.root) + ("", "" if len(self.subtrees) > 0 else """") + subtrees_str + "")""

    def __init__(self, root, *subtrees):
        self.root = root
        self.subtrees = subtrees

    def __repr__(self):
        return self.__str__()

class DistanceMatrix:
    def __init__(self, *args):
        self.D = np.array(*args)
        return

    @staticmethod
    def loadtxt(file_name, dtype=None, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0):
        D = np.loadtxt(file_name, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
        return DistanceMatrix(D)

    def __str__(self):
        return str([[float(a) for a in x] for x in self.D])

    def find_i_n_k(self, n):
        for i in range(n-1):
            for k in range(n-1):
                if i != k:
                    if self.D[i][k] == self.D[i][n-1] + self.D[n-1][k]:
                        return (i, n, k)
        return ""nop""

    def savetxt(self, output_file, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# '):
        np.savetxt(output_file, self.D, fmt, delimiter, newline, header, footer, comments)
        return

    def pairwise_distance(self,C1, C2):
        n, m = len(C1), len(C2)
        s = sum([self.D[i][j] for i in C1 for j in C2])
        return s/(n*m)

    def nr_leaves(self):
        return len(self.D)

    def limb_length(self, j):
        n = self.nr_leaves()
        assert(j < n)
        minimum = sys.maxsize
        for i in range(n):
            if i != j:
                for k in range(n):
                    if k != j:
                        Dij = self.D[i][j]
                        Djk = self.D[j][k]
                        Dik = self.D[i][k]
                        minimum = min([minimum, (Dij+Djk-Dik)/2])
        return minimum

    def additive_phylogeny(self):
        self.node_count = self.nr_leaves()
        return self.additive_phylogeny_rec(self, self.nr_leaves())

    def __repr__(self):
        return type(self).__name__ + ""("" + str([[float(a) for a in x] for x in self.D]) + "")""

    def UPGMA(self):
        self.nr_count = self.nr_leaves()
        clusters = [{i} for i in range(self.nr_leaves())]
        trees = [Tree(i) for i in range(self.nr_leaves())]
        ages = [0 for _ in range(self.nr_leaves())]
        while len(clusters) > 1:
            min_d = sys.maxsize
            min_C1, min_C2 = None, None
            n = len(clusters)
            for i in range(n):
                for j in range(i+1,n):
                    C1, C2 = clusters[i], clusters[j]
                    d = self.pairwise_distance(C1,C2)
                    if d < min_d:
                        min_d = d
                        min_C1, min_C2 = C1, C2

            C1_index, C2_index = clusters.index(min_C1), clusters.index(min_C2)
            age = min_d/2
            clusters[C1_index] = min_C1 | min_C2
            clusters.pop(C2_index)
            trees[C1_index] = Tree(self.nr_count, (trees[C1_index], age - ages[C1_index]), (trees[C2_index], age - ages[C2_index] ))
            trees.pop(C2_index)
            ages[C1_index] = age
            ages.pop(C2_index)
            self.nr_count += 1
        return trees[0]

    def additive_phylogeny_rec(self, D, n):
        if n == 3:
            ll1 = (D.D[0][1] + D.D[1][2] - D.D[0][2])/2
            ll2 = D.D[1][2] - ll1
            ll0 = D.D[0][1] - ll1
            edges = {(0, self.node_count, ll0), (1, self.node_count, ll1), (2, self.node_count, ll2)}
            self.node_count += 1
            return UnrootedTree(*edges)

        ll = D.limb_length(n-1)
        D_bald = DistanceMatrix(D.D[:])
        for x in range(n-1):
            D_bald.D[n-1][x] -= ll
            D_bald.D[x][n-1] -= ll

        i,n,k = D_bald.find_i_n_k(n)
        x = D_bald.D[i][n-1]
        trimmed_D = DistanceMatrix([[D_bald.D[a][b] for a in range(n-1)] for b in range(n-1)])
        T = self.additive_phylogeny_rec(trimmed_D, n-1)
        path = T.path(i,k)
        i = 1
        while i < len(path) -1 and T.distance(path[0],path[i]) < x:
            i += 1

        if i is not 0 and  T.distance(path[0],path[i]) == x:
            T.add_edge(path[i-1],n-1,ll)
        else:
            a,b = path[i-1],path[i]
            new_d = D.D[path[0]][b] - x if b < len(D.D) else T.distance(path[0],b) - x
            T.add_edge(self.node_count, b, new_d)
            T.add_edge(a, self.node_count, T.distance(a,b) - new_d)
            T.add_edge(n-1, self.node_count, ll)
            T.remove_edge(a, b)
            self.node_count += 1

        return T

class UnrootedTree:
    def __str__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def add_edge(self, a,b,w):
        self.edges.append((a,b,w))
        self.d[(a,b)] = w
        self.d[(b,a)] = w
        self.nb[a].append(b)
        self.nb[b].append(a)

    def __repr__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def distance(self, i,j):
        if (i,j) in self.d:
            return self.d[(i,j)]
        else:
            path = self.path(i,j)
            return self.path_weight(path)

    def remove_edge(self,a,b):
        for edge in self.edges:
            x,y,w = edge
            if (x == a and b == y) or (x == b and y == a):
                self.edges.remove(edge)
                break
        del self.d[(a,b)]
        del self.d[(b,a)]
        self.nb[a].remove(b)
        self.nb[b].remove(a)

    def path(self, i, j):
        self.visited = [i]
        p = self.path_dfs(self.nb, i, j, [i])
        if p[0] != i:
            p = p [::-1]
        return p

    def __init__(self, *edges):
        self.edges = list()
        for edge in edges:
            a,b,c = edge
            a, b, c = int(a), int(b), float(c)
            self.edges.append((a,b,c))
        d = dict()
        for edge in self.edges:
            x, y, w = edge
            d[(x, y)] = w
            d[(y, x)] = w
        self.d = d
        nb = defaultdict(list)
        for edge in self.edges:
            x, y, w = edge
            nb[x].append(y)
            nb[y].append(x)
        self.nb = nb

    @staticmethod
    def loadtxt(input_file):
        edges = list()
        f = open(input_file)
        for line in f:
            line = line.rstrip().split("":"")
            line[0] = line[0].split(""<->"")
            edges.append((line[0][0],line[0][1],line[1]))

        return UnrootedTree(*edges)

    def path_weight(self, path):
        s = 0
        for i in range(len(path) -1):
            s += self.d[(path[i],path[i+1])]
        return s

    def distance_matrix(self):
        n = self.nr_leaf_nodes()
        D = [[0 for _ in range(n)] for _ in range(n)]
        self.path_weight(self.path(0,2))
        for i in range(n):
            for j in range(i+1,n):
                path = self.path(i,j)
                w = self.path_weight(path)
        D[i][j], D[j][i] = w, w
        return DistanceMatrix(D)

    def path_dfs(self, graph, current_i, j, current_path):
        nb = graph[current_i]
        for n in nb:
            if n not in self.visited:
                self.visited.append(n)
                if n == j:
                    return current_path + [j]
                else:
                    r = self.path_dfs(graph, n, j, current_path + [n])
                    if r:
                        return r

    def nr_leaf_nodes(self):
        s = set()
        for edge in self.edges:
            x,y,w = edge
            if len(self.nb[x]) == 1:
                s.add(x)
            if len(self.nb[y]) == 1:
                s.add(y)
        return len(s)
",(module (import_from_statement (dotted_name (identifier)) (dotted_name (identifier))) (import_statement (aliased_import (dotted_name (identifier)) (identifier))) (import_statement (dotted_name (identifier))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (string) (identifier)) (argument_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))))) (return_statement (expression_list (binary_operator (binary_operator (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (parenthesized_expression (conditional_expression (string) (comparison_operator (call (identifier) (argument_list (attribute (identifier) (identifier)))) (integer)) (string)))) (identifier)) (string)))))) (function_definition (identifier) (parameters (identifier) (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list)))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list (list_splat (identifier))))))) (return_statement))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (default_parameter (identifier) (none)) (default_parameter (identifier) (string)) (default_parameter (identifier) (none)) (default_parameter (identifier) (none)) (default_parameter (identifier) (integer)) (default_parameter (identifier) (none)) (default_parameter (identifier) (false)) (default_parameter (identifier) (integer))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))) (return_statement (expression_list (call (identifier) (argument_list (identifier)))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier)))))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (if_statement (comparison_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer))) (attribute (identifier) (identifier))) (binary_operator (identifier) (integer))) (identifier))) (block (return_statement (expression_list (tuple (identifier) (identifier) (identifier)))))))))))) (return_statement (expression_list (string))))) (function_definition (identifier) (parameters (identifier) (identifier) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string (escape_sequence))) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))) (return_statement))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)))))))) (return_statement (expression_list (binary_operator (identifier) (parenthesized_expression (binary_operator (identifier) (identifier)))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (assert_statement (parenthesized_expression (comparison_operator (identifier) (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list (identifier) (binary_operator (parenthesized_expression (binary_operator (binary_operator (identifier) (identifier)) (identifier))) (integer)))))))))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (call (attribute (identifier) (identifier)) (argument_list)))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))) (string)))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (set (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (while_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (none) (none)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (identifier)) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (identifier) (identifier)))))))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier))) (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (identifier) (integer))))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (binary_operator (identifier) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier))) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))))) (return_statement (expression_list (subscript (identifier) (integer)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (identifier) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (parenthesized_expression (subscript (subscript (binary_operator (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer))) (integer))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (set (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)))))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier)))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (slice))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (binary_operator (identifier) (integer))) (identifier))) (expression_list (identifier)))) (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer)))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer))))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (while_statement (boolean_operator (comparison_operator (identifier) (binary_operator (call (identifier) (argument_list (identifier))) (integer))) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (integer)))))) (if_statement (boolean_operator (comparison_operator (identifier) (integer)) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (binary_operator (identifier) (integer))) (binary_operator (identifier) (integer)) (identifier))))) (else_clause (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (conditional_expression (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (identifier)) (comparison_operator (identifier) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (identifier))) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier))) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer)) (attribute (identifier) (identifier)) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer))))))) (return_statement (expression_list (identifier))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (tuple (identifier) (identifier)) (attribute (identifier) (identifier))) (block (return_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (boolean_operator (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier)))) (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier))))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (break_statement))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (list (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier) (list (identifier))))))) (if_statement (comparison_operator (subscript (identifier) (integer)) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (slice (unary_operator (integer))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (call (attribute (identifier) (identifier)) (argument_list)) (identifier)) (argument_list (string)))))) (expression_statement (assignment (expression_list (subscript (identifier) (integer))) (expression_list (call (attribute (subscript (identifier) (integer)) (identifier)) (argument_list (string)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (subscript (identifier) (integer)) (integer)) (subscript (subscript (identifier) (integer)) (integer)) (subscript (identifier) (integer)))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier))))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (call (identifier) (argument_list (identifier))) (integer))))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (identifier) (binary_operator (identifier) (integer)))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (call (attribute (identifier) (identifier)) (argument_list (integer) (integer)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier)) (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier) (identifier)))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (if_statement (comparison_operator (identifier) (attribute (identifier) (identifier))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (if_statement (comparison_operator (identifier) (identifier)) (block (return_statement (expression_list (binary_operator (identifier) (list (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (binary_operator (identifier) (list (identifier)))))))) (if_statement (identifier) (block (return_statement (expression_list (identifier)))))))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))))))
13,samples/python/benchmark_files/UPGMA_A_linesmoved.py,"from collections import defaultdict

import numpy as np
import sys

class DistanceMatrix:
    def __init__(self, *args):
        self.D = np.array(*args)
        return

    def __str__(self):
        return str([[float(a) for a in x] for x in self.D])

    def __repr__(self):
        return type(self).__name__ + ""("" + str([[float(a) for a in x] for x in self.D]) + "")""

    @staticmethod
    def loadtxt(file_name, dtype=None, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0):
        D = np.loadtxt(file_name, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
        return DistanceMatrix(D)

    def savetxt(self, output_file, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# '):
        np.savetxt(output_file, self.D, fmt, delimiter, newline, header, footer, comments)
        return

    def nr_leaves(self):
        return len(self.D)

    def limb_length(self, j):
        n = self.nr_leaves()
        assert(j < n)
        minimum = sys.maxsize
        for i in range(n):
            if i != j:
                for k in range(n):
                    if k != j:
                        # next 3 lines are shuffled
                        Dik = self.D[i][k]
                        Djk = self.D[j][k]
                        Dij = self.D[i][j]
                        minimum = min([minimum, (Dij+Djk-Dik)/2])
        return minimum

    def additive_phylogeny(self):
        self.node_count = self.nr_leaves()
        return self.additive_phylogeny_rec(self, self.nr_leaves())

    def find_i_n_k(self, n):
        for i in range(n-1):
            for k in range(n-1):
                if i != k:
                    if self.D[i][k] == self.D[i][n-1] + self.D[n-1][k]:
                        return (i, n, k)
        return ""nop""

    def additive_phylogeny_rec(self, D, n):
        if n == 3:
            ll1 = (D.D[0][1] + D.D[1][2] - D.D[0][2])/2
            ll2 = D.D[1][2] - ll1
            ll0 = D.D[0][1] - ll1
            edges = {(0, self.node_count, ll0), (1, self.node_count, ll1), (2, self.node_count, ll2)}
            self.node_count += 1
            return UnrootedTree(*edges)

        ll = D.limb_length(n-1)
        D_bald = DistanceMatrix(D.D[:])
        for x in range(n-1):
            # next two lines are switched
            D_bald.D[x][n-1] -= ll
            D_bald.D[n-1][x] -= ll

        i,n,k = D_bald.find_i_n_k(n)
        x = D_bald.D[i][n-1]
        trimmed_D = DistanceMatrix([[D_bald.D[a][b] for a in range(n-1)] for b in range(n-1)])
        T = self.additive_phylogeny_rec(trimmed_D, n-1)
        path = T.path(i,k)
        i = 1
        while i < len(path) -1 and T.distance(path[0],path[i]) < x:
            i += 1

        if i is not 0 and  T.distance(path[0],path[i]) == x:
            T.add_edge(path[i-1],n-1,ll)
        else:
            a,b = path[i-1],path[i]
            new_d = D.D[path[0]][b] - x if b < len(D.D) else T.distance(path[0],b) - x
            T.add_edge(self.node_count, b, new_d)
            T.add_edge(a, self.node_count, T.distance(a,b) - new_d)
            T.add_edge(n-1, self.node_count, ll)
            T.remove_edge(a, b)
            self.node_count += 1

        return T

    def UPGMA(self):
        self.nr_count = self.nr_leaves()
        clusters = [{i} for i in range(self.nr_leaves())]
        trees = [Tree(i) for i in range(self.nr_leaves())]
        ages = [0 for _ in range(self.nr_leaves())]
        while len(clusters) > 1:
            min_d = sys.maxsize
            min_C1, min_C2 = None, None
            n = len(clusters)
            for i in range(n):
                for j in range(i+1,n):
                    C1, C2 = clusters[i], clusters[j]
                    d = self.pairwise_distance(C1,C2)
                    if d < min_d:
                        min_d = d
                        min_C1, min_C2 = C1, C2

            C1_index, C2_index = clusters.index(min_C1), clusters.index(min_C2)
            age = min_d/2
            clusters[C1_index] = min_C1 | min_C2
            clusters.pop(C2_index)
            trees[C1_index] = Tree(self.nr_count, (trees[C1_index], age - ages[C1_index]), (trees[C2_index], age - ages[C2_index] ))
            trees.pop(C2_index)
            ages[C1_index] = age
            ages.pop(C2_index)
            self.nr_count += 1
        return trees[0]

    def pairwise_distance(self,C1, C2):
        n, m = len(C1), len(C2)
        s = sum([self.D[i][j] for i in C1 for j in C2])
        return s/(n*m)

class UnrootedTree:
    def __init__(self, *edges):
        self.edges = list()
        for edge in edges:
            a,b,c = edge
            a, b, c = int(a), int(b), float(c)
            self.edges.append((a,b,c))
        d = dict()
        for edge in self.edges:
            x, y, w = edge
            #next two lines are switched
            d[(y, x)] = w
            d[(x, y)] = w
        self.d = d
        nb = defaultdict(list)
        for edge in self.edges:
            x, y, w = edge
            # next two lines are switched
            nb[y].append(x)
            nb[x].append(y)
        self.nb = nb

    def __str__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def __repr__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def add_edge(self, a,b,w):
        self.edges.append((a,b,w))
        self.d[(a,b)] = w
        self.d[(b,a)] = w
        self.nb[a].append(b)
        self.nb[b].append(a)

    def remove_edge(self,a,b):
        for edge in self.edges:
            x,y,w = edge
            if (x == a and b == y) or (x == b and y == a):
                self.edges.remove(edge)
                break
        # deletion order is switched
        del self.d[(b,a)]
        del self.d[(a,b)]
        self.nb[b].remove(a)
        self.nb[a].remove(b)

    @staticmethod
    def loadtxt(input_file):
        edges = list()
        f = open(input_file)
        for line in f:
            line = line.rstrip().split("":"")
            line[0] = line[0].split(""<->"")
            edges.append((line[0][0],line[0][1],line[1]))

        return UnrootedTree(*edges)

    def path(self, i, j):
        self.visited = [i]
        p = self.path_dfs(self.nb, i, j, [i])
        if p[0] != i:
            p = p [::-1]
        return p

    def distance(self, i,j):
        if (i,j) in self.d:
            return self.d[(i,j)]
        else:
            path = self.path(i,j)
            return self.path_weight(path)

    def path_dfs(self, graph, current_i, j, current_path):
        nb = graph[current_i]
        for n in nb:
            if n not in self.visited:
                self.visited.append(n)
                if n == j:
                    return current_path + [j]
                else:
                    r = self.path_dfs(graph, n, j, current_path + [n])
                    if r:
                        return r

    def nr_leaf_nodes(self):
        s = set()
        for edge in self.edges:
            x,y,w = edge
            #these two if cases have been switched
            if len(self.nb[y]) == 1:
                s.add(y)
            if len(self.nb[x]) == 1:
                s.add(x)
        return len(s)

    def path_weight(self, path):
        s = 0
        for i in range(len(path) -1):
            s += self.d[(path[i],path[i+1])]
        return s

    def distance_matrix(self):
        n = self.nr_leaf_nodes()
        D = [[0 for _ in range(n)] for _ in range(n)]
        self.path_weight(self.path(0,2))
        for i in range(n):
            for j in range(i+1,n):
                path = self.path(i,j)
                w = self.path_weight(path)
        D[i][j], D[j][i] = w, w
        return DistanceMatrix(D)

class Tree:
    def __init__(self, root, *subtrees):
        self.root = root
        self.subtrees = subtrees

    def __str__(self):
        subtrees_str = "", "".join([str(tree) for tree in self.subtrees])
        return type(self).__name__ + ""("" + str(self.root) + ("", "" if len(self.subtrees) > 0 else """") + subtrees_str + "")""

    def __repr__(self):
        return self.__str__()
",(module (import_from_statement (dotted_name (identifier)) (dotted_name (identifier))) (import_statement (aliased_import (dotted_name (identifier)) (identifier))) (import_statement (dotted_name (identifier))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list (list_splat (identifier))))))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier)))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))) (string)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (default_parameter (identifier) (none)) (default_parameter (identifier) (string)) (default_parameter (identifier) (none)) (default_parameter (identifier) (none)) (default_parameter (identifier) (integer)) (default_parameter (identifier) (none)) (default_parameter (identifier) (false)) (default_parameter (identifier) (integer))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))) (return_statement (expression_list (call (identifier) (argument_list (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string (escape_sequence))) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (assert_statement (parenthesized_expression (comparison_operator (identifier) (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (comment) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list (identifier) (binary_operator (parenthesized_expression (binary_operator (binary_operator (identifier) (identifier)) (identifier))) (integer)))))))))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (call (attribute (identifier) (identifier)) (argument_list)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (if_statement (comparison_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer))) (attribute (identifier) (identifier))) (binary_operator (identifier) (integer))) (identifier))) (block (return_statement (expression_list (tuple (identifier) (identifier) (identifier)))))))))))) (return_statement (expression_list (string))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (identifier) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (parenthesized_expression (subscript (subscript (binary_operator (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer))) (integer))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (set (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)))))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier)))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (slice))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (comment) (block (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))) (expression_list (identifier)))) (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (binary_operator (identifier) (integer))) (identifier))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer)))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer))))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (while_statement (boolean_operator (comparison_operator (identifier) (binary_operator (call (identifier) (argument_list (identifier))) (integer))) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (integer)))))) (if_statement (boolean_operator (comparison_operator (identifier) (integer)) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (binary_operator (identifier) (integer))) (binary_operator (identifier) (integer)) (identifier))))) (else_clause (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (conditional_expression (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (identifier)) (comparison_operator (identifier) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (identifier))) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier))) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer)) (attribute (identifier) (identifier)) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (set (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (while_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (none) (none)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (identifier)) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (identifier) (identifier)))))))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier))) (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (identifier) (integer))))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (binary_operator (identifier) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier))) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))))) (return_statement (expression_list (subscript (identifier) (integer)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)))))))) (return_statement (expression_list (binary_operator (identifier) (parenthesized_expression (binary_operator (identifier) (identifier)))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (comment) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (comment) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (boolean_operator (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier)))) (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier))))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (break_statement))))) (comment) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (call (attribute (identifier) (identifier)) (argument_list)) (identifier)) (argument_list (string)))))) (expression_statement (assignment (expression_list (subscript (identifier) (integer))) (expression_list (call (attribute (subscript (identifier) (integer)) (identifier)) (argument_list (string)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (subscript (identifier) (integer)) (integer)) (subscript (subscript (identifier) (integer)) (integer)) (subscript (identifier) (integer)))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (list (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier) (list (identifier))))))) (if_statement (comparison_operator (subscript (identifier) (integer)) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (slice (unary_operator (integer))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (tuple (identifier) (identifier)) (attribute (identifier) (identifier))) (block (return_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (if_statement (comparison_operator (identifier) (attribute (identifier) (identifier))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (if_statement (comparison_operator (identifier) (identifier)) (block (return_statement (expression_list (binary_operator (identifier) (list (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (binary_operator (identifier) (list (identifier)))))))) (if_statement (identifier) (block (return_statement (expression_list (identifier)))))))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (comment) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (call (identifier) (argument_list (identifier))) (integer))))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (identifier) (binary_operator (identifier) (integer)))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (call (attribute (identifier) (identifier)) (argument_list (integer) (integer)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier)) (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier) (identifier)))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (string) (identifier)) (argument_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))))) (return_statement (expression_list (binary_operator (binary_operator (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (parenthesized_expression (conditional_expression (string) (comparison_operator (call (identifier) (argument_list (attribute (identifier) (identifier)))) (integer)) (string)))) (identifier)) (string)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list)))))))))
14,samples/python/benchmark_files/UPGMA_A_variablenames.py,"from collections import defaultdict

import numpy as np
import sys

class DistanceMatrix:
    def __init__(self, *args):
        self.distances = np.array(*args)
        return

    def __str__(self):
        return str([[float(a) for a in x] for x in self.distances])

    def __repr__(self):
        return type(self).__name__ + ""("" + str([[float(a) for a in x] for x in self.distances]) + "")""

    @staticmethod
    def loadtxt(file_name, dtype=None, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0):
        distances = np.loadtxt(file_name, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
        return DistanceMatrix(distances)

    def savetxt(self, output_file, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# '):
        np.savetxt(output_file, self.distances, fmt, delimiter, newline, header, footer, comments)
        return

    def nr_leaves(self):
        return len(self.distances)

    def limb_length(self, j):
        n = self.nr_leaves()
        assert(j < n)
        minimum = sys.maxsize
        for i in range(n):
            if i != j:
                for k in range(n):
                    if k != j:
                        distances_ij = self.distances[i][j]
                        distances_jk = self.distances[j][k]
                        distances_ik = self.distances[i][k]
                        minimum = min([minimum, (distances_ij+distances_jk-distances_ik)/2])
        return minimum

    def additive_phylogeny(self):
        self.node_count = self.nr_leaves()
        return self.additive_phylogeny_rec(self, self.nr_leaves())

    def find_i_n_k(self, n):
        for i in range(n-1):
            for k in range(n-1):
                if i != k:
                    if self.distances[i][k] == self.distances[i][n-1] + self.distances[n-1][k]:
                        return (i, n, k)
        return ""nop""

    def additive_phylogeny_rec(self, distances, n):
        if n == 3:
            ll1 = (distances.distances[0][1] + distances.distances[1][2] - distances.distances[0][2])/2
            ll2 = distances.distances[1][2] - ll1
            ll0 = distances.distances[0][1] - ll1
            edges = {(0, self.node_count, ll0), (1, self.node_count, ll1), (2, self.node_count, ll2)}
            self.node_count += 1
            return UnrootedTree(*edges)

        ll = distances.limb_length(n-1)
        distances_bald = DistanceMatrix(distances.distances[:])
        for x in range(n-1):
            distances_bald.distances[n-1][x] -= ll
            distances_bald.distances[x][n-1] -= ll

        i,n,k = distances_bald.find_i_n_k(n)
        x = distances_bald.distances[i][n-1]
        trimmed_distances = DistanceMatrix([[distances_bald.distances[a][b] for a in range(n-1)] for b in range(n-1)])
        T = self.additive_phylogeny_rec(trimmed_distances, n-1)
        path = T.path(i,k)
        i = 1
        while i < len(path) -1 and T.distance(path[0],path[i]) < x:
            i += 1

        if i is not 0 and  T.distance(path[0],path[i]) == x:
            T.add_edge(path[i-1],n-1,ll)
        else:
            a,b = path[i-1],path[i]
            new_d = distances.distances[path[0]][b] - x if b < len(distances.distances) else T.distance(path[0],b) - x
            T.add_edge(self.node_count, b, new_d)
            T.add_edge(a, self.node_count, T.distance(a,b) - new_d)
            T.add_edge(n-1, self.node_count, ll)
            T.remove_edge(a, b)
            self.node_count += 1

        return T

    def UPGMA(self):
        self.nr_count = self.nr_leaves()
        clusters = [{i} for i in range(self.nr_leaves())]
        trees = [Tree(i) for i in range(self.nr_leaves())]
        ages = [0 for _ in range(self.nr_leaves())]
        while len(clusters) > 1:
            min_d = sys.maxsize
            min_C1, min_C2 = None, None
            n = len(clusters)
            for i in range(n):
                for j in range(i+1,n):
                    C1, C2 = clusters[i], clusters[j]
                    d = self.pairwise_distance(C1,C2)
                    if d < min_d:
                        min_d = d
                        min_C1, min_C2 = C1, C2

            C1_index, C2_index = clusters.index(min_C1), clusters.index(min_C2)
            age = min_d/2
            clusters[C1_index] = min_C1 | min_C2
            clusters.pop(C2_index)
            trees[C1_index] = Tree(self.nr_count, (trees[C1_index], age - ages[C1_index]), (trees[C2_index], age - ages[C2_index] ))
            trees.pop(C2_index)
            ages[C1_index] = age
            ages.pop(C2_index)
            self.nr_count += 1
        return trees[0]

    def pairwise_distance(self,C1, C2):
        n, m = len(C1), len(C2)
        s = sum([self.distances[i][j] for i in C1 for j in C2])
        return s/(n*m)

class UnrootedTree:
    def __init__(self, *edges):
        self.edges = list()
        for edge in edges:
            a,b,c = edge
            a, b, c = int(a), int(b), float(c)
            self.edges.append((a,b,c))
        d = dict()
        for edge in self.edges:
            x, y, w = edge
            d[(x, y)] = w
            d[(y, x)] = w
        self.distances = d
        nb = defaultdict(list)
        for edge in self.edges:
            x, y, w = edge
            nb[x].append(y)
            nb[y].append(x)
        self.nb = nb

    def __str__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def __repr__(self):
        return type(self).__name__ + str(tuple(self.edges))

    def add_edge(self, a,b,w):
        self.edges.append((a,b,w))
        self.distances[(a,b)] = w
        self.distances[(b,a)] = w
        self.nb[a].append(b)
        self.nb[b].append(a)

    def remove_edge(self,a,b):
        for edge in self.edges:
            x,y,w = edge
            if (x == a and b == y) or (x == b and y == a):
                self.edges.remove(edge)
                break
        del self.distances[(a,b)]
        del self.distances[(b,a)]
        self.nb[a].remove(b)
        self.nb[b].remove(a)

    @staticmethod
    def loadtxt(input_file):
        edges = list()
        f = open(input_file)
        for line in f:
            line = line.rstrip().split("":"")
            line[0] = line[0].split(""<->"")
            edges.append((line[0][0],line[0][1],line[1]))

        return UnrootedTree(*edges)

    def path(self, i, j):
        self.visited = [i]
        p = self.path_dfs(self.nb, i, j, [i])
        if p[0] != i:
            p = p [::-1]
        return p

    def distance(self, i,j):
        if (i,j) in self.distances:
            return self.distances[(i,j)]
        else:
            path = self.path(i,j)
            return self.path_weight(path)

    def path_dfs(self, graph, current_i, j, current_path):
        nb = graph[current_i]
        for n in nb:
            if n not in self.visited:
                self.visited.append(n)
                if n == j:
                    return current_path + [j]
                else:
                    r = self.path_dfs(graph, n, j, current_path + [n])
                    if r:
                        return r

    def nr_leaf_nodes(self):
        s = set()
        for edge in self.edges:
            x,y,w = edge
            if len(self.nb[x]) == 1:
                s.add(x)
            if len(self.nb[y]) == 1:
                s.add(y)
        return len(s)

    def path_weight(self, path):
        s = 0
        for i in range(len(path) -1):
            s += self.distances[(path[i],path[i+1])]
        return s

    def distance_matrix(self):
        n = self.nr_leaf_nodes()
        distances = [[0 for _ in range(n)] for _ in range(n)]
        self.path_weight(self.path(0,2))
        for i in range(n):
            for j in range(i+1,n):
                path = self.path(i,j)
                w = self.path_weight(path)
        distances[i][j], distances[j][i] = w, w
        return DistanceMatrix(distances)

class Tree:
    def __init__(self, root, *subtrees):
        self.root = root
        self.subtrees = subtrees

    def __str__(self):
        subtrees_str = "", "".join([str(tree) for tree in self.subtrees])
        return type(self).__name__ + ""("" + str(self.root) + ("", "" if len(self.subtrees) > 0 else """") + subtrees_str + "")""

    def __repr__(self):
        return self.__str__()
",(module (import_from_statement (dotted_name (identifier)) (dotted_name (identifier))) (import_statement (aliased_import (dotted_name (identifier)) (identifier))) (import_statement (dotted_name (identifier))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list (list_splat (identifier))))))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier)))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (list_comprehension (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))) (string)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (default_parameter (identifier) (none)) (default_parameter (identifier) (string)) (default_parameter (identifier) (none)) (default_parameter (identifier) (none)) (default_parameter (identifier) (integer)) (default_parameter (identifier) (none)) (default_parameter (identifier) (false)) (default_parameter (identifier) (integer))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))) (return_statement (expression_list (call (identifier) (argument_list (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string (escape_sequence))) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))) (return_statement))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (assert_statement (parenthesized_expression (comparison_operator (identifier) (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list (identifier) (binary_operator (parenthesized_expression (binary_operator (binary_operator (identifier) (identifier)) (identifier))) (integer)))))))))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (call (attribute (identifier) (identifier)) (argument_list)))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (if_statement (comparison_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer))) (attribute (identifier) (identifier))) (binary_operator (identifier) (integer))) (identifier))) (block (return_statement (expression_list (tuple (identifier) (identifier) (identifier)))))))))))) (return_statement (expression_list (string))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (identifier) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (parenthesized_expression (subscript (subscript (binary_operator (subscript (subscript (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer)) (attribute (identifier) (identifier))) (integer)) (integer))) (integer))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (integer)) (integer)) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (set (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)) (tuple (integer) (attribute (identifier) (identifier)) (identifier)))))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier)))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (slice))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (binary_operator (identifier) (integer))) (identifier))) (expression_list (identifier)))) (expression_statement (augmented_assignment (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (binary_operator (identifier) (integer)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer)))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (binary_operator (identifier) (integer))))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (while_statement (boolean_operator (comparison_operator (identifier) (binary_operator (call (identifier) (argument_list (identifier))) (integer))) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (integer)))))) (if_statement (boolean_operator (comparison_operator (identifier) (integer)) (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (subscript (identifier) (identifier)))) (identifier))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (binary_operator (identifier) (integer))) (binary_operator (identifier) (integer)) (identifier))))) (else_clause (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (conditional_expression (binary_operator (subscript (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (identifier)) (comparison_operator (identifier) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (integer)) (identifier))) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (binary_operator (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier))) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (binary_operator (identifier) (integer)) (attribute (identifier) (identifier)) (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (set (identifier)) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))) (while_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (attribute (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (none) (none)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (subscript (identifier) (identifier)) (subscript (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (identifier) (identifier)))))))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier))) (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (identifier) (integer))))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (binary_operator (identifier) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier))) (tuple (subscript (identifier) (identifier)) (subscript (binary_operator (identifier) (identifier)) (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))))) (return_statement (expression_list (subscript (identifier) (integer)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_comprehension (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)) (for_in_clause (variables (identifier)) (identifier)))))))) (return_statement (expression_list (binary_operator (identifier) (parenthesized_expression (binary_operator (identifier) (identifier)))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier)))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (tuple (identifier) (identifier)))) (expression_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (identifier) (identifier) (identifier))))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (boolean_operator (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier)))) (parenthesized_expression (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier))))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (break_statement))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (delete_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier))))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (argument_list (identifier)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (call (attribute (identifier) (identifier)) (argument_list)) (identifier)) (argument_list (string)))))) (expression_statement (assignment (expression_list (subscript (identifier) (integer))) (expression_list (call (attribute (subscript (identifier) (integer)) (identifier)) (argument_list (string)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (subscript (identifier) (integer)) (integer)) (subscript (subscript (identifier) (integer)) (integer)) (subscript (identifier) (integer)))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (list (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier) (identifier) (list (identifier))))))) (if_statement (comparison_operator (subscript (identifier) (integer)) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (slice (unary_operator (integer))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (tuple (identifier) (identifier)) (attribute (identifier) (identifier))) (block (return_statement (expression_list (subscript (attribute (identifier) (identifier)) (tuple (identifier) (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (identifier) (identifier))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (if_statement (comparison_operator (identifier) (attribute (identifier) (identifier))) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))) (if_statement (comparison_operator (identifier) (identifier)) (block (return_statement (expression_list (binary_operator (identifier) (list (identifier)))))) (else_clause (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (binary_operator (identifier) (list (identifier)))))))) (if_statement (identifier) (block (return_statement (expression_list (identifier)))))))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier) (identifier) (identifier)) (expression_list (identifier)))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))) (if_statement (comparison_operator (call (identifier) (argument_list (subscript (attribute (identifier) (identifier)) (identifier)))) (integer)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (call (identifier) (argument_list (identifier))) (integer))))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (subscript (identifier) (binary_operator (identifier) (integer)))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (identifier)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (call (attribute (identifier) (identifier)) (argument_list (integer) (integer)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier)))))))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier)) (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier) (identifier)))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (string) (identifier)) (argument_list (list_comprehension (call (identifier) (argument_list (identifier))) (for_in_clause (variables (identifier)) (attribute (identifier) (identifier))))))))) (return_statement (expression_list (binary_operator (binary_operator (binary_operator (binary_operator (binary_operator (attribute (call (identifier) (argument_list (identifier))) (identifier)) (string)) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (parenthesized_expression (conditional_expression (string) (comparison_operator (call (identifier) (argument_list (attribute (identifier) (identifier)))) (integer)) (string)))) (identifier)) (string)))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list)))))))))
15,samples/python/benchmark_files/UPGMA_B.py,"import numpy as np
from collections import defaultdict
from math import inf

class DistanceMatrix:

    def __init__(self, object, dtype=None, copy=True, order='K', subok=False, ndmin=0):
        self.matrix = np.array(object, dtype=dtype, copy=copy, order=order, subok=subok, ndmin=ndmin)
        self.max_node = len(self.matrix)
        is_symmetric = np.allclose(self.matrix, self.matrix.T, atol=1e-8)
        is_all_positive = self.matrix.min() >= 0
        diagonal_is_zero = np.count_nonzero(np.diagonal(self.matrix)) == 0
        if not is_symmetric or not is_all_positive or not diagonal_is_zero:
            raise ValueError(""invalid distance matrix"")

    @staticmethod
    def loadtxt(fname, dtype=np.float, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0):
        matrix = np.loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
        return DistanceMatrix(matrix, dtype, ndmin=ndmin)

    def savetxt(self, fname, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# '):
        np.savetxt(fname, self.matrix, fmt, delimiter, newline, header, footer, comments)

    def limb_length(self, j):
        return DistanceMatrix.limb_length_from_matrix(self.matrix, j)

    @staticmethod
    def limb_length_from_matrix(mat, j):
        n = len(mat)
        min_length = inf
        for i in range(n):
            for k in range(i + 1, n):
                if i != j and k != j:
                    length = (mat[i][j] + mat[j][k] - mat[i][k]) / 2
                    if length < min_length:
                        min_length = length
        return min_length

    def additive_phylogeny(self):
        self.max_node = len(self.matrix)
        return UnrootedTree(*sorted(self.additive_phylogeny_recursive(self.matrix, len(self.matrix))))

    def additive_phylogeny_recursive(self, mat, n):
        if n == 2:
            return [(0, 1, mat[0][1])]
        limb_size = DistanceMatrix.limb_length_from_matrix(mat[:n, :n], n - 1)
        for j in range(n - 1):
            mat[n - 1][j] = mat[n - 1][j] - limb_size
            mat[j][n - 1] = mat[n - 1][j]
        for i in range(n - 1):
            found = False
            for k in range(i, n - 1):
                if mat[i][k] == mat[i][n - 1] + mat[k][n - 1]:
                    found = True
                    break
            if found:
                break
        x = mat[i][n - 1]
        tree_list = self.additive_phylogeny_recursive(mat.copy(), n - 1)
        tree = UnrootedTree(*tree_list)
        path = tree.path(i, k)
        for j in range(1, len(path)):
            edge = (path[j - 1], path[j])
            edge_sorted = tuple(sorted(edge))
            if tree.edges[edge_sorted] > x:
                tree_list.remove((edge_sorted[0], edge_sorted[1], tree.edges[edge_sorted]))
                tree_list.append((edge[0], self.max_node, x))
                tree_list.append((edge[1], self.max_node, tree.edges[edge_sorted] - x))
                tree_list.append((n - 1, self.max_node, limb_size))
                self.max_node += 1
                break
            elif tree.edges[edge_sorted] == x:
                new_edge = sorted((n - 1, edge[1]))
                tree_list.append((new_edge[0], new_edge[1], limb_size))
                break
            else:
                x -= tree.edges[edge_sorted]

        return tree_list

    def UPGMA(self):
        clusters = dict()
        cluster_mapping = dict()
        trees = dict()
        ages = dict()
        mat = self.matrix.copy()
        for i in range(len(self.matrix)):
            clusters[i] = set([i])
            cluster_mapping[i] = i
            trees[i] = Tree(i)
            ages[i] = 0
        self.max_node = len(self.matrix)

        while len(clusters) > 1:
            closest_clusters_distance = inf
            for i in clusters.keys():
                for j in clusters.keys():
                    if i != j:
                        dist = mat[cluster_mapping[i]][cluster_mapping[j]]
                        if dist < closest_clusters_distance:
                            closest_clusters = (i, j)
                            closest_clusters_distance = dist

            i, j = closest_clusters

            new_cluster = clusters[i].union(clusters[j])
            new_tree = Tree(self.max_node, (trees[i], 0), (trees[j], 0))
            del trees[i]
            del trees[j]
            trees[self.max_node] = new_tree
            ages[self.max_node] = closest_clusters_distance / 2
            cluster_mapping[self.max_node] = cluster_mapping[i]
            del cluster_mapping[i]
            del cluster_mapping[j]
            del clusters[i]
            del clusters[j]
            clusters[self.max_node] = new_cluster

            for i, cluster in clusters.items():
                if i != self.max_node:
                    distance = self.get_cluster_distance(new_cluster, cluster)
                    mat[cluster_mapping[self.max_node]][cluster_mapping[i]] = distance
                    mat[cluster_mapping[i]][cluster_mapping[self.max_node]] = distance

            self.max_node += 1

        root = list(trees.values())[0]
        DistanceMatrix.set_age(ages, root)
        return root

    @staticmethod
    def set_age(ages, node):
        for child in node.children.keys():
            node.children[child] = ages[node.label] - ages[child.label]
            if child.children:
                DistanceMatrix.set_age(ages, child)

    def get_cluster_distance(self, c1, c2):
        distance = 0
        for i in c1:
            for j in c2:
                distance += self.matrix[i][j]
        distance /= len(c1) * len(c2)
        return distance

    def __repr__(self):
        return ""DistanceMatrix("" + str(self) + "")""

    def __str__(self):
        mat_string = ""[""
        for row in self.matrix:
            mat_string += ""[""
            for val in row:
                mat_string += str(val) + "", ""
            mat_string = mat_string[:-2] + ""], ""
        mat_string = mat_string[:-2] + ""]""
        return mat_string

class UnrootedTree:

    def __init__(self, *args):
        self.graph = defaultdict(set)
        self.edges = defaultdict(int)
        self.nodes = set()
        self.edges_list = list()
        self.leaves = set()
        for tup in args:
            self.graph[tup[0]].add((tup[1]))
            self.graph[tup[1]].add((tup[0]))
            self.edges[tuple(sorted((tup[0], tup[1])))] = tup[2]
            self.edges_list.append((tup[0], tup[1], float(tup[2])))
            self.nodes.add(tup[0])
            self.nodes.add(tup[1])
        for key, val in self.graph.items():
            if len(val) == 1:
                self.leaves.add(key)

    def __repr__(self):
        repr_str = ""UnrootedTree(""
        for edge in self.edges_list:
            repr_str += str(edge) + "", ""
        return repr_str[:-2] + "")""

    @staticmethod
    def loadtxt(f):
        with open(f, ""r"") as graph_file:
            tuple_list = []
            for line in graph_file:
                line_arr = line.strip().split(""<->"")
                rhs = line_arr[1].split("":"")
                tuple_list.append((int(line_arr[0]), int(rhs[0]), float(rhs[1])))
            return UnrootedTree(*tuple_list)

    def path(self, first_node, second_node):
        stack = [(first_node, [first_node])]
        while stack:
            (vertex, path) = stack.pop()
            for next_vertex in self.graph[vertex] - set(path):
                if next_vertex == second_node:
                    return path + [next_vertex]
                else:
                    stack.append((next_vertex, path + [next_vertex]))

    def distance_matrix(self):
        mat = [[0 for _ in range(len(self.leaves))] for _ in range(len(self.leaves))]
        for n1 in self.leaves:
            for n2 in self.leaves:
                if n1 < n2:
                    path = self.path(n1, n2)
                    length = 0
                    for i in range(1, len(path)):
                        length += self.edges[tuple(sorted((path[i - 1], path[i])))]
                    mat[n1][n2] = length
                    mat[n2][n1] = length
        return DistanceMatrix(mat)

class Tree:

    def __init__(self, label, *args):
        self.label = label
        self.children = dict()
        for child in args:
            self.children[child[0]] = child[1]

    def __repr__(self):
        repr_str = ""Tree("" + str(self.label) + "", ""
        for child, weight in self.children.items():
            repr_str += ""("" + child.__repr__() + "", "" + str(weight) + ""), ""
        return repr_str[:-2] + "")""

if __name__ == ""__main__"":
    D = DistanceMatrix.loadtxt('distances.txt')
    print(D.UPGMA())
",(module (import_statement (aliased_import (dotted_name (identifier)) (identifier))) (import_from_statement (dotted_name (identifier)) (dotted_name (identifier))) (import_from_statement (dotted_name (identifier)) (dotted_name (identifier))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (identifier) (default_parameter (identifier) (none)) (default_parameter (identifier) (true)) (default_parameter (identifier) (string)) (default_parameter (identifier) (false)) (default_parameter (identifier) (integer))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (keyword_argument (identifier) (identifier)) (keyword_argument (identifier) (identifier)) (keyword_argument (identifier) (identifier)) (keyword_argument (identifier) (identifier)) (keyword_argument (identifier) (identifier))))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (attribute (attribute (identifier) (identifier)) (identifier)) (keyword_argument (identifier) (float))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (comparison_operator (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list)) (integer))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (comparison_operator (call (attribute (identifier) (identifier)) (argument_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)))))) (integer))))) (if_statement (not_operator (boolean_operator (identifier) (not_operator (boolean_operator (identifier) (not_operator (identifier)))))) (block (raise_statement (expression_list (call (identifier) (argument_list (string))))))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (default_parameter (identifier) (attribute (identifier) (identifier))) (default_parameter (identifier) (string)) (default_parameter (identifier) (none)) (default_parameter (identifier) (none)) (default_parameter (identifier) (integer)) (default_parameter (identifier) (none)) (default_parameter (identifier) (false)) (default_parameter (identifier) (integer))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))) (return_statement (expression_list (call (identifier) (argument_list (identifier) (identifier) (keyword_argument (identifier) (identifier))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string (escape_sequence))) (default_parameter (identifier) (string)) (default_parameter (identifier) (string)) (default_parameter (identifier) (string))) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (attribute (identifier) (identifier)) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (return_statement (expression_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (identifier))))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier)))) (block (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer)) (identifier)))) (block (if_statement (boolean_operator (comparison_operator (identifier) (identifier)) (comparison_operator (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (parenthesized_expression (subscript (subscript (binary_operator (subscript (subscript (binary_operator (subscript (subscript (identifier) (identifier)) (identifier)) (identifier)) (identifier)) (identifier)) (identifier)) (identifier)) (identifier))) (integer))))) (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))))))))))) (return_statement (expression_list (identifier)))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list (attribute (identifier) (identifier)) (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (if_statement (comparison_operator (identifier) (integer)) (block (return_statement (expression_list (list (tuple (integer) (integer) (subscript (subscript (identifier) (integer)) (integer)))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (subscript (identifier) (slice (identifier)) (slice (identifier))) (binary_operator (identifier) (integer))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (expression_statement (assignment (expression_list (subscript (subscript (identifier) (binary_operator (identifier) (integer))) (identifier))) (expression_list (binary_operator (subscript (subscript (identifier) (binary_operator (identifier) (integer))) (identifier)) (identifier))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (binary_operator (identifier) (integer)))) (expression_list (subscript (subscript (identifier) (binary_operator (identifier) (integer))) (identifier))))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (binary_operator (identifier) (integer))))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (false)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (identifier) (binary_operator (identifier) (integer))))) (block (if_statement (comparison_operator (subscript (subscript (identifier) (identifier)) (identifier)) (subscript (subscript (binary_operator (subscript (subscript (identifier) (identifier)) (binary_operator (identifier) (integer))) (identifier)) (identifier)) (binary_operator (identifier) (integer)))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (true)))) (break_statement))))) (if_statement (identifier) (block (break_statement))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (identifier) (identifier)) (binary_operator (identifier) (integer)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (call (attribute (identifier) (identifier)) (argument_list)) (binary_operator (identifier) (integer))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (list_splat (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (integer) (call (identifier) (argument_list (identifier)))))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (tuple (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (call (identifier) (argument_list (identifier)))))))) (if_statement (comparison_operator (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (subscript (identifier) (integer)) (subscript (attribute (identifier) (identifier)) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (attribute (identifier) (identifier)) (identifier))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (attribute (identifier) (identifier)) (binary_operator (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (binary_operator (identifier) (integer)) (attribute (identifier) (identifier)) (identifier))))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))) (break_statement)) (elif_clause (comparison_operator (subscript (attribute (identifier) (identifier)) (identifier)) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (tuple (binary_operator (identifier) (integer)) (subscript (identifier) (integer)))))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (subscript (identifier) (integer)) (identifier))))) (break_statement))) (else_clause (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (identifier)))))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list))))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))) (block (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (call (identifier) (argument_list (list (identifier))))))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (subscript (identifier) (identifier))) (expression_list (integer)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))) (while_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))) (for_statement (variables (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))) (block (for_statement (variables (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (subscript (identifier) (subscript (identifier) (identifier))) (subscript (identifier) (identifier)))))) (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (tuple (identifier) (identifier))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (identifier)))))))))))) (expression_statement (assignment (expression_list (identifier) (identifier)) (expression_list (identifier)))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (subscript (identifier) (identifier)) (identifier)) (argument_list (subscript (identifier) (identifier))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (identifier) (argument_list (attribute (identifier) (identifier)) (tuple (subscript (identifier) (identifier)) (integer)) (tuple (subscript (identifier) (identifier)) (integer))))))) (delete_statement (expression_list (subscript (identifier) (identifier)))) (delete_statement (expression_list (subscript (identifier) (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (attribute (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (attribute (identifier) (identifier)))) (expression_list (binary_operator (identifier) (integer))))) (expression_statement (assignment (expression_list (subscript (identifier) (attribute (identifier) (identifier)))) (expression_list (subscript (identifier) (identifier))))) (delete_statement (expression_list (subscript (identifier) (identifier)))) (delete_statement (expression_list (subscript (identifier) (identifier)))) (delete_statement (expression_list (subscript (identifier) (identifier)))) (delete_statement (expression_list (subscript (identifier) (identifier)))) (expression_statement (assignment (expression_list (subscript (identifier) (attribute (identifier) (identifier)))) (expression_list (identifier)))) (for_statement (variables (identifier) (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list))) (block (if_statement (comparison_operator (identifier) (attribute (identifier) (identifier))) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (subscript (identifier) (attribute (identifier) (identifier)))) (subscript (identifier) (identifier)))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (subscript (identifier) (identifier))) (subscript (identifier) (attribute (identifier) (identifier))))) (expression_list (identifier)))))))) (expression_statement (augmented_assignment (expression_list (attribute (identifier) (identifier))) (expression_list (integer)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (subscript (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list)))) (integer))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))) (return_statement (expression_list (identifier))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier) (identifier)) (block (for_statement (variables (identifier)) (expression_list (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list))) (block (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (identifier))) (expression_list (subscript (binary_operator (subscript (identifier) (attribute (identifier) (identifier))) (identifier)) (attribute (identifier) (identifier)))))) (if_statement (attribute (identifier) (identifier)) (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (subscript (attribute (identifier) (identifier)) (identifier)) (identifier))))))))) (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (binary_operator (call (identifier) (argument_list (identifier))) (call (identifier) (argument_list (identifier))))))) (return_statement (expression_list (identifier))))) (function_definition (identifier) (parameters (identifier)) (block (return_statement (expression_list (binary_operator (binary_operator (string) (call (identifier) (argument_list (identifier)))) (string)))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (string)))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (string)))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (binary_operator (call (identifier) (argument_list (identifier))) (string))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (identifier) (slice (unary_operator (integer)))) (string))))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (subscript (identifier) (slice (unary_operator (integer)))) (string))))) (return_statement (expression_list (identifier))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list (identifier)))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (argument_list (parenthesized_expression (subscript (identifier) (integer)))))) (expression_statement (call (attribute (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer))) (identifier)) (argument_list (parenthesized_expression (subscript (identifier) (integer)))))) (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (tuple (subscript (identifier) (integer)) (subscript (identifier) (integer))))))))) (expression_list (subscript (identifier) (integer))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (tuple (subscript (identifier) (integer)) (subscript (identifier) (integer)) (call (identifier) (argument_list (subscript (identifier) (integer)))))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (subscript (identifier) (integer))))) (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (subscript (identifier) (integer))))))) (for_statement (variables (identifier) (identifier)) (expression_list (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list))) (block (if_statement (comparison_operator (call (identifier) (argument_list (identifier))) (integer)) (block (expression_statement (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list (identifier)))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (string)))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (binary_operator (call (identifier) (argument_list (identifier))) (string))))))) (return_statement (expression_list (binary_operator (subscript (identifier) (slice (unary_operator (integer)))) (string)))))) (decorated_definition (decorator (dotted_name (identifier))) (function_definition (identifier) (parameters (identifier)) (block (with_statement (with_item (call (identifier) (argument_list (identifier) (string))) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (list)))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (call (attribute (identifier) (identifier)) (argument_list)) (identifier)) (argument_list (string)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (subscript (identifier) (integer)) (identifier)) (argument_list (string)))))) (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (call (identifier) (argument_list (subscript (identifier) (integer)))) (call (identifier) (argument_list (subscript (identifier) (integer)))) (call (identifier) (argument_list (subscript (identifier) (integer)))))))))) (return_statement (expression_list (call (identifier) (argument_list (list_splat (identifier))))))))))) (function_definition (identifier) (parameters (identifier) (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (list (tuple (identifier) (list (identifier))))))) (while_statement (identifier) (block (expression_statement (assignment (expression_list (tuple (identifier) (identifier))) (expression_list (call (attribute (identifier) (identifier)) (argument_list))))) (for_statement (variables (identifier)) (expression_list (binary_operator (subscript (attribute (identifier) (identifier)) (identifier)) (call (identifier) (argument_list (identifier))))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (return_statement (expression_list (binary_operator (identifier) (list (identifier)))))) (else_clause (block (expression_statement (call (attribute (identifier) (identifier)) (argument_list (tuple (identifier) (binary_operator (identifier) (list (identifier)))))))))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (list_comprehension (list_comprehension (integer) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier)))))))) (for_in_clause (variables (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (attribute (identifier) (identifier))))))))))) (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (for_statement (variables (identifier)) (expression_list (attribute (identifier) (identifier))) (block (if_statement (comparison_operator (identifier) (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (identifier) (identifier)))))) (expression_statement (assignment (expression_list (identifier)) (expression_list (integer)))) (for_statement (variables (identifier)) (expression_list (call (identifier) (argument_list (integer) (call (identifier) (argument_list (identifier)))))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (subscript (attribute (identifier) (identifier)) (call (identifier) (argument_list (call (identifier) (argument_list (tuple (subscript (identifier) (binary_operator (identifier) (integer))) (subscript (identifier) (identifier))))))))))))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (subscript (subscript (identifier) (identifier)) (identifier))) (expression_list (identifier)))))))))) (return_statement (expression_list (call (identifier) (argument_list (identifier))))))))) (class_definition (identifier) (block (function_definition (identifier) (parameters (identifier) (identifier) (list_splat (identifier))) (block (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (identifier)))) (expression_statement (assignment (expression_list (attribute (identifier) (identifier))) (expression_list (call (identifier) (argument_list))))) (for_statement (variables (identifier)) (expression_list (identifier)) (block (expression_statement (assignment (expression_list (subscript (attribute (identifier) (identifier)) (subscript (identifier) (integer)))) (expression_list (subscript (identifier) (integer))))))))) (function_definition (identifier) (parameters (identifier)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (binary_operator (binary_operator (string) (call (identifier) (argument_list (attribute (identifier) (identifier))))) (string))))) (for_statement (variables (identifier) (identifier)) (expression_list (call (attribute (attribute (identifier) (identifier)) (identifier)) (argument_list))) (block (expression_statement (augmented_assignment (expression_list (identifier)) (expression_list (binary_operator (binary_operator (binary_operator (binary_operator (string) (call (attribute (identifier) (identifier)) (argument_list))) (string)) (call (identifier) (argument_list (identifier)))) (string))))))) (return_statement (expression_list (binary_operator (subscript (identifier) (slice (unary_operator (integer)))) (string)))))))) (if_statement (comparison_operator (identifier) (string)) (block (expression_statement (assignment (expression_list (identifier)) (expression_list (call (attribute (identifier) (identifier)) (argument_list (string)))))) (expression_statement (call (identifier) (argument_list (call (attribute (identifier) (identifier)) (argument_list))))))))
