id,path,content,ast,extra
566,/home/maxiem/Downloads/files/Peter Dawyndt/complementaire-reeksen.py,"def increasing(sequence):

    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    # check for each pair of successive numbers whether the first number is not
    # larger than the second number
    return all(sequence[i] <= sequence[i + 1] for i in range(len(sequence) - 1))

def frequency_sequence(sequence):

    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    # check if given sequence is increasing
    assert increasing(sequence), 'given sequence is not increasing'

    freq, value, count = [], 0, 0
    for number in sequence:

        # right now, count indicates how many numbers in the sequence are less
        # than the current number in the sequence
        while value < number:
            freq.append(count)
            value += 1

        count += 1

    # we still have to indicate how many numbers in the sequence are less then
    # or equal to the last number in the sequence (this is all numbers in the
    # sequence)
    freq.append(count)

    # return the frequency sequence
    return freq

def lift(sequence):

    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    # increase elements in sequence according to their position
    return [element + position + 1 for position, element in enumerate(sequence)]

def complementary_sequences(sequence):

    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    return lift(sequence), lift(frequency_sequence(sequence))

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( this ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( return_statement ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Peter Dawyndt/complementaire-reeksen.py"",""fullName"":""Peter Dawyndt"",""id"":""3"",""status"":""correct"",""submissionID"":""6340329"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:47:53.000Z"",""labels"":""admin""}"
567,/home/maxiem/Downloads/files/Annick Van Daele/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    i = 0
    while i < len(reeks)-1 and reeks[i]<= reeks[i+1]:
        i+=1
    return i >= len(reeks)-1

def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    nieuwereeks = []
    grootste = reeks[-1] + 1
    for j in range(grootste):
        grens = j+1
        #hoeveel getallen kleiner dan grens
        i , aantal = 0, 0
        while i < len(reeks) and reeks[i] < grens:
            aantal += 1
            i+=1
        nieuwereeks.append(aantal)
    return nieuwereeks

def verhogen(reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    nieuwelijst = []
    optellen = 1
    for el in reeks:
        nieuwelijst.append(el + optellen)
        optellen += 1
    return nieuwelijst

def complementaireReeksen(reeks):
    '''
    >>> complementaireReeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaireReeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaireReeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    deel1 = verhogen(reeks)
    deel2 = verhogen(frequentiereeks(reeks))
    return deel1,deel2
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Annick Van Daele/complementaire-reeksen.py"",""fullName"":""Annick Van Daele"",""id"":""17"",""status"":""correct"",""submissionID"":""6179841"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-29T17:36:07.000Z"",""labels"":""admin""}"
568,/home/maxiem/Downloads/files/Warre Dhondt/complementaire-reeksen.py,"def stijgend(p):
    return bool(list(p) == sorted(p))
    
def frequentiereeks(p):
    assert(stijgend(p) is True), ""gegeven reeks is niet stijgend""
    f = []
    for i in range(p[-1]+1):
        x = [j for j in p if i >= j]
        f.append(len(x))
    return f
    
def verhogen(p):
    y = [(value + index + 1) for index, value in enumerate(p)]
    return y
    
def complementaire_reeksen(p):
    assert(stijgend(p) is True), ""gegeven reeks is niet stijgend""
    return (verhogen(p), verhogen(frequentiereeks(p)))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( array ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( parenthesized_expression ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ) ) ( string ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Warre Dhondt/complementaire-reeksen.py"",""fullName"":""Warre Dhondt"",""id"":""11495"",""status"":""correct"",""submissionID"":""6338891"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T14:30:52.000Z"",""labels"":""bcbt""}"
569,/home/maxiem/Downloads/files/Urta Berani/complementaire-reeksen.py,"# eerste functie: stijgend
def stijgend(reeks_nat_get):

    # tellen hoeveel keer de voorwaarde zich voordoet
    count = 0
    for i in range(0, len(reeks_nat_get) - 1):
        if reeks_nat_get[i + 1] >= reeks_nat_get[i]:
            count += 1
        else:
            count += 0

    # bepalen of de reeks al dan niet stijgend is
    if count == len(reeks_nat_get) - 1:
        boolian = True
    else:
        boolian = False

    # uitkomst
    return boolian


# tweede functie: frequentiereeks
def frequentiereeks(reeks_nat_get):

    # in geval dat de reeks stijgend is
    reeks_nat_get = list(reeks_nat_get)
    frequentiereeks = []
    if stijgend(reeks_nat_get) == True:
        m = int(reeks_nat_get[-1]) + 1
        reeks = list(range(1, m + 1))
        for i in range(0, len(reeks)):
            count = sum(k < reeks[i] for k in reeks_nat_get)
            frequentiereeks.append(count)

    # in geval dat de reeks niet stijgend is
    assert stijgend(reeks_nat_get), ""gegeven reeks is niet stijgend""

    # uitkomst
    return frequentiereeks


# derde functie: verhogen
def verhogen(reeks_nat_get):

    reeks_nat_get = list(reeks_nat_get)
    reeks = []
    for i in range(0, len(reeks_nat_get)):
        positie = i + 1
        getal = int(reeks_nat_get[i]) + positie
        reeks.append(getal)

    # uitkomst
    return reeks


# vierde functie: complementaire_reeksen
def complementaire_reeksen(reeks_nat_get):

    reeks1 = verhogen(reeks_nat_get)
    reeks2 = frequentiereeks(reeks_nat_get)
    reeks2 = verhogen(reeks2)

    # uitkomst
    return (reeks1, reeks2)





",( program ( ERROR ( ERROR ) ( identifier ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( ERROR ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( identifier ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Urta Berani/complementaire-reeksen.py"",""fullName"":""Urta Berani"",""id"":""11496"",""status"":""correct"",""submissionID"":""6367977"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T18:35:38.000Z"",""labels"":""bcbt""}"
570,/home/maxiem/Downloads/files/Annabelle Mussly/complementaire-reeksen.py,"def stijgend(lijst):
    vorig = lijst[0]
    for element in lijst:
        if element < vorig:
            return False
        vorig = element
    return True

def frequentiereeks(lijst):
    assert (stijgend(lijst) is True), ""gegeven reeks is niet stijgend""
    teller = 1
    opteller = 0
    nieuwe_lijst = []
    for element in range(max(lijst) + 1):
        aantal = lijst.count(element)
        if element in lijst:
            if element < teller:
                opteller += 1
            if aantal > 1:
                opteller += aantal - 1
        nieuwe_lijst.append(opteller)
        teller += 1
    return nieuwe_lijst

def verhogen(lijst):
    nieuwe_lijst = []
    for index, element in enumerate(lijst):
        if index == index:
            element += index + 1
        nieuwe_lijst.append(element)
    return nieuwe_lijst

def complementaire_reeksen(lijst):
    verhoogd = verhogen(lijst)
    frequentie = frequentiereeks(lijst)
    nieuwe_lijst = []
    for index, element in enumerate(frequentie):
        if index == index:
            element += index + 1
        nieuwe_lijst.append(element)
    return verhoogd, nieuwe_lijst
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Annabelle Mussly/complementaire-reeksen.py"",""fullName"":""Annabelle Mussly"",""id"":""8158"",""status"":""correct"",""submissionID"":""6332131"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T10:44:40.000Z"",""labels"":""chem""}"
571,/home/maxiem/Downloads/files/Stan Willemyns/complementaire-reeksen.py,"def stijgend(reeks):

    """"""
    functie stijgend die een Booleaanse waarde (bool) teruggeeft die aangeeft of de getallen in de gegeven reeks al dan
    niet stijgend zijn. Daarbij is het dus wel toegelaten dat er dubbels voorkomen.

    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    reeks_tuple = tuple(reeks)
    i = 1
    stijgend_controle = True
    while i < len(reeks):
        if reeks[i-1] > reeks[i]:
            stijgend_controle = False
        i += 1
    return stijgend_controle


def frequentiereeks(reeks):

    """"""
    frequentiereeks die een nieuwe lijst (list)  teruggeeft met de getallen (int) van de frequentiereeks van de gegeven
    reeks. Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen met de boodschap
    gegeven reeks is niet stijgend.

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    reeks_list = list(reeks)
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    freqreeks_list = []
    m = max(reeks)
    for i in range(1, m+2):
        freqreeks_list.append(len([k for k in reeks_list if k < i]))
    return freqreeks_list


def verhogen(reeks):

    """"""
    functie verhogen die een nieuwe lijst (list) teruggeeft die de getallen (int) van de gegeven reeks bevat,
    maar telkens verhoogd overeenkomstig hun positie in de gegeven reeks — dat is 1 opgeteld bij het eerste getal
    van de gegeven reeks, 2 bij het tweede getal, enzoverder.

    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    reeks_list = list(reeks)
    for i in range(len(reeks_list)):
        reeks_list[i] += i+1
    return reeks_list


def complementaire_reeksen(reeks):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    output_tuple = (verhogen(reeks), verhogen(frequentiereeks(reeks)))
    return output_tuple


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( array ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Stan Willemyns/complementaire-reeksen.py"",""fullName"":""Stan Willemyns"",""id"":""11499"",""status"":""correct"",""submissionID"":""6385756"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T15:56:58.000Z"",""labels"":""keuz""}"
572,/home/maxiem/Downloads/files/Joram Elias/complementaire-reeksen.py,"def stijgend(lijste):
    lijst = list(lijste)
    sorteer = sorted(lijst)
    return True if sorteer == lijst else False


def frequentiereeks(lijste):
    lijst = list(lijste)
    if stijgend(lijst) is True:
        wordfreq = []
        getal = 0
        for ref in range(max(lijst) + 1):
            getal += lijst.count(ref)
            wordfreq.append(getal)
        return wordfreq
    else:
        raise AssertionError('gegeven reeks is niet stijgend')


def verhogen(lijste):
    lijst = list(lijste)
    for index, e in enumerate(lijst):
        lijst[index] += index + 1
    return lijst


def complementaire_reeksen(lijste):
    lijst = list(lijste)
    return verhogen(lijst), verhogen(frequentiereeks(lijst))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Joram Elias/complementaire-reeksen.py"",""fullName"":""Joram Elias"",""id"":""11505"",""status"":""correct"",""submissionID"":""6327760"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-07T16:22:03.000Z"",""labels"":""keuz""}"
573,/home/maxiem/Downloads/files/Femke Vandewalle/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    aantal = 0
    for i in range(1,len(lijst)):
        if lijst[i] >= lijst[i - 1]:
            aantal += 1
    if aantal == len(lijst) - 1:
        return True
    else:
        return False

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend' #hoe doe je da????

    reeks = []
    kleiner_dan = 0
    getal = 1
    while getal <= (int(lijst[-1]) + 1):
        for i in range(0,len(lijst)):
            if lijst[i] < getal:
                kleiner_dan += 1
        reeks += [kleiner_dan]
        getal += 1
        kleiner_dan = 0
    return reeks

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    getal = 1
    nieuwe_lijst = []
    for i in range(0,len(lijst)):
        cijfer = int(lijst[i]) + getal
        nieuwe_lijst += [cijfer]
        getal += 1
    return nieuwe_lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    #assert ertussen!
    eerste_element = verhogen(lijst)
    tweede_element = frequentiereeks(lijst)
    tweede_element = verhogen(tweede_element)
    return (eerste_element, tweede_element)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Femke Vandewalle/complementaire-reeksen.py"",""fullName"":""Femke Vandewalle"",""id"":""11507"",""status"":""correct"",""submissionID"":""6344863"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T13:15:01.000Z"",""labels"":""bcbt""}"
574,/home/maxiem/Downloads/files/Maud Boghaert/complementaire-reeksen.py,"def stijgend(lijstje):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    i=0
    groter=0
    for i in range (len(lijstje)-1):
        if lijstje[i]>lijstje[i+1] :
            groter+=1
        i+=1
    if groter != 0:
        return False
    else:
        return True


def frequentiereeks(lijstt):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    """"""
    
def frequentiereeks(lijstt):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    """"""
    waarde = stijgend(lijstt)
    nieuw=[]
    aantal=0
    if waarde==False:
        raise AssertionError(""gegeven reeks is niet stijgend"")
    else:
       for i in range((lijstt[-1])+1):
          for element in lijstt:
              if element<=i:
                  aantal+=1
          nieuw.append(aantal)
          aantal=0

    return nieuw
    

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
[3, 5, 8, 11, 16, 19]
>>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
>>> verhogen([5, 3, 2, 7, 8, 1, 9])
[6, 5, 5, 11, 13, 7, 16]
    """"""
    nieuw=[]
   
    for i in range(len(reeks)):
        getal= reeks[i]+(i+1)
        nieuw.append(getal)
            
            
    return nieuw

    
def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    waarde = stijgend(reeks)
    if waarde==False:
        raise AssertionError(""gegeven reeks is niet stijgend"")
    nieuw=[]
    nieuw.append(verhogen(reeks))
    freq = frequentiereeks(reeks)
    verhoogdefreq= verhogen(freq)
    nieuw.append(verhoogdefreq)
    return tuple(nieuw)

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Maud Boghaert/complementaire-reeksen.py"",""fullName"":""Maud Boghaert"",""id"":""11508"",""status"":""correct"",""submissionID"":""6296244"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-05T19:06:53.000Z"",""labels"":""geog""}"
575,/home/maxiem/Downloads/files/Femke Van der Stiggel/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    if type(reeks) is tuple:
        reeks = list(reeks)
    reeks_sorted = reeks.copy()
    reeks_sorted.sort()
    return(bool( reeks_sorted == reeks))

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    new_reeks = []
    for i in range(reeks[-1]+1):
        teller = 0
        for getal in reeks:
            if getal < i+1:
                teller += 1
        new_reeks.append(teller)
    return new_reeks

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    verhoogde_reeks = []
    for i in range(len(reeks)):
        verhoogde_reeks.append(reeks[i]+i+1)
    return verhoogde_reeks

def complementaire_reeksen(reeks):
    """"""
   >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    
    return(verhogen(reeks),verhogen(frequentiereeks(reeks)))
if __name__ == '__main__':
 import doctest
 doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( return_statement ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Femke Van der Stiggel/complementaire-reeksen.py"",""fullName"":""Femke Van der Stiggel"",""id"":""11509"",""status"":""correct"",""submissionID"":""6349146"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T19:25:31.000Z"",""labels"":""chem""}"
576,/home/maxiem/Downloads/files/Ceren Ezgi Dokuz/complementaire-reeksen.py,"def increasing(seq):
    
    i = 1
    boolen = True
    while i < len(seq):
        
        if seq[i - 1] <= seq[i]:
            i += 1
        else:
            boolen = False
            return boolen
                 
    return boolen
    
def frequency_sequence(seq):
    
    if not increasing(seq):
        raise AssertionError(""given sequence is not increasing"")
        
    seq = list(seq)
    freq = []
    for i in range(1, max(seq) + 2):
        
        rec = 0
        for element in seq:
            if element < i:
                rec += 1
                
        freq.append(rec)
        
    return freq
    
def lift(seq):
    
    out = []
    for i in range(1, len(seq)+1):
        out.append(seq[i-1] + i)
    
    return out
    
def complementary_sequences(seq):
      
    freq = frequency_sequence(seq)
    lifted = lift(seq)
    liftfreq = lift(freq)
    
    return lifted, liftfreq",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Ceren Ezgi Dokuz/complementaire-reeksen.py"",""fullName"":""Ceren Ezgi Dokuz"",""id"":""8852"",""status"":""correct"",""submissionID"":""6380985"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T21:49:39.000Z"",""labels"":""stat""}"
577,/home/maxiem/Downloads/files/Brent Van Damme/complementaire-reeksen.py,"def stijgend(sequentiereeks):
    n = 0
    lengte = len(sequentiereeks)

    while n <= (lengte - 2):
        cijfer1 = sequentiereeks[n]
        cijfer2 = sequentiereeks[n + 1]
        if cijfer1 <= cijfer2:
            n += 1
            statement = True
        else:
            n += 1
            statement = False
            break

    return statement


def frequentiereeks(sequentiereeks):
    if stijgend(sequentiereeks) is not True:
        assert False, 'gegeven reeks is niet stijgend'
    frequentiereeks = []
    n = 0
    aantal = 0

    for i in sequentiereeks:
        while n < i:
            frequentiereeks.append(aantal)
            
            n += 1
        aantal += 1
    frequentiereeks.append(aantal)
    return frequentiereeks


def verhogen(sequentiereeks):
    frequentiereeks = []  
    for index, element in enumerate(
            sequentiereeks):  
        nieuw_getal = element + index + 1  
        frequentiereeks.append(nieuw_getal)  
        index += 1  

    return frequentiereeks


def complementaire_reeksen(sequentiereeks):
    if stijgend(sequentiereeks) is not True:
        assert False, 'gegeven reeks is niet stijgend'

    verhoogd = verhogen(sequentiereeks) #we verhogen de sequentiereeks

    frequentielijst = verhogen(frequentiereeks(sequentiereeks))
    return verhoogd, frequentielijst",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( break_statement ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Brent Van Damme/complementaire-reeksen.py"",""fullName"":""Brent Van Damme"",""id"":""11501"",""status"":""correct"",""submissionID"":""6370511"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T08:24:44.000Z"",""labels"":""bcbt""}"
578,/home/maxiem/Downloads/files/Jakob Smet/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks_getallen):
    """"""""
    Controleer of de getallen in de reeks opeenvolgend stijgen in waarde.
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for index, getal in enumerate(reeks_getallen[1:], 1):
        if getal < reeks_getallen[index - 1]:
            return False
    return True

def frequentiereeks(reeks_getallen):
    """"""
    Geeft de frequentiereeks van reeks_getallen terug.
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    # Definiëren van de frequentielijst en zijn supremum
    reeks_freq_getallen = list()
    m = reeks_getallen[-1] + 1
    count = 0

    # Controleren of reeks_getallen stijgend is
    assert stijgend(reeks_getallen) == True, 'gegeven reeks is niet stijgend'

    # Frequentiereeks opbouwen
    for _ in range(1, m + 1):
        for getal in reeks_getallen: # operatie doen voor elk nat. getal <= m
            if getal < _:
                count += 1
        reeks_freq_getallen.append(count)
        count = 0
    return  reeks_freq_getallen

def verhogen(reeks_getallen):
    '''
    Geeft een kopie van de reeks terug met elk getal verhoogd met zijn index.
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    reeks_verhoogd_getallen = list()

    # Verhogen met de index
    for index, getal in enumerate(reeks_getallen, 1):
        reeks_verhoogd_getallen.append(index + getal)
    return reeks_verhoogd_getallen

def complementaire_reeksen(reeks_getallen):
    '''
    Deze functie geeft de verhoogde vorm van een reeks en zijn frequentiereeks terug.
    Het wordt teruggegeven in een tuple bestaande uit de twee lijsten.
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    # Is de reeks wel stijgend?
    assert stijgend(reeks_getallen) == True, 'gegeven reeks is niet stijgend'

    # De reeks verhogen
    reeks_verhogen_getallen = verhogen(reeks_getallen)

    # De verhoogde frequentiereeks
    reeks_freq_verhogen_getallen = verhogen(frequentiereeks(reeks_getallen))

    return reeks_verhogen_getallen, reeks_freq_verhogen_getallen
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jakob Smet/complementaire-reeksen.py"",""fullName"":""Jakob Smet"",""id"":""11510"",""status"":""correct"",""submissionID"":""6400125"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T11:23:36.000Z"",""labels"":""fyss""}"
579,/home/maxiem/Downloads/files/Manon Blanckaert/complementaire-reeksen.py,"def stijgend(lijst):
    lengte = len(lijst)
    for i in range(0, lengte - 1):
        if lijst[i] > lijst[i+1]:
            return False
    return True

def frequentiereeks(lijst):
    if stijgend(lijst) != True:
        assert False, 'gegeven reeks is niet stijgend'
    frequentie = []
    waarde = 0
    aantal = 0
    for element in lijst:
        while waarde < element:
            frequentie.append(aantal)
            waarde += 1
        aantal += 1
    frequentie.append(aantal)
    return frequentie

def verhogen(lijst):
    verhoogde_lijst = []
    for positie, element in enumerate(lijst):
        nieuw_getal = element + positie + 1
        verhoogde_lijst.append(nieuw_getal)
        positie += 1
    return verhoogde_lijst

def complementaire_reeksen(lijst):
    if stijgend(lijst) != True:
        assert False, 'gegeven reeks is niet stijgend'
    verhoogde_lijst = verhogen(lijst)
    verhoogde_frequentielijst = verhogen(frequentiereeks(lijst))
    return verhoogde_lijst, verhoogde_frequentielijst",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Manon Blanckaert/complementaire-reeksen.py"",""fullName"":""Manon Blanckaert"",""id"":""11511"",""status"":""correct"",""submissionID"":""6348200"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T16:54:12.000Z"",""labels"":""bcbt""}"
580,/home/maxiem/Downloads/files/Riet De Weyer/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    vorige = 0
    a = 0
    for waarde in range(len(lijst)):
        waarde = lijst[0 + a]
        if not waarde >= vorige:
            return False
        a += 1
        vorige = waarde
    return True

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(lijst):
        assert False, ""gegeven reeks is niet stijgend""
    lengte = max(lijst) + 1
    a = 0
    reeks = []
    vorige = 0
    for totaal in range(lengte):
        aantal = lijst.count(a)
        totaal = aantal + vorige
        vorige += aantal
        reeks += [totaal]
        a += 1
    return reeks

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    a = 0
    b = 1
    nieuwe_lijst = []
    for getal in range(len(lijst)):
        getal = lijst[a] + b
        nieuwe_lijst += [getal]
        a += 1
        b += 1
    return nieuwe_lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(lijst):
        assert False, ""gegeven reeks is niet stijgend""
    lijst1 = verhogen(lijst)
    lijst2 = frequentiereeks(lijst)
    lijst3 = verhogen(lijst2)
    return lijst1, lijst3",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( number ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Riet De Weyer/complementaire-reeksen.py"",""fullName"":""Riet De Weyer"",""id"":""11512"",""status"":""correct"",""submissionID"":""6354546"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T15:36:36.000Z"",""labels"":""bcbt""}"
581,/home/maxiem/Downloads/files/Bryan Larez Larez/complementaire-reeksen.py,"# Code by Bryan Larez Larez
'''
>>> increasing([2, 3, 5, 7, 11, 13])
True
>>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
True
>>> increasing([5, 3, 2, 7, 8, 1, 9])
False

>>> frequency_sequence([2, 3, 5, 7, 11, 13])
[0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
>>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[2, 3, 5, 7, 11, 13, 14]
>>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: given sequence is not increasing

>>> lift([2, 3, 5, 7, 11, 13])
[3, 5, 8, 11, 16, 19]
>>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
>>> lift([5, 3, 2, 7, 8, 1, 9])
[6, 5, 5, 11, 13, 7, 16]

>>> complementary_sequences([2, 3, 5, 7, 11, 13])
([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
>>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
>>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: given sequence is not increasing

'''


def increasing(sequence):
    true_lijst = []
    lengte = len(sequence) - 1
    for i in range(lengte):
        if sequence[i] <= sequence[i + 1]:
            true_lijst.append(True)
        else:
            true_lijst.append(False)

    return all(true_lijst)

def frequency_sequence(P_n):
    assert increasing(P_n), 'given sequence is not increasing'
    m = max(P_n)
    new_list = []
    n_numbers = 1
    while len(new_list) < (m + 1):
        som = 0
        for i in P_n:
            if i < n_numbers:
                som += 1
        n_numbers += 1
        new_list.append(som)
    return new_list


def lift(list):
    new_list_2 = []
    for i, v in enumerate(list):
        element = v + (i + 1)
        new_list_2.append(element)
    return new_list_2

def complementary_sequences(tuple):
    assert increasing(tuple), 'given sequence is not increasing'
    a = lift(tuple)
    b = lift(frequency_sequence(tuple))
    return (a, b)

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Bryan Larez Larez/complementaire-reeksen.py"",""fullName"":""Bryan Larez Larez"",""id"":""11513"",""status"":""correct"",""submissionID"":""6379465"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T17:20:06.000Z"",""labels"":""fyss""}"
582,/home/maxiem/Downloads/files/Jarne Voorspools/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(0, len(reeks)-1):
        if reeks[i+1] < reeks[i]:
            return False
    return True
def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    frequentie = []
    aantal = 0
    reeks = list(reeks)
    reeks.append(reeks[-1] + 1)
    for i in range(1, reeks[-1]+1):
        for j in reeks:
            if j < i:
                aantal += 1
        frequentie.append(aantal)
        aantal = 0
    return frequentie
def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = []
    reeks = list(reeks)
    for i in range(0, len(reeks)):
        lijst.append(reeks[i] + (i + 1))
    return lijst
def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jarne Voorspools/complementaire-reeksen.py"",""fullName"":""Jarne Voorspools"",""id"":""11514"",""status"":""correct"",""submissionID"":""6392047"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T13:42:33.000Z"",""labels"":""fyss""}"
583,/home/maxiem/Downloads/files/Maud Vervaet/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for index in range(len(reeks) - 1):
        antwoord = bool(reeks[index + 1] >= reeks[index])
        if not antwoord:
            return antwoord
    return antwoord


def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    m = int(lijst[-1]) + 1
    counter = 0
    antwoord = []

    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    for index in range(m):
        if index:
            while lijst[counter] < index:
                counter += 1
            antwoord.append(counter)

    antwoord.append(counter + lijst.count(lijst[-1]))
    return antwoord


def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = list(lijst)
    nieuwe_lijst = []
    for index, _ in enumerate(lijst):
        m = lijst[index]
        n = m + index + 1
        nieuwe_lijst.append(n)
    return nieuwe_lijst


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    eerste_lijst = verhogen(reeks)
    tweede_lijst = frequentiereeks(reeks)
    derde_lijst = verhogen(tweede_lijst)

    return eerste_lijst, derde_lijst


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Maud Vervaet/complementaire-reeksen.py"",""fullName"":""Maud Vervaet"",""id"":""11515"",""status"":""correct"",""submissionID"":""6340581"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T17:19:45.000Z"",""labels"":""geog""}"
584,/home/maxiem/Downloads/files/Tanisha Moons/complementaire-reeksen.py,"def stijgend(numbers):
    l = []
    for pos in range(len(numbers) - 1):
        next = numbers[pos + 1]
        if numbers[pos] <= next:
            l.append(True)
        else:
            l.append(False)
    if False in l:
        return False
    else:
        return True

def frequentiereeks(numbers):
    result = stijgend(numbers)
    assert result == True, 'gegeven reeks is niet stijgend'

    tp = []
    for pos in range(len(numbers) - 1):
        if pos == 0:
            for j in range(numbers[pos]):
                tp.append(0)
            verschil = numbers[pos + 1] - numbers[pos]
            for i in range(verschil):
                tp.append(pos + 1)
        else:
            verschil = numbers[pos + 1] - numbers[pos]
            for l in range(verschil):
                tp.append(pos + 1)
    tp.append(len(numbers))

    return tp

def verhogen(numbers):
    k =[]
    for pos, i in enumerate(numbers):
        num = i + pos + 1
        k.append(num)
    return k

def complementaire_reeksen(numbers):
    factor1 = verhogen(numbers)
    factor5 = frequentiereeks(numbers)
    factor2 = verhogen(factor5)
    return (factor1, factor2)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Tanisha Moons/complementaire-reeksen.py"",""fullName"":""Tanisha Moons"",""id"":""7959"",""status"":""correct"",""submissionID"":""6347689"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T15:56:38.000Z"",""labels"":""biol""}"
585,/home/maxiem/Downloads/files/Yahya Ghalayini/complementaire-reeksen.py,"def increasing(sequence):
    reference = sequence[0]
    for number in sequence:
        if number < reference:
            return False
        reference = number
    return True


def frequency_sequence(sequence):
    assert increasing(sequence), 'given sequence is not increasing'
    check = 1
    add = 0
    result = []
    while check != max(sequence) + 1:
        for number in sequence:
            if number < check:
                add += 1
        result.append(add)
        add = 0
        check += 1
    result.append(len(sequence))
    return result


def lift(sequence):
    result = []
    for x in range(len(sequence)):
        result.append(sequence[x] + x + 1)
    return result


def complementary_sequences(sequence):
    return lift(sequence), lift(frequency_sequence(sequence))


",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Yahya Ghalayini/complementaire-reeksen.py"",""fullName"":""Yahya Ghalayini"",""id"":""7559"",""status"":""correct"",""submissionID"":""6328536"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-07T17:55:25.000Z"",""labels"":""biol""}"
586,/home/maxiem/Downloads/files/Mel Van Rompay/complementaire-reeksen.py,"def stijgend(reeks):
    returnValue = True
    for x in range(1,len(reeks)):
        if int(reeks[x-1]) > int(reeks[x]):
            returnValue = False
    return returnValue

def frequentiereeks(reeks):
    if stijgend(reeks) == False:
        raise AssertionError ('gegeven reeks is niet stijgend')
    frequentiereeks = []
    for m in range(1, int(reeks[-1])+2):
        frequentie = 0
        for x in reeks:
            if x < m:
                frequentie += 1
        frequentiereeks.append(frequentie)
    return frequentiereeks

def verhogen(reeks):
    verhoogdeReeks = []
    for x in range(len(reeks)):
        verhoogdeReeks.append(int(reeks[x]) + x+1)
    return verhoogdeReeks

def complementaire_reeksen(reeks):
    if stijgend(reeks) == False:
        raise AssertionError ('gegeven reeks is niet stijgend')
    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))
    ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Mel Van Rompay/complementaire-reeksen.py"",""fullName"":""Mel Van Rompay"",""id"":""11517"",""status"":""correct"",""submissionID"":""6412512"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T10:30:36.000Z"",""labels"":""fyss""}"
587,/home/maxiem/Downloads/files/Babette De Ceuster/complementaire-reeksen.py,"# Stap 1
def stijgend(reeks):

    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    return all(reeks[element] <= reeks[element + 1] for element in range(len(reeks) - 1))

    '''
    The all() method returns True when all elements in the given iterable are true. If not, it returns False.
    
    Als range gebruiken we len(reeks) - 1, en niet len(reeks), omdat anders reeks[element + 1] out of range is!
    Voorbeeld:  reeks = [0, 1, 2, 3, 4, 5]
                len(reeks) = 6
                range(len(reeks) - 1) = 0, 1, 2, 3, 4
    
    '''


# Stap 2
def frequentiereeks(reeks):

    '''
    Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen
    met de boodschap 'gegeven reeks is niet stijgend'.

    Indien de gegeven reeks wel stijgend is, dan moet de functie een nieuwe lijst teruggeven
    met de getallen (int) van de frequentiereeks van de gegeven reeks.

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    frequentie_lijst = []
    frequentie_waarde = 0
    frequentie_aantal = 0

    for getal in reeks:
        while frequentie_waarde < getal:
            frequentie_lijst.append(frequentie_aantal)
            frequentie_waarde += 1
        frequentie_aantal += 1

    # De lijst frequentie_lijst moet m + 1 getallen bevatten, waarbij m het grootste natuurlijke getal
    # van de gegeven reeks is. Het laatste getal in frequentie_lijst geeft dus aan hoeveel getallen in
    # de gegeven reeks kleiner of gelijk zijn aan het laatste getal in de gegeven reeks.
    frequentie_lijst.append(frequentie_aantal)

    return frequentie_lijst


# Stap 3
def verhogen(reeks):

    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    verhogen_lijst = []
    for index, getal in enumerate(reeks):
        verhogen_lijst.append(getal + index + 1)

    return verhogen_lijst

    # Kan dit nog meer pythonic geschreven worden?


# Stap 4
def complementaire_reeksen(reeks):

    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    '''
    verhogen_lijst = verhogen(reeks)
    verhogen_frequentie_lijst = verhogen(frequentiereeks(reeks))

    return (verhogen_lijst, verhogen_frequentie_lijst)
    
    Dit kan korter geschreven worden, namelijk:
    '''

    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))


# Stap 5
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ( identifier ) ( expression_statement ( number ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( member_expression ( identifier ) ( property_identifier ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( member_expression ( member_expression ( identifier ) ( property_identifier ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( string ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Babette De Ceuster/complementaire-reeksen.py"",""fullName"":""Babette De Ceuster"",""id"":""11518"",""status"":""correct"",""submissionID"":""6351959"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T10:53:21.000Z"",""labels"":""biol""}"
588,/home/maxiem/Downloads/files/Luna Lacoere/complementaire-reeksen.py,"def stijgend(lijstje):
    test = True
    for i in range(len(lijstje) - 1):
        if lijstje[i] > lijstje[i + 1]:
            test = False
    return test

def frequentiereeks(lijstje):
    list = []
    a = 0
    b = 0
    if stijgend(lijstje) == True:
        while b <= (len(lijstje) - 1):
            for j in range(lijstje[b] - a):
                list.append(b)
            a = lijstje[b]
            b += 1
        list.append(b)
        return list
    else:
        raise AssertionError('gegeven reeks is niet stijgend')
def verhogen(lijstje):
    a = 1
    list = []
    for i in range(len(lijstje)):
        b = lijstje[i] + a
        list.append(b)
        a += 1
    return list
def complementaire_reeksen(lijstje):
    if stijgend(lijstje) == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    lijst1 = verhogen(lijstje)
    lijst2 = verhogen(frequentiereeks(lijstje))
    list = (lijst1, lijst2)
    return tuple(list)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Luna Lacoere/complementaire-reeksen.py"",""fullName"":""Luna Lacoere"",""id"":""11519"",""status"":""correct"",""submissionID"":""6400434"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T12:03:37.000Z"",""labels"":""chem""}"
589,/home/maxiem/Downloads/files/Ruben Tack/complementaire-reeksen.py,"def stijgend(getallen):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    
    for index, getal in enumerate(getallen):
        if index + 1 < len(getallen) and not getal <= getallen[index + 1]:
            return False

    return True


def frequentiereeks(permutatiereeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(permutatiereeks), 'gegeven reeks is niet stijgend'
    frequentie_reeks = []

    aantal = 0
    index = 0
    for i in range(1, max(permutatiereeks) + 2):

        while index < len(permutatiereeks) and i > permutatiereeks[index]:
            aantal += 1
            if index + 1 <= len(permutatiereeks):
                index += 1
        frequentie_reeks.append(aantal)
    
    return frequentie_reeks


def verhogen(permutatiereeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogde_lijst = []
    getal_erbij = 1
    for getal in permutatiereeks:
        verhoogde_lijst.append(getal + getal_erbij)
        getal_erbij += 1

    return verhoogde_lijst


def complementaire_reeksen(permutatiereeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert verhogen(permutatiereeks), 'gegeven reeks is niet stijgend'
    frequentie_reeks = frequentiereeks(permutatiereeks)

    return verhogen(permutatiereeks), verhogen(frequentie_reeks)

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Ruben Tack/complementaire-reeksen.py"",""fullName"":""Ruben Tack"",""id"":""11031"",""status"":""correct"",""submissionID"":""6342089"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T22:51:21.000Z"",""labels"":""keuz""}"
590,/home/maxiem/Downloads/files/Febe Engelbeen/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    reeks = list(reeks)
    gesorteerd = sorted(reeks)
    if reeks == gesorteerd:
        return True
    return False

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    freqreeks = []
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')

    for index in range(1, int(reeks[-1]) + 2):
        frequentie = 0
        for getal in reeks:
            if int(getal) < index:
                frequentie += 1
        freqreeks.append(frequentie)
    return freqreeks


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    verhoogd = []
    for index, getal in enumerate(reeks):
        hoger = getal + (index + 1)
        verhoogd.append(hoger)
    return verhoogd


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    samen = []
    rest = []
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    verhoogd = verhogen(reeks)
    for i in range(1, verhoogd[-1] + 2):
        if i not in verhoogd:
            rest.append(i)
    samen.append(verhoogd)
    samen.append(rest)

    return tuple(samen)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Febe Engelbeen/complementaire-reeksen.py"",""fullName"":""Febe Engelbeen"",""id"":""7998"",""status"":""correct"",""submissionID"":""6370862"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T09:07:06.000Z"",""labels"":""bcbt""}"
591,/home/maxiem/Downloads/files/Margot Natus/complementaire-reeksen.py,"def increasing(line):
    sum = 1
    for i in range(0, len(line) - 1):
        if line[i] <= line[i + 1]:
            sum += 1
    
    if sum == len(line):
        return True
    else:
        return False
        
#einde functie 1

def frequency_sequence(line):
    lengte = max(line) + 1
    newlist = []
    a = increasing(line)
    assert a != False, ""given sequence is not increasing""
    
    for i in range(0, lengte):
        sum = 0
        for a in line:
            if a <= i:
                sum += 1
        newlist.append(sum)

    
    return newlist

#einde tweede functie

def lift(line):
    new = []
    for index, a in enumerate(line):
        b = line[index] + index + 1
        new.append(b)
    
    return new

def complementary_sequences(line):
    a = increasing(line)
    assert a != False, ""given sequence is not increasing""
    b = lift(line)
    c = lift(frequency_sequence(line))
    
    return b, c
        
       ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( new_expression ( ERROR ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( new_expression ( ERROR ) ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( ERROR ( new_expression ( ERROR ( identifier ) ) ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Margot Natus/complementaire-reeksen.py"",""fullName"":""Margot Natus"",""id"":""11520"",""status"":""correct"",""submissionID"":""6230787"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-02T12:58:23.000Z"",""labels"":""keuz""}"
592,/home/maxiem/Downloads/files/Lowie Stanssens/complementaire-reeksen.py,"list = str(input)
def stijgend(list):
    index = 0
    lengte = len(list)
    for _ in range(lengte - 1):
        cijfer1 = int(list[index])
        cijfer2 = int(list[index + 1])
        if cijfer1 <= cijfer2:
            if index == lengte - 2:
                return True
            else:
                index += 1
        else:
            return False

def frequentiereeks(list):
    assert stijgend(list) == True, ""gegeven reeks is niet stijgend""
    i = 1
    resultaat = []
    lengte_reeks = list[len(list) - 1]
    
    while i <= lengte_reeks + 1:
        aantal = 0
        for index in range(len(list)):
            if int(list[index]) < i:
                aantal += 1
        i += 1
        resultaat.append(aantal)

    return resultaat
    
def verhogen(list):
    index = 0
    lengte = len(list)
    resultaat = []
    for _ in range(lengte):
        cijfer = list[index] + 1 + index
        resultaat.append(cijfer)
        index += 1
    return resultaat
    
def complementaire_reeksen(list):
    verhogingsreeks = verhogen(list)
    comp_reeks = frequentiereeks(list)
    tweede_reeks = verhogen(comp_reeks)
    resultaat = []
    resultaat.append(verhogingsreeks)
    resultaat.append(tweede_reeks)
    resultaat = tuple(resultaat)
    return resultaat",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Lowie Stanssens/complementaire-reeksen.py"",""fullName"":""Lowie Stanssens"",""id"":""11521"",""status"":""correct"",""submissionID"":""6387628"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T19:28:04.000Z"",""labels"":""bcbt""}"
593,/home/maxiem/Downloads/files/Anna Hautekeete/complementaire-reeksen.py,"def stijgend(reeks):

    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    reeks = list(reeks)
    bool = True
    i = 1
    while i < len(reeks):
        if reeks[i - 1] <= reeks[i]:
            i += 1
        else:
            bool = False
            i += 1

    return bool

def frequentiereeks(reeks):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks) == True, ""gegeven reeks is niet stijgend""

    reeks = list(reeks)
    lengte = reeks[len(reeks) - 1]
    nieuwe_reeks = []
    i = 1
    #Hulp bij opstellen van for-lus in mijn while-lus
    while i <= lengte + 1:
        aantal = 0
        for index in range(len(reeks)):
            if int(reeks[index]) < i:
                aantal += 1
        i += 1
        nieuwe_reeks.append(aantal)

    return nieuwe_reeks

def verhogen(reeks):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    reeks = list(reeks)
    for i in range(len(reeks)):
        reeks[i] = int(reeks[i]) + (i + 1)

    return reeks

def complementaire_reeksen(reeks):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks) == True, ""gegeven reeks is niet stijgend""
    
    reeks = list(reeks)
    verhoogde_reeks = verhogen(reeks)
    nieuwe_frequentiereeks = frequentiereeks(reeks)
    verhoogde_frequentiereeks = verhogen(nieuwe_frequentiereeks)
    
    nieuwe_reeks = []
    nieuwe_reeks.append(verhoogde_reeks)
    nieuwe_reeks.append(verhoogde_frequentiereeks)
    
    nieuwe_reeks = tuple(nieuwe_reeks)
    
    return nieuwe_reeks",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( unary_expression ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Anna Hautekeete/complementaire-reeksen.py"",""fullName"":""Anna Hautekeete"",""id"":""11522"",""status"":""correct"",""submissionID"":""6371237"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T09:36:49.000Z"",""labels"":""bcbt""}"
594,/home/maxiem/Downloads/files/Ella Meynckens/complementaire-reeksen.py,"def stijgend(getallen):
    stijgend = True
    for i, getal in enumerate(getallen):
        if i == len(getallen) - 1:
            continue
        if getal > getallen[i + 1]:
            stijgend = False
    return stijgend
def frequentiereeks(getallen):
    assert stijgend(getallen), 'gegeven reeks is niet stijgend'
    einde = []
    count = 0
    for i in range(getallen[-1] + 2):
        if i == 0:
            continue
        for j in getallen:
            if j < i:
                count += 1
        einde.append(count)
        count = 0
    return einde
def verhogen(getallen):
    return [getal + i + 1 for i, getal in enumerate(getallen)]
def complementaire_reeksen(getallen):
    assert stijgend(getallen), 'gegeven reeks is niet stijgend'
    return (verhogen(getallen),verhogen(frequentiereeks(getallen)))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( continue_statement ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ( continue_statement ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Ella Meynckens/complementaire-reeksen.py"",""fullName"":""Ella Meynckens"",""id"":""8306"",""status"":""correct"",""submissionID"":""6204924"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-31T15:10:59.000Z"",""labels"":""bcbt""}"
595,/home/maxiem/Downloads/files/Amir Miri/complementaire-reeksen.py,"def stijgend(p):
    p = list(p)
    import itertools
    import operator
    res = all(itertools.starmap(operator.le,zip(p, p[1:])))
    return res

def geef_kleiner(lijst,getal):
    nummer = 0
    for x in lijst:
        if x <= getal:
            nummer += 1
        if x > getal:
            return nummer
    return nummer

def frequentiereeks(p):
 if stijgend(p) == False:
     raise AssertionError('gegeven reeks is niet stijgend')
 laatste_getal = p[-1]
 laatste_getal += 1
 lijst = []
 for x in range(laatste_getal):
     lijst.append(geef_kleiner(p,x))
 return lijst



def verhogen(p):
    p = list(p)
    v = []
    for inx, elements in enumerate(p, start = 1):
        v.append(inx + elements)

    return (v)

def complementaire_reeksen(p):
  a = verhogen(p)
  b = frequentiereeks(p)
  c = verhogen(b)
  return (a,c)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( import ) ( ERROR ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Amir Miri/complementaire-reeksen.py"",""fullName"":""Amir Miri"",""id"":""11524"",""status"":""correct"",""submissionID"":""6403017"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T14:47:23.000Z"",""labels"":""chem""}"
596,/home/maxiem/Downloads/files/Stan Aelterman/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(lijst):
    i = 1
    while i < len(lijst) and lijst[i - 1] <= lijst[i]:
        i += 1
    return i == len(lijst)


def frequentiereeks(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    m = lijst[-1]
    newlist = []
    for i in range(m + 1):
        k = lijst.count(0)
        for j in range(i):
            k += lijst.count(j + 1)
        newlist += [k]
    return newlist


def verhogen(lijst):
    newlist = []
    for i in range(len(lijst)):
        newlist.append(lijst[i] + i + 1)
    return newlist


def complementaire_reeksen(lijst):
    reeks1 = verhogen(lijst)
    reeks2 = verhogen(frequentiereeks(lijst))
    return reeks1, reeks2
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Stan Aelterman/complementaire-reeksen.py"",""fullName"":""Stan Aelterman"",""id"":""11527"",""status"":""correct"",""submissionID"":""6390141"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T10:36:22.000Z"",""labels"":""fyss""}"
597,/home/maxiem/Downloads/files/Laura De Fraine/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    reeks = list(reeks)
    if sorted(reeks) == reeks:
        return True
    return False
def frequentiereeks(reeks):
    """"""
     >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    nieuw = []
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        for i in range(1, int(reeks[-1]) + 2):
            plus = 0
            for getal in reeks:

                if int(getal) < i:
                    plus += 1
            nieuw.append(plus)
        return nieuw

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    oplossing = []
    for count, getal in enumerate(reeks):
        getal = int(getal)
        getal2 = getal + count + 1
        oplossing.append(getal2)
    return oplossing
def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    oplossing = []
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        reeks1 = list(verhogen(reeks))
        reeks2 = list(frequentiereeks(reeks))
        reeks2 = list(verhogen(reeks2))
        oplossing.append(reeks1)
        oplossing.append(reeks2)
        return tuple(oplossing)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Laura De Fraine/complementaire-reeksen.py"",""fullName"":""Laura De Fraine"",""id"":""8114"",""status"":""correct"",""submissionID"":""6354915"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T16:14:32.000Z"",""labels"":""bcbt""}"
598,/home/maxiem/Downloads/files/Ceri-Anne Laureyssens/complementaire-reeksen.py,"def stijgend(reeks):
    reeks = list(reeks)
    eerstecijfer = reeks[0]
    for cijfer in reeks[1:]:
        if cijfer >= eerstecijfer:
            eerstecijfer = cijfer
        else:
            return False
    if not False:
        return True

def frequentiereeks(reeks):
    reeks = list(reeks)
    eerstecijfer = reeks[0]
    for cijfer in reeks[1:]:
        if eerstecijfer > cijfer:
            raise AssertionError(""gegeven reeks is niet stijgend"")
        else:
            eerstecijfer = cijfer
    # find maximum
    up = stijgend(reeks)
    if up == True:
        maximum = reeks[-1]
    # bepaal freq van chars in lijst
    freq = 0
    freqlist = []
    for i in range(1, int(maximum)+2):
        for ch in reeks:
            if ch < i:
                freq += 1
        freqlist.append(freq)
        freq = 0
    return freqlist

def verhogen(reeks):
    reeks = list(reeks)
    index = 1
    verhoogdereeks = []
    for cijfer in reeks:
        cijfer += index
        index += 1
        verhoogdereeks.append(cijfer)
    return verhoogdereeks

def complementaire_reeksen(reeks):
    reeks = list(reeks)
    eerstecijfer = reeks[0]
    for cijfer in reeks[1:]:
        if eerstecijfer > cijfer:
            raise AssertionError(""gegeven reeks is niet stijgend"")
        else:
            verhoogdelijst = verhogen(reeks)
            frequeneerdelijst = frequentiereeks(reeks)
            verhoogdegefrequeneerdelijst = verhogen(frequeneerdelijst)
    return (verhoogdelijst, verhoogdegefrequeneerdelijst)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Ceri-Anne Laureyssens/complementaire-reeksen.py"",""fullName"":""Ceri-Anne Laureyssens"",""id"":""5401"",""status"":""correct"",""submissionID"":""6343023"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T09:09:42.000Z"",""labels"":""keuz""}"
599,/home/maxiem/Downloads/files/Jozefien Demeulenaere/complementaire-reeksen.py,"def stijgend(reeks):
    if list(reeks) != sorted(reeks):
        return False
    else:
        return True

def frequentiereeks(reeks):
    #Als de reeks niet stijgend is:
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""

    if stijgend(reeks) == True:
        frequentiereeks = []
        m = int(reeks[-1]) + 1
        nieuwereeks = list(range(1, m + 1))
        for index in range(len(nieuwereeks)):
            aantal = sum(karakter < nieuwereeks[index] for karakter in reeks)
            frequentiereeks.append(aantal)

    return frequentiereeks

def verhogen(reeks):
    teller = 1
    verhoogdereeks = []
    for i in range(len(reeks)):
        nieuwgetal = int(reeks[i]) + teller
        teller += 1
        verhoogdereeks.append(nieuwgetal)
    return verhoogdereeks

def complementaire_reeksen(reeks):
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    
    verhoogdereeks = verhogen(reeks)

    frekwuentiereeks = frequentiereeks(reeks)
    nieuwereeks = []
    teller = 1
    for i in range(len(frekwuentiereeks)):
        nieuwegetal = int(frekwuentiereeks[i]) + teller
        teller += 1
        nieuwereeks.append(nieuwegetal)

    return verhoogdereeks, nieuwereeks

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( array ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Jozefien Demeulenaere/complementaire-reeksen.py"",""fullName"":""Jozefien Demeulenaere"",""id"":""11545"",""status"":""correct"",""submissionID"":""6368883"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T20:14:43.000Z"",""labels"":""bcbt""}"
600,/home/maxiem/Downloads/files/Benthe Van Buyten/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True

    """"""
    vorige = lijst[0]
    uitkomst = []
    for elem in lijst:
        if elem >= vorige:
            uitkomst.append(True)
        else:
            uitkomst.append(False)
        vorige = elem
    return all(uitkomst)

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst) is True, 'gegeven reeks is niet stijgend'

    lengte = lijst[-1] + 1
    uitkomst = []
    aantal = []
    for cijfer in range(1, lengte + 1):
        for elem in lijst:
            if elem < cijfer:
                aantal.append(True)
            else:
                aantal.append(False)
        k = aantal.count(True)
        uitkomst.append(k)
        aantal = []
    return uitkomst

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    uitkomst = []
    for plaats, cijfer in enumerate(lijst, 1):
        uitkomst.append(cijfer + plaats)
    return uitkomst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    nieuw = frequentiereeks(lijst)
    uitkomst = verhogen(nieuw)

    return (verhogen(lijst), uitkomst)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Benthe Van Buyten/complementaire-reeksen.py"",""fullName"":""Benthe Van Buyten"",""id"":""8025"",""status"":""correct"",""submissionID"":""6335360"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T17:51:27.000Z"",""labels"":""bcbt""}"
601,/home/maxiem/Downloads/files/Jon Michiels/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    # controleer of voor elk paar opeenvolgende getallen geldt dat het eerste
    # getal niet groter is dan het tweede getal
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))
    
def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    # nagaan of gegeven reeks stijgend is
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    
    freq, waarde, aantal = [], 0, 0
    for getal in reeks:
        
        #op dit moment geeft ""aantal"" aan hoeveel getallen uit de reeks strikt
        # kleiner zijn dan het huidige ""getal"" in de reeks
        while waarde < getal: 
            freq.append(aantal)
            waarde += 1
            
        aantal += 1
        
    # we moeten nog aangeven hoeveel getallen in de reeks kleiner of gelijk zijn
    # aan het laatste getal in de reeks (dit zijn alle getallen in de reeks)
    freq.append(aantal)
    
    # frequentiereeks teruggeven
    return freq
    
def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    
    # alle elementen van de reeks verhogen overeenkomstig hun positie
    return [element + positie + 1 for positie, element in enumerate(reeks)]
    
def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jon Michiels/complementaire-reeksen.py"",""fullName"":""Jon Michiels"",""id"":""7615"",""status"":""correct"",""submissionID"":""6396801"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T22:29:30.000Z"",""labels"":""bcbt""}"
602,/home/maxiem/Downloads/files/Arthur Catteuw/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i, karakter in enumerate(reeks[1:]):
        if karakter < reeks[i]:
            return False
    return True

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')

    freq_reeks = []
    m = 0
    if reeks[-1] >= len(reeks):
        for i in range(reeks[-1] + 1):
            if reeks[m] == i and reeks[m] != reeks[(m + 1) % len(reeks)]:
                m += 1
            elif reeks[m] == i and reeks[m] == reeks[(m + 1) % len(reeks)]:
                n = 1
                while reeks[m] == reeks[(m + n) % len(reeks)]:
                    n += 1
                m += n
            freq_reeks.append(m)
    elif reeks[-1] < len(reeks):
        for i, cijfer in enumerate(reeks):
            if cijfer > m:
                while (cijfer - m) > 0:
                    freq_reeks.append(i)
                    m += 1
        freq_reeks.append(len(reeks))

    return freq_reeks


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoging = []
    for i, cijfer in enumerate(reeks):
        verhoging.append(cijfer + i + 1)
    return verhoging

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')

    frequentie_reeks = frequentiereeks(reeks)
    reeks1 = verhogen(reeks)
    reeks2 = verhogen(frequentie_reeks)
    return(reeks1, reeks2)



if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Arthur Catteuw/complementaire-reeksen.py"",""fullName"":""Arthur Catteuw"",""id"":""11552"",""status"":""correct"",""submissionID"":""6279678"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-05T11:55:02.000Z"",""labels"":""geog""}"
603,/home/maxiem/Downloads/files/Serafina Van Geertruyen/complementaire-reeksen.py,"def increasing(seq):
    isincreasing = True

    for index, num in enumerate(seq):
        if index < len(seq) - 1 and seq[index + 1] < num:
            isincreasing = False
    return isincreasing


def frequency_sequence(seq):
    assert increasing(seq), 'given sequence is not increasing'
    seq_new = list()
    num = 0

    for index in range(seq[-1] + 1):
        for _, number in enumerate(seq):
            if number < index + 1:
                num += 1
        seq_new.append(num)
        num = 0

    return seq_new


def lift(seq):
    seq = list(seq)

    for index, number in enumerate(seq):
        number += index + 1
        seq[index] = number

    return seq


def complementary_sequences(seq):
    return lift(seq), lift(frequency_sequence(seq))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Serafina Van Geertruyen/complementaire-reeksen.py"",""fullName"":""Serafina Van Geertruyen"",""id"":""7561"",""status"":""correct"",""submissionID"":""6388399"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T23:13:23.000Z"",""labels"":""keuz""}"
604,/home/maxiem/Downloads/files/Hannah De Cock/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    for i in range(1, len(lijst)):
        if lijst[i] < lijst[i-1]:
            return False

    return True

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(lijst) == True, ""gegeven reeks is niet stijgend""
    frequentie = 0
    n_lijst = []

    for i in range(1, lijst[-1] + 2):
        for getal in lijst:
            if getal < i:
                frequentie += 1
        n_lijst += [frequentie]
        frequentie = 0

    return n_lijst

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    v_lijst = []
    n_getal = 0
    n = 1

    for getal in lijst:
        n_getal = getal + n
        v_lijst += [n_getal]
        n_getal = 0
        n += 1

    return v_lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(lijst) == True, ""gegeven reeks is niet stijgend""
    reeks1 = verhogen(lijst)
    reeks2 = verhogen(frequentiereeks(lijst))

    return (reeks1, reeks2)

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Hannah De Cock/complementaire-reeksen.py"",""fullName"":""Hannah De Cock"",""id"":""11554"",""status"":""correct"",""submissionID"":""6338460"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T13:48:53.000Z"",""labels"":""geog""}"
605,/home/maxiem/Downloads/files/Steven Wallaert/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    # starting from 1: to be able to compare between current and previous in seq
    for i in range(1, len(sequence)):
        if sequence[i] < sequence[i-1]:
            return False
    return True

def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence), ""given sequence is not increasing""
    nr_of_elements = max(sequence) + 1
    freq_seq = [None] * nr_of_elements

    for place in range(nr_of_elements):
        count = 0
        for element in sequence:
            if element < (place + 1):
                count += 1
        freq_seq[place] = count

    return freq_seq


def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    sequence = list(sequence)
    for i, element in enumerate(sequence):
        sequence[i] = element + i + 1
    return sequence


def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    return lift(sequence), lift(frequency_sequence(sequence))

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Steven Wallaert/complementaire-reeksen.py"",""fullName"":""Steven Wallaert"",""id"":""11623"",""status"":""correct"",""submissionID"":""6351847"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T10:43:26.000Z"",""labels"":""stat""}"
606,/home/maxiem/Downloads/files/Vic De Ridder/complementaire-reeksen.py,"def stijgend(x):
    count = 0
    for char in x:
        if count == 0:
            count += 1
        else:
            if int(char) >= x[count - 1]:
                count += 1
                continue
            else:
                return False
    return True
def frequentiereeks(x):
    assert stijgend(x) is True, ""gegeven reeks is niet stijgend""
    m = max(x)
    count = -1
    f = []
    for i in range(1, m + 2):
        f += [0,]
        count += 1
        for char in x:
            if int(char) < i:
                f[count] += 1
    return f
def verhogen(x):
    x = list(x)
    n = 1
    count = 0
    for char in x:
        x[count] = int(char) + n
        n += 1
        count += 1
    return x
def complementaire_reeksen(x):
    return verhogen(x), verhogen(frequentiereeks(x))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( continue_statement ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Vic De Ridder/complementaire-reeksen.py"",""fullName"":""Vic De Ridder"",""id"":""11625"",""status"":""correct"",""submissionID"":""6392837"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T14:43:01.000Z"",""labels"":""fyss""}"
607,/home/maxiem/Downloads/files/Laura De Backer/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(list_or_tuple):
    voorgaande = 0
    result = []
    for i, element in enumerate(list_or_tuple):
        if list_or_tuple[i] >= voorgaande:
            result.append(True)
        else:
            result.append(False)
        voorgaande = list_or_tuple[i]
    return all(result)

def frequentiereeks(list_or_tuple):
    result = stijgend(list_or_tuple)
    assert result, ""gegeven reeks is niet stijgend""

    som = 0
    reeks = []

    for j in range(1, (max(list_or_tuple) + 2)):
        for i, element in enumerate(list_or_tuple):
            if element < j:
                som += 1
        reeks.append(som)
        som = 0

    return reeks

def verhogen(list_or_tuple):
    nieuwe_lijst = []
    for i in range(0, len(list_or_tuple)):
        nieuwe_lijst.append(list_or_tuple[i] + (i+1))

    return nieuwe_lijst

def complementaire_reeksen(list_or_tuple):
    nieuwe_lijst = verhogen(list_or_tuple)

    frequentie = frequentiereeks(list_or_tuple)
    nieuwe_frequentie = verhogen(frequentie)

    return nieuwe_lijst, nieuwe_frequentie",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Laura De Backer/complementaire-reeksen.py"",""fullName"":""Laura De Backer"",""id"":""7347"",""status"":""correct"",""submissionID"":""6393600"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T15:39:49.000Z"",""labels"":""keuz""}"
608,/home/maxiem/Downloads/files/Arno Foucher/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    n = 1
    for _ in lijst[1:len(lijst)]:
        if _ < lijst[n-1]:
            return False
        n += 1
    return True

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    n_lijst = stijgend(lijst)
    assert n_lijst is True, ""gegeven reeks is niet stijgend""
    n = 0
    m = 0
    freq = []
    while n != len(lijst):
        k = 0
        for karakter in lijst:
            if m >= karakter:
                k += 1
        freq.append(k)
        n = freq[-1]
        m += 1
    return freq

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    n_lijst = []
    n = 1
    for karakter in lijst:
        n_lijst.append(karakter+n)
        n += 1
    return n_lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    m_lijst = verhogen(lijst)
    n_lijst = frequentiereeks(lijst)
    o_lijst = verhogen(n_lijst)
    return m_lijst, o_lijst

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Arno Foucher/complementaire-reeksen.py"",""fullName"":""Arno Foucher"",""id"":""8373"",""status"":""correct"",""submissionID"":""6279198"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-05T11:25:47.000Z"",""labels"":""bcbt""}"
609,/home/maxiem/Downloads/files/Aïka De Vleeschauwer/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks_int):
    """"""
    nagaan of reeks stijgend is
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    i = 0
    while i < (len(reeks_int) - 1):    #-1 want we tellen vannaf 0 en len telt het totaal, en laatste cijfer moeten we niet controleren
        if not reeks_int[i] <= reeks_int[i +1]:
            return False
        else:
            i += 1
    return True

def frequentiereeks(reeks_int):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks_int), ""gegeven reeks is niet stijgend""
    #lijst aanmaken
    tellen = 0
    lijst = []
    n = 0
    i = reeks_int[n]
    for t in range(1, reeks_int[-1] + 2):
        while i < t and n < (len(reeks_int) - 1):
            tellen += 1
            n += 1
            i = reeks_int[n]
        lijst.append(tellen)
        tellen = 0
        n = 0
        i = reeks_int[n]
    lijst[-1] += 1

    return lijst

def verhogen(reeks_int):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    reeks_int = list(reeks_int)
    for index, cijfer in enumerate(reeks_int):
        reeks_int[index] = index + 1 + cijfer
    return reeks_int

def complementaire_reeksen(reeks_int):
    """"""

    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks_int), ""gegeven reeks is niet stijgend""
    reeks_int_verh_tuple = verhogen(reeks_int)
    frequentiereeks_int_verh_tuple = verhogen(frequentiereeks(reeks_int))
    return reeks_int_verh_tuple, frequentiereeks_int_verh_tuple


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( ERROR ( ERROR ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Aïka De Vleeschauwer/complementaire-reeksen.py"",""fullName"":""Aïka De Vleeschauwer"",""id"":""11628"",""status"":""correct"",""submissionID"":""6335796"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T19:40:12.000Z"",""labels"":""bcbt""}"
610,/home/maxiem/Downloads/files/Bram Deprez/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(reeks):
    a = 0
    for b in reeks:
        if a > b:
            return False
        a = b
    return True


def frequentiereeks(reeks):
    assert (stijgend(reeks)), ""gegeven reeks is niet stijgend""
    frequentie = []
    for index in range(reeks[-1]+1):        #   checken tot aan grootste getal
        aantal = 0
        ind = 0
        while ind < len(reeks):
            if reeks[ind] < index+1:        #   optellen telkens een getal kleiner dan de index
                aantal += 1
            ind += 1
        frequentie.append(aantal)
    return frequentie

def verhogen(reeks):
    verhoogd = []
    for i, a in enumerate(reeks):
        a += i+1
        verhoogd.append(a)
    return verhoogd

def complementaire_reeksen(reeks):
    nieuwelijst = verhogen(reeks)
    frequentie = verhogen(frequentiereeks(reeks))
    
    return(nieuwelijst, frequentie)",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Bram Deprez/complementaire-reeksen.py"",""fullName"":""Bram Deprez"",""id"":""11630"",""status"":""correct"",""submissionID"":""6396157"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T20:17:38.000Z"",""labels"":""keuz""}"
611,/home/maxiem/Downloads/files/Gill Jacobs/complementaire-reeksen.py,"def stijgend(lijst):
    for pos, el in enumerate(lijst):
        if pos > 0 and el < lijst[pos - 1]:
            return False
    return True

def frequentiereeks(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    freq = []
    for i in range(lijst[-1] + 1):
        som = 0
        for j in lijst:
            if j < i + 1:
                som += 1
        freq.append(som)
    return freq

def verhogen(lijst):
    newlist = []
    for pos, el in enumerate(lijst):
        newlist.append(lijst[pos] + pos + 1)
    return newlist

def complementaire_reeksen(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    l1 = verhogen(lijst)
    l2 = verhogen(frequentiereeks(lijst))
    return (l1, l2)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Gill Jacobs/complementaire-reeksen.py"",""fullName"":""Gill Jacobs"",""id"":""11638"",""status"":""correct"",""submissionID"":""6395433"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T18:44:18.000Z"",""labels"":""fyss""}"
612,/home/maxiem/Downloads/files/Timea Vanspeybrouck/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(getallen):

    '''
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    '''

    bool_lijst = []
    for index, getal in enumerate(getallen[:-1]):
        if getallen[index + 1] < getal:
            stijgend = False
        else:
            stijgend = True

        bool_lijst.append(stijgend)

    return all(bool_lijst)

def frequentiereeks(getallen):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    # assertion error
    assert stijgend(getallen), ""gegeven reeks is niet stijgend""

    nieuw = []
    # voor m + 1
    for i in range(1, getallen[-1] + 2):
        # om getallen te verkrijgen die kleiner zijn dan i
        # opgezocht op site
        tel = len([a for a in getallen if a < i])
        nieuw.append(tel)

    return nieuw



def verhogen(getallen):
    nieuwe_reeks = []
    for index, getal in enumerate(getallen):
        nieuwe_reeks.append(getal + index + 1)

    return nieuwe_reeks

def complementaire_reeksen(getallen):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    nieuw = verhogen(getallen), verhogen(frequentiereeks(getallen))
    return nieuw






if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Timea Vanspeybrouck/complementaire-reeksen.py"",""fullName"":""Timea Vanspeybrouck"",""id"":""11641"",""status"":""correct"",""submissionID"":""6377323"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:44:04.000Z"",""labels"":""bcbt""}"
613,/home/maxiem/Downloads/files/Caroline Keck/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639


def increasing(sequence):
    return all(i <= j for i, j in zip(sequence, sequence[1:]))


def frequency_sequence(sequence):
    assert(increasing(sequence)), 'given sequence is not increasing'
    m = max(sequence)
    return list(len([element for pos, element in enumerate(sequence) if element < j]) for j in range(1, m+2))


def lift(sequence):
    return list(element + (pos+1) for pos, element in enumerate(sequence))


def complementary_sequences(sequence):
    assert (increasing(sequence)), 'given sequence is not increasing'
    lifted1 = lift(sequence)
    lifted2 = lift(frequency_sequence(sequence))
    return lifted1, lifted2",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( array ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Caroline Keck/complementaire-reeksen.py"",""fullName"":""Caroline Keck"",""id"":""10887"",""status"":""correct"",""submissionID"":""6315689"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-06T15:40:17.000Z"",""labels"":""stat""}"
614,/home/maxiem/Downloads/files/Simon Daled/complementaire-reeksen.py,"#nagaan of een reeks getallen stijgend is
def stijgend(reeks):
    for index, number in enumerate(reeks):
        if number < reeks[index -1] and index > 0:
            return False
    return True

def frequentiereeks(reeks):

    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    frequentiereeks = []
    for number in range(1, reeks[-1] + 2): # alle nummers overlopen waarmee een vergelijking moet gemaakt worden
        hoeveelheid = 0
        for digit in reeks:
            if digit < number:
                hoeveelheid += 1    # getallen kleiner dan het vergelijkingsgetal optellen
        frequentiereeks.append(hoeveelheid)  # toevoegen aan de frequentielijst
    return frequentiereeks

def verhogen(reeks):
    verhogen = [number + (index + 1) for index, number in enumerate(reeks)]
    return verhogen

def complementaire_reeksen(reeks):
    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( expression_statement ( identifier ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( number ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Simon Daled/complementaire-reeksen.py"",""fullName"":""Simon Daled"",""id"":""11643"",""status"":""correct"",""submissionID"":""6409022"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T21:35:23.000Z"",""labels"":""doct""}"
615,/home/maxiem/Downloads/files/Niko Strijbol/complementaire-reeksen.py,"def stijgend(getallen):
    lijst = list(getallen)
    if lijst == sorted(lijst):
        return True
    else:
        return False
def frequentiereeks(getallen):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(getallen):
        raise AssertionError('gegeven reeks is niet stijgend')
    frequentie = []
    getallen = list(getallen)
    grootste = int(getallen[-1])
    for i in range (1, grootste + 2):
        start = 0
        lager = 0
        while start < len(getallen) and getallen[start]< i:
            lager += 1
            start += 1
        frequentie.append(lager)
    return frequentie







if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Niko Strijbol/complementaire-reeksen.py"",""fullName"":""Niko Strijbol"",""id"":""824"",""status"":""runtime error"",""submissionID"":""6372855"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T11:19:08.000Z"",""labels"":""admin""}"
616,/home/maxiem/Downloads/files/Ferre Jonckheere/complementaire-reeksen.py,"def increasing(numbers):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    test = numbers[1] >= numbers[0]
    index = 2
    while test and index != len(numbers):
        test = numbers[index] >= numbers[index - 1]
        if test:
            test = bool(test)
        else:
            test = bool(test)
        index += 1
    return test


def frequency_sequence(numbers):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    if increasing(numbers):
        answer = []
        index = 1
        while len(answer) != numbers[-1] + 1:
            count = 0
            for value, element in enumerate(numbers):
                if element < index:
                    count += 1
            index += 1
            answer.append(count)
        return answer
    raise AssertionError(""given sequence is not increasing"")


def lift(numbers):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    answer = []
    for index, element in enumerate(numbers):
        answer.append(element + index + 1)
    return answer


def complementary_sequences(numbers):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    high = lift(numbers)
    freq = lift(frequency_sequence(numbers))
    return high, freq


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( subscript_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Ferre Jonckheere/complementaire-reeksen.py"",""fullName"":""Ferre Jonckheere"",""id"":""11647"",""status"":""correct"",""submissionID"":""6338906"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T14:32:08.000Z"",""labels"":""keuz""}"
617,/home/maxiem/Downloads/files/Saskia Proumen De Keyser/complementaire-reeksen.py,"def increasing(sequence):

    """"""
    Must return a Boolean value (bool) that indicates if
    the integers in the given sequence are increasing.
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    # check if position + 1 > position
    value = True
    for index, element in enumerate(sequence):
        if value is True and index != 0:        # at index 0 there is no previous number to check
            value = bool(element >= sequence[index - 1])

    return value


def frequency_sequence(sequence):

    """"""
    Returns a new list containing the integers (int) in the frequency sequence
    of the given sequence. In case the given sequence is not increasing,
    the function must raise an AssertionError with the message given sequence is not increasing.

    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    # raise error when there is no increase
    if increasing(sequence) is False:
        assert increasing(sequence), 'given sequence is not increasing'

    the_frequency_sequence = []
    for number in range(1, sequence[-1] + 2):       # + 2 because half-open range
        count = 0
        for element in sequence:                    # go over every element of the list to determine frequency
            if element < number:
                count += 1
        the_frequency_sequence.append(count)

    return the_frequency_sequence


def lift(sequence):

    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    lifted_sequence = []
    adding_number = 1                               # will increase with every element
    for element in sequence:
        lifted_sequence.append(element + adding_number)
        adding_number += 1

    return lifted_sequence


def complementary_sequences(sequence):

    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    return lift(sequence), lift(frequency_sequence(sequence))


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Saskia Proumen De Keyser/complementaire-reeksen.py"",""fullName"":""Saskia Proumen De Keyser"",""id"":""11649"",""status"":""correct"",""submissionID"":""6339807"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T15:55:07.000Z"",""labels"":""biol""}"
618,/home/maxiem/Downloads/files/Junyao Zhou/complementaire-reeksen.py,"def stijgend(reeks):
    i = 0
    while i <= len(reeks) -2:
        if reeks[i] <= reeks[i+1]:
            i += 1
        else:
            return False
    return True

def frequentiereeks(reeks):

    assert stijgend(reeks) , ""gegeven reeks is niet stijgend""
    i = 1
    counter = 0
    list = []
    while i <= reeks[-1] + 1:
        for e in reeks:
            if e < i:
                counter += 1
        list.append(counter)
        counter = 0
        i += 1
    return list

def verhogen(reeks):
    plus = 1
    lijst = []
    for element in reeks:
        element += plus
        lijst.append(element)
        plus += 1
    return lijst

def complementaireReeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Junyao Zhou/complementaire-reeksen.py"",""fullName"":""Junyao Zhou"",""id"":""7763"",""status"":""correct"",""submissionID"":""6193723"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-30T16:55:40.000Z"",""labels"":""bcbt""}"
619,/home/maxiem/Downloads/files/Manon Van Goethem/complementaire-reeksen.py,"def stijgend(lijst):
    answer = True
    for i in range(len(lijst) - 1):
        if lijst[i] > lijst[i + 1]:
            answer = False
    return answer


def frequentiereeks(lijst):
    list = []
    a = 0
    b = 0
    if stijgend(lijst) == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        while b <= (len(lijst)-1):
            for j in range(lijst[b] - a):
                list.append(b)
            a = lijst[b]
            b += 1
        list.append(b)
        return list

def verhogen(lijst):
    a = 1
    list = []
    for i in range(len(lijst)):
        b = lijst[i] + a
        list.append(b)
        a += 1
    return list

def complementaire_reeksen(lijst):
    if stijgend(lijst) == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    list1 = verhogen(lijst)
    list2 = frequentiereeks(lijst)
    list2 = verhogen(list2)
    list = (list1, list2)
    return tuple(list)    ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Manon Van Goethem/complementaire-reeksen.py"",""fullName"":""Manon Van Goethem"",""id"":""11651"",""status"":""correct"",""submissionID"":""6391601"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T13:08:06.000Z"",""labels"":""chem""}"
620,/home/maxiem/Downloads/files/Jorg Wieme/complementaire-reeksen.py,"# Opstelling def 1
def stijgend(reeks):
    controle = reeks[0]
    bool = True
    for cijfer in reeks:
        if cijfer < controle:
            bool = False
        controle = cijfer
    return bool


# Opstelling def 2
def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    lengte = (reeks[-1] + 2)
    count = 1
    freqreeks = []

    while count < lengte:
        nieuwcijfer = 0

        for cijfer in reeks:
            if cijfer < count:
                nieuwcijfer += 1

        freqreeks.append(nieuwcijfer)
        count += 1

    return freqreeks


# Opstelling def 3
def verhogen(reeks):
    count = 0
    nieuwreeks = []
    for cijfer in reeks:
        count += 1
        cijfer += count
        nieuwreeks.append(cijfer)
    return nieuwreeks


# Opstelling def 4
def complementaire_reeksen(reeks):
    reeks1 = verhogen(reeks)
    reeks2 = frequentiereeks(reeks)
    reeks3 = verhogen(reeks2)
    compl = (reeks1, reeks3)
    return compl",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( expression_statement ( number ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Jorg Wieme/complementaire-reeksen.py"",""fullName"":""Jorg Wieme"",""id"":""1046"",""status"":""correct"",""submissionID"":""6413613"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T11:39:17.000Z"",""labels"":""admin""}"
621,/home/maxiem/Downloads/files/Thomas Vankerckhoven/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend

    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]

    >>> complementaireReeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaireReeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaireReeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    element = reeks[0]
    stijgend = True
    index = 1
    while stijgend and index < len(reeks):
        if reeks[index] < reeks[index-1]:
            stijgend = False
        index += 1
    return stijgend

def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    max_ = max(reeks) + 1
    resultaat = [0] * max_
    for element in reeks:
        for index in range(element, max_):
            resultaat[index] += 1
    return resultaat

def verhogen(reeks):
    nieuw = [0] * len(reeks)
    for index, element in enumerate(reeks):
        nieuw[index] = reeks[index] + index + 1
    return nieuw

def complementaireReeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))

if __name__ == '__main__':
    import doctest
    print(doctest.testmod())",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( array ( number ) ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( array ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ) ),"{""filename"":""Thomas Vankerckhoven/complementaire-reeksen.py"",""fullName"":""Thomas Vankerckhoven"",""id"":""1110"",""status"":""correct"",""submissionID"":""6157655"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-29T09:15:52.000Z"",""labels"":""admin""}"
622,/home/maxiem/Downloads/files/Bert Van Hecke/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i, v in enumerate(reeks):
        if i and v < reeks[i - 1]:
            return False
    return True


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    counter = 0
    getal = 0
    frequentie = []
    for i in reeks:
        while getal < i:
            frequentie.append(counter)
            getal += 1
        counter += 1
    frequentie.append(counter)
    return frequentie


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return [getal + index + 1 for index, getal in enumerate(reeks)]


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Bert Van Hecke/complementaire-reeksen.py"",""fullName"":""Bert Van Hecke"",""id"":""7924"",""status"":""correct"",""submissionID"":""6344266"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T12:04:14.000Z"",""labels"":""admin""}"
623,/home/maxiem/Downloads/files/Sabina Shamieva/complementaire-reeksen.py,"def stijgend(reeks):
    res = all(i <= j for i, j in zip(reeks, reeks[1:]))
    return res  # gehaald van geeksforgeeks.org




def frequentiereeks(reeks):
    tellen_lijst = []
    if stijgend(reeks) == True:
        for i in range(1, reeks[-1] + 2):
            n = 0
            tellen = 0
            while reeks[n] < i and n != len(reeks) - 1:
                n += 1
                tellen += 1
                if reeks[n] < i and n == len(reeks) - 1:
                    tellen += 1
            tellen_lijst.append(tellen)
        return tellen_lijst
    elif stijgend(reeks) == False:
        raise AssertionError(""gegeven reeks is niet stijgend"")


def verhogen(reeks):
    lijst = []
    n = 1
    for i in reeks:
        i += n
        n += 1
        lijst.append(i)
    return lijst



def complementaire_reeksen(reeks):
    if not stijgend(reeks):
        raise AssertionError(""gegeven reeks is niet stijgend"")
    else:
        nieuwe_reeks = verhogen(reeks)
        frequentiereeks_nieuw_verhoogd = verhogen(frequentiereeks(reeks))
        return nieuwe_reeks, frequentiereeks_nieuw_verhoogd

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( return_statement ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ) ( member_expression ( identifier ) ( property_identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Sabina Shamieva/complementaire-reeksen.py"",""fullName"":""Sabina Shamieva"",""id"":""11654"",""status"":""correct"",""submissionID"":""6225491"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-01T23:25:34.000Z"",""labels"":""bcbt""}"
624,/home/maxiem/Downloads/files/Linde Van Crombrugge/complementaire-reeksen.py,"def stijgend(lijst_nummers):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return list(lijst_nummers) == sorted(list(lijst_nummers))

def frequentiereeks(lijst_nummers):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    assert stijgend(lijst_nummers) == True, 'gegeven reeks is niet stijgend'
    frequentie_reeks = []
    aantal = 0
    waarde = 0
    for getal in lijst_nummers:
        while waarde < getal:
            frequentie_reeks.append(aantal)
            waarde += 1
        aantal += 1
    frequentie_reeks.append(aantal)
    return frequentie_reeks

def verhogen(lijst_nummers):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    optel = 1
    verhoog = []
    for getal in lijst_nummers:
        verhoog.append(getal + optel)
        optel += 1
    return verhoog

def complementaire_reeksen(lijst_nummers):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst_nummers) == True, 'gegeven reeks is niet stijgend'
    verhoog = verhogen(lijst_nummers)
    frequentie_reeks = verhogen(frequentiereeks(lijst_nummers))
    return (verhoog, frequentie_reeks)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Linde Van Crombrugge/complementaire-reeksen.py"",""fullName"":""Linde Van Crombrugge"",""id"":""11655"",""status"":""correct"",""submissionID"":""6381870"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T08:20:13.000Z"",""labels"":""biol""}"
625,/home/maxiem/Downloads/files/Onur Asci/complementaire-reeksen.py,"def increasing(numbers):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    check = True
    for i in range(len(numbers) - 1):
        if numbers[i] > numbers[i + 1]:
            check = False


    return check


def frequency_sequence(numbers):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(numbers), 'given sequence is not increasing'

    fs_list = []
    for index in range(1, numbers[-1]+2):
        count = 0
        for number in numbers:
            if number < index:
                count += 1

        fs_list.append(count)

    return fs_list



def lift(numbers):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    numbers = list(numbers)

    addition = 1
    for i in range(len(numbers)):
        numbers[i] += addition
        addition += 1

    return numbers


def complementary_sequences(numbers):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    return (lift(numbers), lift(frequency_sequence(numbers)))




if __name__ == '__main__':
    import doctest

    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Onur Asci/complementaire-reeksen.py"",""fullName"":""Onur Asci"",""id"":""4758"",""status"":""correct"",""submissionID"":""6347995"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T16:32:00.000Z"",""labels"":""stat""}"
626,/home/maxiem/Downloads/files/Simon De Meester/complementaire-reeksen.py,"def stijgend(x):
    for index, val in enumerate(x[:-1]):
        if x[index + 1] < x[index]:
            return False
    return True


def frequentiereeks(x):
    assert stijgend(x) != False, ""gegeven reeks is niet stijgend""
    m = max(x)
    lijst = range(1, m + 2)
    y = []
    for index, val in enumerate(lijst):
        y.append(sum(x[i] < val for i in range(len(x))))
    return y


def verhogen(x):
    y = [x[i] + (i + 1) for i in range(len(x))]
    return y


def complementaireReeksen(x):
    assert stijgend(x) != False, ""gegeven reeks is niet stijgend""
    y, z = [verhogen(x), verhogen(frequentiereeks(x))]
    return y, z
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( assignment_expression ( identifier ) ( array ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Simon De Meester/complementaire-reeksen.py"",""fullName"":""Simon De Meester"",""id"":""11656"",""status"":""correct"",""submissionID"":""6190798"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-30T14:49:56.000Z"",""labels"":""stat""}"
627,/home/maxiem/Downloads/files/Dönegül Sahin/complementaire-reeksen.py,"def stijgend(lijst):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    lijst = list(lijst)
    test = False
    if lijst == sorted(lijst):
        test = True
    return bool(test)


def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    index = 0
    aantal = 0
    lijst_2 = []
    if stijgend(lijst):
        for i in range(1, max(lijst) + 2):
            while index < len(lijst):
                getal = lijst[index]
                if getal < i:
                    aantal += 1
                index += 1
            lijst_2.append(aantal)
            aantal = 0
            index = 0
        return lijst_2
    raise AssertionError(""gegeven reeks is niet stijgend"")

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = list(lijst)
    nieuwe_lijst = []
    index = 1
    for getal in lijst:
        nieuw_getal = getal + index
        index += 1
        nieuwe_lijst.append(nieuw_getal)
    return nieuwe_lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    nieuwe_lijst = []
    element1 = verhogen(lijst)
    element2 = frequentiereeks(lijst)
    element3 = verhogen(element2)
    if stijgend(lijst):
        nieuwe_lijst.append(element1)
        nieuwe_lijst.append(element3)
        return tuple(nieuwe_lijst)
    raise AssertionError('gegeven reeks is niet stijgend')
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Dönegül Sahin/complementaire-reeksen.py"",""fullName"":""Dönegül Sahin"",""id"":""7988"",""status"":""correct"",""submissionID"":""6355338"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T17:03:25.000Z"",""labels"":""bcbt""}"
628,/home/maxiem/Downloads/files/Stijn De Schepper/complementaire-reeksen.py,"def stijgend(p_n):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    p = list(p_n)
    p.sort()
    return list(p_n) == p

def frequentiereeks(p_n):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    if stijgend(p_n):
        list_count = []
        m = int(p_n[-1])
        for i in range(1, m+2):
            count = 0
            for index, j in enumerate(p_n):
                if p_n[index] < i:
                    count += 1
            list_count += [count]
        return list_count
    else:
        assert False, 'gegeven reeks is niet stijgend'

def verhogen(p_n):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    p_n_verhoogd = []
    for index, i in enumerate(p_n):
        p_n_verhoogd += [(p_n[index] + (index+1))]
    return p_n_verhoogd

def complementaire_reeksen(p_n):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    return (verhogen(p_n), verhogen(frequentiereeks(p_n)))

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( return_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Stijn De Schepper/complementaire-reeksen.py"",""fullName"":""Stijn De Schepper"",""id"":""11682"",""status"":""correct"",""submissionID"":""6332011"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T10:33:44.000Z"",""labels"":""bcbt""}"
629,/home/maxiem/Downloads/files/Bastjaan Beernaert/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    """"""
    correct = True
    for i in range(1, len(sequence)):
        if sequence[i-1] > sequence[i]:
            correct = False
    return correct


def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    """"""
    assert increasing(sequence), 'given sequence is not increasing'
    list_freqseq = []
    for i in range(1, sequence[-1]+2):
        count = 0
        for j in range(0, len(sequence)):
            if sequence[j] < i:
                count += 1
        list_freqseq.append(count)
    return list_freqseq


def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    """"""
    increased_seq = []
    for index, number in enumerate(sequence):
        new_number = number + index + 1
        increased_seq.append(new_number)
    return increased_seq


def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    """"""
    lift_seq = lift(sequence)
    lift_freq_seq = lift(frequency_sequence(sequence))
    return lift_seq, lift_freq_seq


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Bastjaan Beernaert/complementaire-reeksen.py"",""fullName"":""Bastjaan Beernaert"",""id"":""2169"",""status"":""correct"",""submissionID"":""6346516"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T14:30:49.000Z"",""labels"":""stat""}"
630,/home/maxiem/Downloads/files/Max Van Goethem/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(l):
    """"""
    Geeft weer of ""l"" al dan niet een reeks stijgende getallen is.

    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(len(l) - 1):
        if l[i + 1] - l[i] < 0:
            return False
    return True


def frequentiereeks(l):
    """"""
    Geeft frequentiereeks terug van stijgende reeks ""l"".

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(l):
        raise AssertionError(""gegeven reeks is niet stijgend"")

    frequenties = []
    count = 0

    for bovengrens in range(l[-1] + 1):
        for element in l:
            if element < bovengrens + 1:
                count += 1
        frequenties.append(count)
        count = 0
    return frequenties


def verhogen(l):
    """"""
    Geef lijst van getallen terug waarbij elk getal verhoogd is met zijn index.

    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return [i[1] + i[0] + 1 for i in enumerate(l)]


def complementaire_reeksen(l):
    """"""
    Geeft verhoogde reeks en verhoogde frequentiereeks terug als de lijst stijgend is.

    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(l):
        raise AssertionError(""gegeven reeks is niet stijgend"")
    return verhogen(l), verhogen(frequentiereeks(l))


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ( string ) ( identifier ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( number ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( array ( binary_expression ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( subscript_expression ( identifier ) ( number ) ) ) ( number ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Max Van Goethem/complementaire-reeksen.py"",""fullName"":""Max Van Goethem"",""id"":""5784"",""status"":""correct"",""submissionID"":""6343957"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T11:11:47.000Z"",""labels"":""keuz""}"
631,/home/maxiem/Downloads/files/Sarah Gentenaar/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    freq, waarde, aantal = [], 0, 0
    for getal in reeks:
        while waarde < getal:
            freq.append(aantal)
            waarde += 1
        aantal += 1
    freq.append(aantal)
    return freq

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return [element + positie + 1 for positie, element in enumerate(reeks)]

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Sarah Gentenaar/complementaire-reeksen.py"",""fullName"":""Sarah Gentenaar"",""id"":""11684"",""status"":""correct"",""submissionID"":""6419524"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T15:53:10.000Z"",""labels"":""keuz""}"
632,/home/maxiem/Downloads/files/Elise Buyse/complementaire-reeksen.py,"def stijgend(reeks):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    
    return all(reeks[i] <= reeks[i+1] for i in range(len(reeks)-1))

def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    #stijgend?? moet niet strikt
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    Frequentiereeks = []
    waarde = 0
    aantal = 0  #aantal getallen die kleiner zijn dan voorgaande getal
    for getal in reeks:

        while waarde < getal:
            Frequentiereeks.append(aantal)
            waarde += 1
        aantal += 1

    Frequentiereeks.append(aantal)

    return Frequentiereeks

def verhogen(reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''


    return [element + positie + 1 for positie, element in enumerate(reeks)]

def complementaire_reeksen(reeks):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Elise Buyse/complementaire-reeksen.py"",""fullName"":""Elise Buyse"",""id"":""11685"",""status"":""correct"",""submissionID"":""6389949"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T10:11:20.000Z"",""labels"":""bcbt""}"
633,/home/maxiem/Downloads/files/Laetitia Lamont/complementaire-reeksen.py,"def stijgend(lijst):
    nieuw = []
    # getallen in de lijst of tuple afgaan en omzetten naar lijst,
    # want de sorted tool zet automatisch tuples om tot lijst en dan geeft hij een verkeerde false bool
    for getal in lijst:
        nieuw.append(int(getal))
    return bool(nieuw == sorted(lijst))


def frequentiereeks(lijst):
    #gegeven reeks niet stijgend is: AssertionError bericht: reeks is niet stijgend.
    if not stijgend(lijst):
        raise AssertionError('gegeven reeks is niet stijgend')
    # nieuwe lijst met de getallen van de frequentiereeks van de gegeven reeks.
    grootstegetal = lijst[-1]
    nieuwelijst = []
    factor = 0
    for cijfer in range(1, grootstegetal + 1):
        for getal in lijst:
            if getal < cijfer:
                factor += 1
        nieuwelijst.append(factor)
        factor = 0
    nieuwelijst.append(len(lijst))
    return nieuwelijst
    
def verhogen(lijst):
    #Een functie verhogen die een nieuwe lijst (list) teruggeeft,
    #bevat getallen(int) van lijst, verhoogd met positie in de gegeven reeks
    nieuwelijst = []
    n = 1
    for getal in lijst: 
        getal += n
        n += 1
        nieuwelijst.append(getal)
    return nieuwelijst
    
def complementaire_reeksen(lijst):
    eerstelijst = verhogen(lijst)
    tweedelijst = verhogen(frequentiereeks(lijst))
    return eerstelijst, tweedelijst",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( false ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( member_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( property_identifier ) ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( ERROR ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Laetitia Lamont/complementaire-reeksen.py"",""fullName"":""Laetitia Lamont"",""id"":""11694"",""status"":""correct"",""submissionID"":""6217476"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-01T13:35:41.000Z"",""labels"":""keuz""}"
634,/home/maxiem/Downloads/files/Ke Zhang/complementaire-reeksen.py,"def increasing(seq):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    seq = list(seq)
    org = seq.copy()
    seq.sort()
    return org == seq
def frequency_sequence(seq):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    n, feq = 0, []
    assert increasing(seq), 'given sequence is not increasing'
    for i in range(seq[-1]+1):
        n += seq.count(i)
        feq.append(n)
    return feq
def lift(seq):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return list(map(lambda x, y: x + y, seq, list(range(1, len(seq)+1))))
def complementary_sequences(seq):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(seq), 'given sequence is not increasing'
    return (lift(seq), lift(frequency_sequence(seq)))
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( return_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Ke Zhang/complementaire-reeksen.py"",""fullName"":""Ke Zhang"",""id"":""7546"",""status"":""correct"",""submissionID"":""6423405"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:56:39.000Z"",""labels"":""keuz""}"
635,/home/maxiem/Downloads/files/Lennert Dewulf/complementaire-reeksen.py,"def stijgend(lijst):
    index = 0
    while index < len(lijst):
        if lijst[index] <= lijst[index + 1]:
            index += 1
            if index == len(lijst) - 1:
                return True
        else:
            return False


def frequentiereeks(lijst):
    slijst = stijgend(lijst)
    if slijst == False:
        assert False, 'gegeven reeks is niet stijgend'
    nlijst = []

    for i in range(1, int(lijst[-1] + 2)):
        x = 0
        for element in lijst:
            if element < i:
                x += 1
        nlijst.append(x)
    return nlijst


def verhogen(lijst):
    nlijst = []
    w = 1
    for i in lijst:
        nlijst.append(i+w)
        w+=1
    return nlijst

def complementaire_reeksen(lijst):
    tuple = ()
    rlijst = frequentiereeks(lijst)
    tuple += verhogen(lijst), verhogen(rlijst)
    return tuple



",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( formal_parameters ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( sequence_expression ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Lennert Dewulf/complementaire-reeksen.py"",""fullName"":""Lennert Dewulf"",""id"":""11697"",""status"":""correct"",""submissionID"":""6365141"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T14:32:27.000Z"",""labels"":""bcbt""}"
636,/home/maxiem/Downloads/files/Anouk Van genechten/complementaire-reeksen.py,"def increasing(sequence):

    """"""
    returns a Boolean value (bool) that indicates if the integers in the
    given sequence are increasing. Duplicates are allowed.

    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    # return frequency == sorted(frequency)

    for index in range(len(sequence) - 1):
        if sequence[index] > sequence[index + 1]:
            return False

    return True


def frequency_sequence(sequence):

    """"""
    Returns a new list containing the integers (int) in the frequency
    sequence of the given sequence. In case the given sequence is not
    increasing, the function must raise an AssertionError with the
    message given sequence is not increasing.

    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(sequence), 'given sequence is not increasing'

    frequency = []
    count = 0

    for index in range(sequence[-1] + 1):
        count += sequence.count(index)
        frequency.append(count)

    return frequency


def lift(sequence):

    """"""
    Returns a new list containing the integers (int) of the given sequence
    that have been increased according to their position in the sequence
    — that is, 1 added to the first integer in the given sequence, 2 to the
    second integer, and so on.

    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    lift = []
    for index in range(len(sequence)):
        lift.append(sequence[index] + index + 1)

    return lift


def complementary_sequences(sequence):

    """"""
    returns a tuple. The first element of the tuple is a new list containing
    the integers (int) of the given sequence that have been increased according
    to their position in the sequence. The second element of the tuple is a new
    list containing the integers (int) in the frequency sequence of the given
    sequence that have been increased according to their position in the sequence.
    In case the given sequence is not increasing, the function must raise an
    AssertionError with the message given sequence is not increasing.

    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    return lift(sequence), lift(frequency_sequence(sequence))


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ) ( return_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Anouk Van genechten/complementaire-reeksen.py"",""fullName"":""Anouk Van genechten"",""id"":""11710"",""status"":""correct"",""submissionID"":""6343935"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T11:06:59.000Z"",""labels"":""keuz""}"
637,/home/maxiem/Downloads/files/Wim Devis/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return bool(list(reeks) == sorted(list(reeks)))


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks) is True:
        raise AssertionError('gegeven reeks is niet stijgend')

    finale_lijst = list()
    for i in range(list(reeks)[-1]+1):
        aantal = 0
        for index, element in enumerate(list(reeks)):
            if element <= i:
                aantal += 1
        finale_lijst.append(aantal)
    return finale_lijst


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    finale = list()
    for index, element in enumerate(reeks):
        finale.append(element + index + 1)
    return finale


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks) is True:
        raise AssertionError('gegeven reeks is niet stijgend')

    reeks_1 = list(verhogen(reeks))
    reeks_2 = list(verhogen(frequentiereeks(reeks)))

    return reeks_1, reeks_2

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Wim Devis/complementaire-reeksen.py"",""fullName"":""Wim Devis"",""id"":""8106"",""status"":""correct"",""submissionID"":""6325681"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-07T11:52:47.000Z"",""labels"":""fyss""}"
638,/home/maxiem/Downloads/files/Lieselot Bruneel/complementaire-reeksen.py,"def stijgend(getallenreeks):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    # input kan zowel een lijst of tuple zijn
    # dus je kan de input niet wijzigen (als het een tuple is)
    # False als geen stijgende reeks
    for i in range(len(getallenreeks) - 1):
        if getallenreeks[i + 1] - getallenreeks[i] < 0:
            return False
    # True als wel stijgende reeks
    return True

def frequentiereeks(getallenreeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    # eerst nagaan of de ingegeven getallenreeks stijgend is
    assert stijgend(getallenreeks), 'gegeven reeks is niet stijgend'

    # frequentiereeks: hoeveel getallen van de reeks zijn kleiner dan 1, 2, 3, ...
    # tot grootste getal van de getallenreeks
    frequentiereeks = []
    for kleinerdan in range(1, max(getallenreeks)+2):
        aantal = 0
        for i in range(kleinerdan):
            aantal += getallenreeks.count(i)
        frequentiereeks.append(aantal)
    return frequentiereeks

def verhogen(reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    verhoogmet = 1
    verhoogde_reeks = []
    for getal in reeks:
        getal += verhoogmet
        verhoogde_reeks.append(getal)
        verhoogmet += 1

    return verhoogde_reeks

def complementaire_reeksen(getallenreeks):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    # moet een tuple teruggeven met 2 lijsten
    # eerste lijst: getallenreeks verhoogd met postitie in de reeks
    # tweede lijst: frequentiereeks verhoogd met postie in de frequentiereeks

    #return verhoogde_reeks, verhoogde_frequentiereeks
    return verhogen(getallenreeks), verhogen(frequentiereeks(getallenreeks))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Lieselot Bruneel/complementaire-reeksen.py"",""fullName"":""Lieselot Bruneel"",""id"":""11716"",""status"":""correct"",""submissionID"":""6385375"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T15:14:27.000Z"",""labels"":""stat""}"
639,/home/maxiem/Downloads/files/Nathan Franck/complementaire-reeksen.py,"def stijgend(reeks):
    for ind in range(len(reeks)-1):
        if reeks[ind] > reeks[ind + 1]:
            return False
    return True

def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    ans = []
    for num in range(max(reeks) + 1):
        count = 0
        i = 0
        found = False
        while not found and i < len(reeks):
            if reeks[i] < num + 1:
                count += 1
            else:
                found = True
            i += 1
        ans.append(count)
    return ans


def verhogen(reeks):
    ans = []
    for ind in range(len(reeks)):
        num = (ind + 1) + reeks[ind]
        ans.append(num)
    return ans
def complementaire_reeksen(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    part1 = verhogen(reeks)
    part2 = verhogen(frequentiereeks(reeks))
    return part1,part2
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Nathan Franck/complementaire-reeksen.py"",""fullName"":""Nathan Franck"",""id"":""11718"",""status"":""correct"",""submissionID"":""6340128"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:24:24.000Z"",""labels"":""stat""}"
640,/home/maxiem/Downloads/files/Izaak Van Evercooren/complementaire-reeksen.py,"def stijgend(serie):
    """"""
    The purpose of the function is to check whether the numbers of a user given list are in increasing order.
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(1, len(serie)):
        if serie[i] < serie[i-1]:
            return False

    return True


def frequentiereeks(serie):
    """"""
    The purpose of this function is to generate a frequency serie for a user given serie or to give an assertion error
    if the numbers of the user given serie are not in ascending order.
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(serie), ""gegeven reeks is niet stijgend""

    # Initialise the number to which the numbers of the serie will be compared when creating the frequency plot.
    comparing_number = 1

    # Initialise variable where we will store the absolute frequency of the list numbers which are lower than the
    # number to which they are compared.
    absolute_frequency = 0

    # Initialise frequency serie.
    frequency_serie = list()

    for number in serie:
        frequency_serie = frequency_serie + [absolute_frequency] * (number - comparing_number + 1)
        absolute_frequency += 1
        comparing_number += (number - comparing_number + 1)

    frequency_serie += [absolute_frequency]

    return frequency_serie


def verhogen(serie):
    """"""
    # This function generates a new list based on a user given list by increasing each number in the list with its
    corresponding position.
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return [i + serie[i] + 1 for i in range(len(serie))]


def complementaire_reeksen(serie):
    """"""
    This function generates two complementary series based on a user given serie and puts it in a tuple.
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return_tuple = (verhogen(serie), verhogen(frequentiereeks(serie)))
    return return_tuple


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( this ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ) ( identifier ) ) ( expression_statement ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( binary_expression ( call_expression ( number ) ( ERROR ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Izaak Van Evercooren/complementaire-reeksen.py"",""fullName"":""Izaak Van Evercooren"",""id"":""6017"",""status"":""correct"",""submissionID"":""6340064"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:18:32.000Z"",""labels"":""stat""}"
641,/home/maxiem/Downloads/files/Marie Dumoulin/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    controle_lijst = []
    vorige_cijfer = reeks[0]
    for cijfer in reeks[1:]:
        if cijfer >= vorige_cijfer:
            controle_lijst.append(True)
        else:
            controle_lijst.append(False)
        vorige_cijfer = cijfer

    if all(controle_lijst):
        return True
    else:
        return False

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    grootste_cijfer = reeks[0]
    for cijfer in reeks:
        if cijfer > grootste_cijfer:
            grootste_cijfer = cijfer
    i = 1
    frequentielijst = []
    while len(frequentielijst) <= grootste_cijfer:
        getal = 0
        for cijfer in reeks:
            if cijfer < i:
                getal += 1
        frequentielijst.append(getal)
        i += 1

    return frequentielijst

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogde_reeks = []
    for index, cijfer in enumerate(reeks):
        verhoogde_reeks.append(index+1 + cijfer)

    return verhoogde_reeks

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    verhoogde_reeks = verhogen(reeks)
    assert stijgend(verhoogde_reeks), 'gegeven reeks is niet stijgend'
    frequentie_lijst = frequentiereeks(reeks)
    verhoogde_frequentiereeks = verhogen(frequentie_lijst)

    return (verhoogde_reeks,verhoogde_frequentiereeks)",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Marie Dumoulin/complementaire-reeksen.py"",""fullName"":""Marie Dumoulin"",""id"":""8353"",""status"":""correct"",""submissionID"":""6348323"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T17:11:36.000Z"",""labels"":""bcbt""}"
642,/home/maxiem/Downloads/files/Laurens De Greve/complementaire-reeksen.py,"def stijgend(reeks):
    lengte_reeks=len(reeks)
    hulp=0
    for i in range(len(reeks)-1):
        if reeks[i+1]<reeks[i]:
            hulp=hulp+1

    return True if hulp==0 else False



def frequentiereeks(reeks):
    assert (stijgend(reeks)), ""gegeven reeks is niet stijgend""
    frequentiereeks=[]
    lengte_reeks=len(reeks)
    for i in range(reeks[lengte_reeks-1]+1):
        var=0
        for j in range(lengte_reeks):
            if reeks[j]<i+1:
                var+=1
        frequentiereeks.append(var)
    return(frequentiereeks)

def verhogen(reeks):
    verhoogde_reeks=[]
    lengte_reeks=len(reeks)
    for i in range (lengte_reeks):
        element=reeks[i]+(i+1)
        verhoogde_reeks.append(element)
    return(verhoogde_reeks)
def complementaire_reeksen(reeks):
    frequentiereeks_test=frequentiereeks(reeks)
    verhoogde_frequentiereeks=verhogen(frequentiereeks_test)
    

    return verhogen(reeks),verhoogde_frequentiereeks
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( number ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( number ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ),"{""filename"":""Laurens De Greve/complementaire-reeksen.py"",""fullName"":""Laurens De Greve"",""id"":""11736"",""status"":""correct"",""submissionID"":""6350169"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T23:28:36.000Z"",""labels"":""keuz""}"
643,/home/maxiem/Downloads/files/Judit Dierickx/complementaire-reeksen.py,"def stijgend(reeks): #verander in lijst
    lijst = list(reeks)
    lijst.sort()
    if lijst == list(reeks):
        return True
    else:
        return False

def frequentiereeks(reeks):
    k=1
    telling = 0
    lijst = []
    if not stijgend(reeks):
        assert (stijgend(reeks)),""gegeven reeks is niet stijgend""
    else:
        for k in range(1,list(reeks)[-1]+2):
            for i in list(reeks) : 
                if i < k : 
                    telling += 1
            lijst.append(telling)
            telling = 0
        return lijst

def verhogen(reeks): # maak loop en tel altijd getal van loop op bij positie
    lijst = list(reeks)
    nieuwelijst = []
    k = 1
    for i in lijst:
        element = i + k
        nieuwelijst.append(element)
        k += 1
    return nieuwelijst

def complementaire_reeksen(reeks): #vind frequentiereeks en verhoog beide reeksen
    if not stijgend(reeks):
        assert (stijgend(reeks)),""gegeven reeks is niet stijgend""
    else:
        frequentie = frequentiereeks(reeks)
        return verhogen(reeks), verhogen(frequentie)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ),"{""filename"":""Judit Dierickx/complementaire-reeksen.py"",""fullName"":""Judit Dierickx"",""id"":""11749"",""status"":""correct"",""submissionID"":""6394602"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T17:07:07.000Z"",""labels"":""fyss""}"
644,/home/maxiem/Downloads/files/Silke Castelein/complementaire-reeksen.py,"def stijgend(priemgetallen):
    priemgetallen = list(priemgetallen)
    x = 0
    while x < len(priemgetallen)-1:
        if priemgetallen[x] <= priemgetallen[x+1]: 
            x += 1
        else: return False
    return True
    
    
def frequentiereeks(priemgetallen):
    if stijgend(priemgetallen) == True:
        frequenties = []
        x = 0
        aantal = 0
        for getal in priemgetallen: 
            while x < getal:
                x += 1
                frequenties.append(aantal)
            aantal += 1
        frequenties.append(aantal)
        return frequenties
    assert stijgend(priemgetallen), 'gegeven reeks is niet stijgend'
        
def verhogen(priemgetallen):
    x = 1
    verhoogd = []
    for getal in priemgetallen:
        verhoogd.append(getal + x)
        x += 1
    return verhoogd
    
#  Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen met de boodschap gegeven reeks is niet stijgend.
def complementaire_reeksen(priemgetallen):
    reeks1 = verhogen(priemgetallen)
    reeks2 = verhogen(frequentiereeks(priemgetallen))
    nieuwe_reeks = []
    som = nieuwe_reeks.append(reeks1)
    som = nieuwe_reeks.append(reeks2)
    assert stijgend(priemgetallen), 'gegeven reeks is niet stijgend'
    return tuple(nieuwe_reeks)
    
    ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( array ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Silke Castelein/complementaire-reeksen.py"",""fullName"":""Silke Castelein"",""id"":""7996"",""status"":""correct"",""submissionID"":""6372677"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T11:04:39.000Z"",""labels"":""bcbt""}"
645,/home/maxiem/Downloads/files/Julie Amez/complementaire-reeksen.py,"def stijgend(reeks):

    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    lengte = len(reeks) - 1
    #controleren of het opeenvolgende getal telkens groter/gelijk aan is dan het getal ervoor
    return all(reeks[i] <= reeks[i + 1] for i in range(lengte))

def frequentiereeks(reeks):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    #als de gegeven reeks niet stijgend is, assertion error
    #assertion error via ASSERT gevolgd door hetgeen het niet zal zijn, gevolgd door message
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    #frequentiereeks is een lijst (met het AANTAL getallen waarvan de waarde telkens strikt kleiner is dan het echte getal),
    # waarde de getallen van 0 tot ... telkens overlopen en vergeleken met het eerstvolgende getal waaraan het kleiner is (of niet),
    # aantal is dan de som van het aantal waarden dat telkens kleiner is dan het eerstvolgende getal
    frequentiereeks, waarde, aantal = [], 0, 0

    for getal in reeks:
        while waarde < getal:
            frequentiereeks.append(aantal)
            waarde += 1
        aantal += 1

    #laatste getal in de frequentiereeks geeft aan hoeveel getallen in de gegeven reeks zaten
    #aantal is hier ondertussen totaal aantal
    frequentiereeks.append(aantal)

    return frequentiereeks

def verhogen(reeks):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    #elk element in de lijst wordt verhoogd overeenkomstig met de waarde van hun positie
    # eerste getal + 1, tweede getal + 2, etc..
    return [element + positie + 1 for element, positie in enumerate(reeks)]

def complementaire_reeksen(reeks):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    #als de gegeven reeks niet stijgend is, assertion error
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    #tuple met eerste lijst de verhoogde(reeks) lijst, en tweede lijst de frequentiereeks(reeks)
    # waarvan ook elk element weer verhoogd werd met zn positie
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( member_expression ( identifier ) ( ERROR ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Julie Amez/complementaire-reeksen.py"",""fullName"":""Julie Amez"",""id"":""11756"",""status"":""correct"",""submissionID"":""6325400"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-07T11:16:46.000Z"",""labels"":""bcbt""}"
646,/home/maxiem/Downloads/files/Denzel Van Gucht/complementaire-reeksen.py,"def stijgend(reeks):
    i = 0
    x = 1
    while i != len(reeks) - 1:
        if reeks[i] < reeks[i+1] or reeks[i] == reeks[i+1]:
            x += 1
        i += 1
    return bool(x == len(reeks))

def frequentiereeks(reeks):
    if not stijgend(reeks):
        assert False, ""gegeven reeks is niet stijgend""
    f = []
    for i in range(1, int(reeks[-1] + 2)):
        x = 0
        for a in reeks:
            if a < i:
                x += 1
        f.append(x)
    return f

def verhogen(reeks):
    i = 0
    a = 1
    nieuwe_reeks = []
    while a != len(reeks) + 1:
        x = str(reeks[i] + a)
        nieuwe_reeks += x.split()
        i += 1
        a += 1
    nieuwe_reeks = [int(element) for element in nieuwe_reeks]
    return nieuwe_reeks

def complementaire_reeksen(reeks):
    x = verhogen(reeks)
    y = frequentiereeks(reeks)
    z = verhogen(y)
    if not stijgend(reeks):
        assert False, ""gegeven reeks is niet stijgend""
    return x, z",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Denzel Van Gucht/complementaire-reeksen.py"",""fullName"":""Denzel Van Gucht"",""id"":""8302"",""status"":""correct"",""submissionID"":""6398154"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T08:38:17.000Z"",""labels"":""chem""}"
647,/home/maxiem/Downloads/files/Emma Bekaert/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    Nagaan of lijst stijgend is (dubbels mogen voorkomen).
    :param lijst: lijst of tuple met een paar getallen
    :return: boolean: True of False
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    i = 0
    boolean = True
    while i != len(lijst) - 1 and boolean is not False:
        if lijst[i] <= lijst[i + 1]:
            boolean = True
        else:
            boolean = False
        i += 1
    return boolean

def frequentiereeks(lijst):
    """"""
    Eerst moeten we kijken of de lijst stijgend is,
    zoja: frequentiereeks berekenen: aantal getal kleiner dan 0, 1, 2, ..., grootste getal in lijst + 1
    zonee: assertionError met 'reeks is niet stijgend'
    :param lijst:
    :return: frequentielijst of assertionError
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""

    eindgetal = lijst[-1] + 1
    frequentiereeks = [0] * eindgetal
    for i in range(0, eindgetal):
        for n in lijst:
            if i >= n:
                frequentiereeks[i] += 1
    return frequentiereeks

def verhogen(lijst):
    """"""
    Tel bij elke term respectievelijk 1, 2, 3, 4, 5, ... op
    :param lijst:
    :return:
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    erbij = 1
    lijst_verh = []
    for i in lijst:
        lijst_verh.append(i + erbij)
        erbij += 1
    return lijst_verh

def complementaire_reeksen(lijst):
    """"""

    :param lijst: als niet stijgend assertionerror
    :return: tuple met 1: een nieuwe verhoogde lijst, 2: een nieuwe frequentiereeks
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    eindgetal = lijst[-1] + 1
    lijst_volg = [] #deze lijst wordt de lijst, maar met nullen als het niet voorkomt in de lijst
    #bv 2,3,7,10 wordt 0,0,2,3,0,0,0,7,0,0,10
    complemlijst = []
    for nummer in range(0, eindgetal):
        lijst_volg.append(nummer)
        complemlijst.append(frequentiereeks(lijst)[nummer] + lijst_volg[nummer] + 1)

    tuple = (verhogen(lijst), complemlijst)
    return tuple



if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( string ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ( number ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ) ( return_statement ( ERROR ) ( binary_expression ( binary_expression ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( ERROR ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Emma Bekaert/complementaire-reeksen.py"",""fullName"":""Emma Bekaert"",""id"":""11767"",""status"":""correct"",""submissionID"":""6338922"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T14:33:16.000Z"",""labels"":""geog""}"
648,/home/maxiem/Downloads/files/Marit Eyckmans/complementaire-reeksen.py,"def stijgend(reeks):
    return bool(tuple(sorted(reeks)) == tuple(reeks))

def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    m = reeks[-1]
    nieuwe_reeks = []
    for i in range(1, m + 2):
        f = 0
        for a in range(len(reeks)):
            if reeks[a] < i:
                f += 1
        nieuwe_reeks.append(f)
    return nieuwe_reeks

def verhogen(reeks):
    reeks = list(reeks)
    for index, waarde in enumerate(reeks):
        reeks[index] = waarde + index + 1
    return reeks

def complementaire_reeksen(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    eerste_lijst = verhogen(reeks)
    tweede_lijst = verhogen(frequentiereeks(reeks))
    return eerste_lijst, tweede_lijst",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Marit Eyckmans/complementaire-reeksen.py"",""fullName"":""Marit Eyckmans"",""id"":""11769"",""status"":""correct"",""submissionID"":""6392954"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T14:51:01.000Z"",""labels"":""fyss""}"
649,/home/maxiem/Downloads/files/Nathalia Busschodts/complementaire-reeksen.py,"def stijgend(list_or_tuple):
    index = 1
    while list_or_tuple[index - 1] <= list_or_tuple[index]:
        index += 1
        if index == len(list_or_tuple):
            return True
    return False


def frequentiereeks(list_or_tuple):
    if stijgend(list_or_tuple) is not True:
        raise AssertionError('gegeven reeks is niet stijgend')

    freq_reeks = []
    for i in range(1, list_or_tuple[-1] + 2):
        reeks = 0                           # aantal getallen kleiner dan de i
        n = 0                               # het aantal waarden in list_or_tuple
        waarde = list_or_tuple[n]           # de waarde op positie n
        while waarde < i and n < (len(list_or_tuple) - 1):
            reeks += 1
            n += 1
            waarde = list_or_tuple[n]
        freq_reeks.append(reeks)

    freq_reeks[-1] += 1
    return freq_reeks


def verhogen(list_or_tuple):
    nieuwe_reeks = []
    for i, getal in enumerate(list_or_tuple):
        nieuwe_reeks.append(getal + i + 1)
    return nieuwe_reeks


def complementaire_reeksen(list_or_tuple):
    freq_reeks = frequentiereeks(list_or_tuple)
    freq_reeks_verh = verhogen(freq_reeks)
    return verhogen(list_or_tuple), freq_reeks_verh
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ),"{""filename"":""Nathalia Busschodts/complementaire-reeksen.py"",""fullName"":""Nathalia Busschodts"",""id"":""11771"",""status"":""correct"",""submissionID"":""6356208"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T19:01:26.000Z"",""labels"":""bcbt""}"
650,/home/maxiem/Downloads/files/Oliver Mechthold/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    lijst = list(lijst)
    if lijst == sorted(lijst):
        y = True
    else:
        y = False
    return y

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'
    count = 0
    totaal = ''
    lengte_nieuw = int(lijst[-1])

    for i in range(lengte_nieuw+1):
        for character in lijst:
            if character <= i:
                count += 1
        totaal += str(count) + ' '
        count = 0
    totaal = totaal[:-1]
    totaal = list(totaal.split())
    totaal = list(map(int,totaal))
    return totaal


def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    y = 1
    totaal = ''
    for character in lijst:
        getal = character + y
        totaal += str(getal) + ' '
        y += 1
    totaal = totaal[:-1]
    totaal = list(totaal.split())
    totaal = list(map(int, totaal))
    return totaal

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    tussenstap = frequentiereeks(lijst)
    reeks1 = verhogen(lijst)
    reeks2 = verhogen(tussenstap)
    return (reeks1, reeks2)



if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Oliver Mechthold/complementaire-reeksen.py"",""fullName"":""Oliver Mechthold"",""id"":""11778"",""status"":""correct"",""submissionID"":""6340533"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T17:12:57.000Z"",""labels"":""keuz""}"
651,/home/maxiem/Downloads/files/Karen Leers/complementaire-reeksen.py,"def increasing(seq):
    #transform seq to a list because list != touple
    bool = (list(seq) == sorted(seq))
    return bool

def frequency_sequence(seq):
    assert increasing(seq) == True, 'given sequence is not increasing'
    n = seq[-1]+1
    freq_seq = []
    count = 0
    #count + amount times i-1 is present in the list
    for i in range(n):
        count += seq.count(i)
        freq_seq.append(count)
    return freq_seq

def lift(seq):
    n = len(seq)
    lifted_seq = []
    #add to each number of list it's position -> in lifted_seq
    for i in range(n):
        lifted_seq.append(seq[i]+i+1)
    return lifted_seq

def complementary_sequences(seq):
    lifted_seq = lift(seq)
    freq_seq = frequency_sequence(seq)
    lifted_freq_seq = lift(freq_seq)
    return lifted_seq, lifted_freq_seq
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Karen Leers/complementaire-reeksen.py"",""fullName"":""Karen Leers"",""id"":""11779"",""status"":""correct"",""submissionID"":""6395015"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T17:46:24.000Z"",""labels"":""biol""}"
652,/home/maxiem/Downloads/files/Viktor Van Baeveghem/complementaire-reeksen.py,"

#https://www.geeksforgeeks.org/python-check-if-list-is-strictly-increasing/
def stijgend(p):
    p = list(p)
    import itertools
    import operator
    res = all(itertools.starmap(operator.le,zip(p, p[1:])))
    return res

def geef_kleiner(lijst,getal):
    nummer = 0
    for x in lijst:
        if x <= getal:
            nummer += 1
        if x > getal:
            return nummer
    return nummer

def frequentiereeks(p):
 if stijgend(p) == False:
     raise AssertionError('gegeven reeks is niet stijgend')
 laatste_getal = p[-1]
 laatste_getal += 1
 lijst = []
 for x in range(laatste_getal):
     lijst.append(geef_kleiner(p,x))
 return lijst



def verhogen(p):
    p = list(p)
    v = []
    for inx, elements in enumerate(p, start = 1):
        v.append(inx + elements)

    return (v)

def complementaire_reeksen(p):
  a = verhogen(p)
  b = frequentiereeks(p)
  c = verhogen(b)
  return (a,c)

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( import ) ( ERROR ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Viktor Van Baeveghem/complementaire-reeksen.py"",""fullName"":""Viktor Van Baeveghem"",""id"":""11782"",""status"":""correct"",""submissionID"":""6400766"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T12:36:20.000Z"",""labels"":""chem""}"
653,/home/maxiem/Downloads/files/Arno Leroy/complementaire-reeksen.py,"

def increasing(list):
    """"""
    Checks wherether the list increases or not not strictly.

    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    for i in range(len(list)-1):
        if list[i] > list[i+1]:
            return False
    return True


def frequency_sequence(list):
    """"""
    Checks wherether the list increases or not not strictly.

    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    # First check if the sequence is increasing.
    assert increasing(list) == True, 'given sequence is not increasing'

    freq_seq = []
    m = list[-1]

    for i in range(1, m + 2):
        count = 0
        for element in list:
            if element < i:
                count += 1
        freq_seq.append(count)

    return freq_seq


def lift(sequence):
    """"""
    Checks wherether the list increases or not not strictly.

    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    sequence = list(sequence)

    for i in range(len(sequence)):
        sequence[i] += i + 1
    return sequence


def complementary_sequences(sequence):
    """"""
    Checks wherether the list increases or not not strictly.

    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    new_seq = lift(sequence)
    freq_new_seq = lift(frequency_sequence(sequence))
    return new_seq, freq_new_seq
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Arno Leroy/complementaire-reeksen.py"",""fullName"":""Arno Leroy"",""id"":""11783"",""status"":""correct"",""submissionID"":""6340189"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:31:38.000Z"",""labels"":""biol""}"
654,/home/maxiem/Downloads/files/Dries Coopman/complementaire-reeksen.py,"def stijgend(sequence):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False

    """"""

    for i in range(1, len(sequence)):
        if sequence[i - 1] > sequence[i]:
            return False

    return True


def frequentiereeks(sequence):
    """"""

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]

    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]

    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend

    """"""


    assert stijgend(sequence), ""gegeven reeks is niet stijgend""
    frequence_list = []
    count = 0

    for active_number in range(1, sequence[-1] + 2):
        count += sequence.count(active_number - 1)

        frequence_list.append(count)

    return frequence_list


def verhogen(sequence):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    if not stijgend(sequence):
        frequence = list(sequence) + [0]
    else:
        frequence = frequentiereeks(frequentiereeks(sequence))

    for i in range(1, len(frequence) + 1):
        frequence[i - 1] = frequence[i - 1] + i
    return frequence[:-1]

def complementaire_reeksen(sequence):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend

    """"""
    assert stijgend(sequence), ""gegeven reeks is niet stijgend""

    frequence = frequentiereeks(sequence)
    for i in range(1, len(frequence) + 1):
        frequence[i - 1] = frequence[i - 1] + i


    return verhogen(sequence), frequence

if __name__ == '__main__':
    import doctest

    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Dries Coopman/complementaire-reeksen.py"",""fullName"":""Dries Coopman"",""id"":""11784"",""status"":""correct"",""submissionID"":""6352506"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T11:49:49.000Z"",""labels"":""keuz""}"
655,/home/maxiem/Downloads/files/Lotte Brusselmans/complementaire-reeksen.py,"def stijgend(sequentiereeks):
    n = 0
    som = 0
    cijfer = sequentiereeks[n]
    lengte = len(sequentiereeks)

    while n <= (lengte - 2):
        cijfer1 = sequentiereeks[n]
        cijfer2 = sequentiereeks[n + 1]
        if cijfer1 <= cijfer2:
            n += 1
            statement = True
        else:
            n += 1
            statement = False
            break

    return statement


def frequentiereeks(sequentiereeks):
    if stijgend(sequentiereeks) != True:
        assert False, 'gegeven reeks is niet stijgend'
    frequentiereeks = []
    n = 0
    aantal = 0

    for i in sequentiereeks:
        while n < i:
            frequentiereeks.append(aantal)  # append voegt toe aan de voorziene lijst. zonder de getallen op te tellen
            # je krijgt dus 0,0,2,4 ipv bv 6.  Werk daarom dus niet met frequentiereeks += 1
            n += 1
        aantal += 1
    frequentiereeks.append(aantal)
    return frequentiereeks


def verhogen(sequentiereeks):
    frequentiereeks = []  # we zetten een lege list klaar waaraan we de integers zullen toevoegen
    for index, element in enumerate(
            sequentiereeks):  # index geeft de index in de string weer, terwijl enumerate het getal geeft
        nieuw_getal = element + index + 1  # element (het getal) gaat + index + 1, bv op positie 0 +1, positie 1 + 2...
        frequentiereeks.append(nieuw_getal)  # we voegen dit getal toe aan de lijst
        index += 1  # index + 1 opdat de loop zich herhaald

    return frequentiereeks


def complementaire_reeksen(sequentiereeks):
    if stijgend(sequentiereeks) != True:
        assert False, 'gegeven reeks is niet stijgend'
    
    verhoogd = verhogen(sequentiereeks) #we verhogen de sequentiereeks

    frequentielijst = verhogen(frequentiereeks(sequentiereeks)) #we nemen de frequentie van de sequentiereeks en verhogen deze
    return verhoogd, frequentielijst




",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( break_statement ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( number ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( ERROR ( number ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( array_pattern ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( number ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( identifier ) ) ) ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( binary_expression ( number ) ( number ) ) ( ERROR ( call_expression ( member_expression ( member_expression ( identifier ) ( ERROR ( number ) ( number ) ) ( property_identifier ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Lotte Brusselmans/complementaire-reeksen.py"",""fullName"":""Lotte Brusselmans"",""id"":""11786"",""status"":""correct"",""submissionID"":""6349665"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T20:47:50.000Z"",""labels"":""bcbt""}"
656,/home/maxiem/Downloads/files/Jitske Verheecke/complementaire-reeksen.py,"def stijgend(getallen):
    i=0
    for i2 in list(getallen[i+1:]):
        if int(i2)>=int(getallen[i]):
            i+=1
        else:
            return False
    return True

def frequentiereeks(getallen):
    assert stijgend(getallen) is True, 'gegeven reeks is niet stijgend'
    teruggegevengetallen=[]
    aantal=getallen[-1]
    for i in range(aantal+1):
        teller=0
        for i2 in getallen:
            if i+1 > i2:
                teller+=1
        teruggegevengetallen.append(teller)

    return teruggegevengetallen

def verhogen(getallen):
    nieuwelijst=[]
    for i in range(len(getallen)):
        nieuwgetal=int(getallen[i])+(i)+1
        nieuwelijst.append(nieuwgetal)
    return nieuwelijst

def complementaire_reeksen(getallen):
    reeks1=verhogen(getallen)
    nieuwgetallen=[]
    fr=frequentiereeks(getallen)
    aantal=getallen[-1]
    for i in range(aantal+1):
        nieuwgetallen.append(i)
    som=[]
    for i2 in range(len(fr)):
        som.append(int(fr[i2]+nieuwgetallen[i2]+1))
    return (reeks1,som)

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( parenthesized_expression ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Jitske Verheecke/complementaire-reeksen.py"",""fullName"":""Jitske Verheecke"",""id"":""11787"",""status"":""correct"",""submissionID"":""6420684"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T16:54:40.000Z"",""labels"":""fyss""}"
657,/home/maxiem/Downloads/files/Robbe Cool/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    if sorted(lijst) == list(lijst):
        return True
    else:
        return False
        
def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    lijst = list(lijst)
    lijst2 = []
    aantal = 0
    for x in range(lijst[-1]+1):
        aantal *= 0
        for cijfer in lijst:
            if cijfer <= x:
                aantal += 1
        lijst2.append(aantal)
    return lijst2
def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = list(lijst)
    lijst1 = []
    for index, getal in enumerate(lijst):
        lijst1.append(index+getal+1)
    return lijst1
    
def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    lijst2 = []
    tijdelijk = list(frequentiereeks(lijst))
    for index, getal in enumerate(tijdelijk):
        lijst2.append(index+getal+1) 
    lijst1 = verhogen(lijst)
    return lijst1, lijst2
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Robbe Cool/complementaire-reeksen.py"",""fullName"":""Robbe Cool"",""id"":""11789"",""status"":""correct"",""submissionID"":""6340208"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:34:15.000Z"",""labels"":""biol""}"
658,/home/maxiem/Downloads/files/Robbe Vandenbroucke/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    vorig_getal = 0

    for getal in reeks:
        if getal < vorig_getal:
            return False
        vorig_getal = getal
    return True


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    proceed = stijgend(reeks)
    assert proceed, 'gegeven reeks is niet stijgend'

    freq = []

    for a in range(reeks[-1] + 1):
        z = 0
        for n in range(len(reeks)):
            if reeks[n] <= a:
                z += 1
        freq += [z]

    return freq


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    verhoog = []

    for n, getal in enumerate(reeks):
        verhoog += [getal + n +1]

    return verhoog


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    proceed = stijgend(reeks)
    assert proceed, 'gegeven reeks is niet stijgend'

    return verhogen(reeks), verhogen(frequentiereeks(reeks))
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Robbe Vandenbroucke/complementaire-reeksen.py"",""fullName"":""Robbe Vandenbroucke"",""id"":""11794"",""status"":""correct"",""submissionID"":""6334688"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T16:01:21.000Z"",""labels"":""keuz""}"
659,/home/maxiem/Downloads/files/Wout Houbart/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    i = 0
    gevonden = True
    while i != len(reeks)-1 and gevonden == True:
        karakter = reeks[i]
        index = reeks.index(karakter)
        if karakter <= reeks[index + 1]:
            gevonden = True
            i += 1
        else:
            gevonden = False
    if gevonden == True: return True
    return False

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend

    """"""
    voorwaarde = stijgend(reeks)
    if voorwaarde == False:
        assert False, 'gegeven reeks is niet stijgend'
    else:
        som = 0
        i = 1
        freq_reeks = []
        for _ in range(int(reeks[-1])+1):
            som = 0
            for karakter in reeks:
                if karakter < i:
                    som += 1
            i += 1
            freq_reeks.append(som)
        return freq_reeks

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    i = 1
    verhoogd = []
    for karakter in reeks:
        verhoogd.append(int(karakter) + i)
        i += 1
    return verhoogd

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    voorwaarde = stijgend(reeks)
    if voorwaarde == False:
        assert False, 'gegeven reeks is niet stijgend'
    else:
        verhoogd_1 = verhogen(reeks)
        freq_reeks = frequentiereeks(reeks)
        verhoogd_2 = verhogen(freq_reeks)
        return verhoogd_1, verhoogd_2

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Wout Houbart/complementaire-reeksen.py"",""fullName"":""Wout Houbart"",""id"":""11796"",""status"":""correct"",""submissionID"":""6336068"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T20:53:08.000Z"",""labels"":""bcbt""}"
660,/home/maxiem/Downloads/files/Ruben Kalfsvel/complementaire-reeksen.py,"""""""
>>> stijgend([2, 3, 5, 7, 11, 13])
True
>>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
True
>>> stijgend([5, 3, 2, 7, 8, 1, 9])
False
>>> frequentiereeks([2, 3, 5, 7, 11, 13])
[0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
>>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[2, 3, 5, 7, 11, 13, 14]
>>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend
>>> verhogen([2, 3, 5, 7, 11, 13])
[3, 5, 8, 11, 16, 19]
>>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
>>> verhogen([5, 3, 2, 7, 8, 1, 9])
[6, 5, 5, 11, 13, 7, 16]
>>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
>>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
>>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend
""""""


def stijgend(lijst):
    lijst = list(lijst)
    return all(lijst[i] >= lijst[i - 1] for i in range(1, len(lijst)))


def frequentiereeks(lijst):
    lijst = list(lijst)
    if not stijgend(lijst):
        raise AssertionError('gegeven reeks is niet stijgend')
    flijst = []
    for i in range(1, max(lijst) + 1):
        teller = 0
        for j in lijst:
            if j < i:
                teller += 1
        flijst.append(teller)
    flijst.append(len(lijst))
    return flijst


def verhogen(lijst):
    lijst = list(lijst)
    lijst = [item + i + 1 for i, item in enumerate(lijst)]
    return lijst


def complementaire_reeksen(lijst):
    lijst = list(lijst)
    if not stijgend(lijst):
        raise AssertionError('gegeven reeks is niet stijgend')
    return verhogen(lijst), verhogen(frequentiereeks(lijst))


if __name__ == '__main__':
    import doctest

    doctest.testmod()
",( program ( ERROR ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Ruben Kalfsvel/complementaire-reeksen.py"",""fullName"":""Ruben Kalfsvel"",""id"":""8274"",""status"":""correct"",""submissionID"":""6378277"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:43:13.000Z"",""labels"":""fyss""}"
661,/home/maxiem/Downloads/files/Laure-Ines Lebon/complementaire-reeksen.py,"# stijgend
def stijgend(getallen):
    if tuple(getallen) != tuple(sorted(getallen)):
        return False
    return True

# frequentiereeks
def frequentiereeks(reeks):
    # functie AssertionError
    assert stijgend(reeks) is True, 'gegeven reeks is niet stijgend'
    
    aantal = int(reeks[-1]) + 1
    lijst = []

    for i in range(aantal):
        x = 0
        for j in range(len(reeks)):
            if reeks[j] < i + 1:
                x += 1
        lijst.append(x)
        x = 0
    return lijst

# verhogen
def verhogen(getallen):
    getallen = list(getallen)
    x = []
    positie = 1

    for i in getallen:
        term = i + positie
        x.append(term)
        positie += 1
    return x

# complementaire reeksen
def complementaire_reeksen(getallen):
    # functie AssertionError
    assert stijgend(getallen) is True, 'gegeven reeks is niet stijgend'

    verhoging = verhogen(getallen)
    lijst = []
    for i in range(1, verhoging[-1] + 2):
        if i not in verhoging:
            lijst.append(i)

    return verhoging, lijst",( program ( ERROR ( ERROR ) ( expression_statement ( identifier ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Laure-Ines Lebon/complementaire-reeksen.py"",""fullName"":""Laure-Ines Lebon"",""id"":""11795"",""status"":""correct"",""submissionID"":""6423789"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T20:27:21.000Z"",""labels"":""bcbt""}"
662,/home/maxiem/Downloads/files/Ayla Van Damme/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(reeks):

    for i in range(1, len(reeks)):
        if not reeks[i-1] <= reeks[i]:
            return False
    i += 1

    return True

def frequentiereeks(reeks):

    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    f = 0       #frequentiereeks
    i = 0
    fr =[]

    for c in range(1,reeks[-1]+1):        # voor een cijfer van 1 tot het hoogste cijfer van de reeks
        while c > reeks[i]:
            f += 1
            i += 1
        fr.append(f)
    fr.append(len(reeks))                   # lengte van de reeks toevoegen want anders laatste niet gechecked
    return fr

def verhogen(reeks):

    nieuwe_lijst = []

    for c in range(1, len(reeks)+1):
        nieuwe_lijst.append(reeks[c-1] + c)

    return nieuwe_lijst

def complementaire_reeksen(reeks):

    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    reeks2 = frequentiereeks(reeks)
    eind = (verhogen(reeks), verhogen(reeks2))

    return eind
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Ayla Van Damme/complementaire-reeksen.py"",""fullName"":""Ayla Van Damme"",""id"":""11799"",""status"":""correct"",""submissionID"":""6379861"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T18:21:45.000Z"",""labels"":""bcbt""}"
663,/home/maxiem/Downloads/files/Julie Vandenberghe/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    gesorteerde_reeks = sorted(reeks)
    if list(reeks) == gesorteerde_reeks: # lijst maken van reeks, want sorted maakt er ook een lijst van
        return True
    else:
        return False

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    getal = 1
    frequentiereeks = []
    positie = 0
    aantal = 0
    for i in range(reeks[-1]):
        while reeks[positie] < getal:
            aantal += 1
            positie += 1
        frequentiereeks.append(aantal)
        getal += 1
    frequentiereeks.append(len(reeks))
    assert (stijgend(reeks) == True), ""gegeven reeks is niet stijgend""
    return frequentiereeks

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    nieuwe_lijst = []
    for i in range(len(reeks)):
        nieuw_getal = reeks[i] + i + 1
        nieuwe_lijst.append(nieuw_getal)
    return nieuwe_lijst

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    verhoogde_reeks = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    verhoogde_frequentiereeks = verhogen(frequentie)
    return verhoogde_reeks, verhoogde_frequentiereeks",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Julie Vandenberghe/complementaire-reeksen.py"",""fullName"":""Julie Vandenberghe"",""id"":""11804"",""status"":""correct"",""submissionID"":""6344367"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T12:21:46.000Z"",""labels"":""keuz""}"
664,/home/maxiem/Downloads/files/Warre Missiaen/complementaire-reeksen.py,"def stijgend(x):
    y = len(x)
    for i in range(1,y):
        if x[i] >= x[i-1]:
            q = True
        else:
            return False
    return q

def frequentiereeks(x):
    q = len(x)
    z = x[q-1]
    amount = []
    count = 0
    assert stijgend(x) == True, 'gegeven reeks is niet stijgend'
    for i in range(1,z+2):
        for t in x:
            if t < i:
                count +=1
            else:
                count += 0
        amount.append(count)
        count = 0
    return amount

def verhogen(x):
    x = list(x)
    for i in range(0,len(x)):
        x[i] = x[i] + i+1
    return x
def complementaire_reeksen(x):
    assert stijgend(x) == True, 'gegeven reeks is niet stijgend'
    if stijgend(x) == True:
        y = verhogen(x)
        x = (y,verhogen(frequentiereeks(x)))

    return x


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Warre Missiaen/complementaire-reeksen.py"",""fullName"":""Warre Missiaen"",""id"":""11807"",""status"":""correct"",""submissionID"":""6379146"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T16:49:24.000Z"",""labels"":""fyss""}"
665,/home/maxiem/Downloads/files/Sien De Neve/complementaire-reeksen.py,"def stijgend(reeks):
    a = reeks[0]
    for cijfer in reeks[1:]:
        if cijfer >= a:
            a = cijfer
        else:
            return False
    return True
        
def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    c = 0
    n = list()
    for cijfer1 in range(reeks[-1] + 1):
        for cijfer2 in reeks:
            if cijfer1 >= cijfer2:
                c += 1
        n.append(c)
        c = 0
    return n
            
def verhogen(reeks):
    reeks = list(reeks)
    for index, getal in enumerate(reeks):
        karakter2 = getal + int(index) + 1
        reeks[index] = karakter2
    return reeks
def complementaire_reeksen(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    verhoog = verhogen(reeks)
    freqverh = verhogen(frequentiereeks(reeks))
    
    
    return (verhoog, freqverh)
    
    
    
    
    
    
    
    ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Sien De Neve/complementaire-reeksen.py"",""fullName"":""Sien De Neve"",""id"":""7986"",""status"":""correct"",""submissionID"":""6232583"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-02T14:13:53.000Z"",""labels"":""chem""}"
666,/home/maxiem/Downloads/files/Lisa Trenson/complementaire-reeksen.py,"def stijgend(reeks):
    reeks = list(reeks)
    gesorteerd = sorted(reeks)
    if gesorteerd == reeks:
        return True
    else:
        return False

def frequentiereeks(reeks):
    frequentiereeks = []
    gesorteerd = stijgend(reeks)
    if gesorteerd == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        for getal in range(1, reeks[-1]+2):
            waarde_frequentiereeks = 0
            for cijfer in reeks:
                if cijfer < getal:
                    waarde_frequentiereeks += 1
            frequentiereeks.append(waarde_frequentiereeks) 
    return frequentiereeks
    
def verhogen(reeks):
    index = 1
    getal = 0
    nieuwe_reeks = []
    while len(nieuwe_reeks) != len(reeks):
        nieuwe_reeks.append(reeks[getal] + index)
        index += 1
        getal += 1
    return nieuwe_reeks

def complementaire_reeksen(reeks):
    gesorteerd = stijgend(reeks)
    if gesorteerd == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        deel1 = verhogen(reeks)
        deel2 = frequentiereeks(reeks)
        deel3 = verhogen(deel2)
    return list(deel1), list(deel3)
        
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ),"{""filename"":""Lisa Trenson/complementaire-reeksen.py"",""fullName"":""Lisa Trenson"",""id"":""11813"",""status"":""correct"",""submissionID"":""6382396"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T09:50:57.000Z"",""labels"":""bcbt""}"
667,/home/maxiem/Downloads/files/Rune Lagaisse/complementaire-reeksen.py,"def increasing(list):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return all(i <= j for i, j in zip(list, list[1:])) # source https://www.geeksforgeeks.org/python-check-if-list-is-strictly-increasing/

def frequency_sequence(list):
    
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(list), 'given sequence is not increasing'
    
    count = 0
    frequency_list = []  # initialization
    for i in range(list[-1] + 1):
        count += list.count(i)
        frequency_list.append(count)
        
    return frequency_list
    
def lift(list):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    count = 1  # initialization
    lifted_list = []
    for i in list:
        lift = i + count
        lifted_list.append(lift)
        count += 1
        
    return lifted_list
    
def complementary_sequences(list):
    
    """"""
    
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(list), 'given sequence is not increasing'

    return lift(list), lift(frequency_sequence(list))
        
if __name__ == '__main__':
    import doctest
    doctest.testmod()
        ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( comment ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( array_pattern ) ( ERROR ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Rune Lagaisse/complementaire-reeksen.py"",""fullName"":""Rune Lagaisse"",""id"":""11818"",""status"":""correct"",""submissionID"":""6367464"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T17:29:14.000Z"",""labels"":""biol""}"
668,/home/maxiem/Downloads/files/Luna Vanden Eede/complementaire-reeksen.py,"def stijgend(reeks):
    
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    
    # controleer of voor elk paar opeenvolgende getallen geldt dat het eerste
    # getal niet groter is dan het tweede getal
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))
    
def frequentiereeks(reeks):
        
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    
    # nagaan of gegeven reeks stijgend is
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    
    freq, waarde, aantal = [], 0, 0
    for getal in reeks:
        
        # op dit moment geeft ""aantal"" aan hoeveel getallen uit de reeks strikt
        # kleiner zijn dan het huidige ""getal"" in de reeks
        while waarde < getal:
            freq.append(aantal)
            waarde += 1
        aantal += 1
    
    # we moeten nog aangeven hoeveel getallen in de reeks kleiner of gelijk zijn
    # aan het laatste getal in de reeks (dit zijn alle getallen in de reeks)
    freq.append(aantal)
    
    # frequentiereeks teruggeven
    return freq

def verhogen(reeks):
    
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    
    # alle elementen van de reeks verhogen overeenkomstig hun positie
    return [element + positie + 1 for positie, element in enumerate(reeks)]

def complementaireReeksen(reeks):
    
    """"""
    >>> complementaireReeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaireReeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaireReeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    
    return verhogen(reeks), verhogen(frequentiereeks(reeks))

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Luna Vanden Eede/complementaire-reeksen.py"",""fullName"":""Luna Vanden Eede"",""id"":""11826"",""status"":""runtime error"",""submissionID"":""6319468"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-06T16:41:30.000Z"",""labels"":""geog""}"
669,/home/maxiem/Downloads/files/Wout Bogaert/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
# functie stijgend uitschrijven
def stijgend(reeks_getallen):
    """"""
    Geeft een booleaanse waarde terug die aangeeft of de ingegeven reeks
    van getallen (een tuple of list) al dan niet stijgend is.

    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    # Getal per getal in de lijst of tuple afgaan en kijken
    # of het groter of kleiner is dan het vorige.
    # Indien kleiner dan vorig is de reeks niet stijgend dus False
    vorige_getal = 0    # beginnen van 0 want reeks bestaat enkel uit positieve getallen
    for i in reeks_getallen:
        if i < vorige_getal:
            return False
        vorige_getal = i

    return True

# functie frequentiereeks uitschrijven
def frequentiereeks(reeks_getallen):
    """"""
    Geeft een nieuwe lijst getallen terug van de frequentiereeks
    van de ingegeven reeks getallen.

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    # een assertionerror geven wnr de reeks niet stijgend is
    assert stijgend(reeks_getallen), 'gegeven reeks is niet stijgend'

    # Van 1 tot m +1 afgaan en tellen hoeveel getallen kleiner zijn dan dit bepaald getal
    Frequentiereeks = []
    for index in range(1, reeks_getallen[-1] + 2): # + 2 want men moet m + 1 hebben
        aantal_kleiner = 0
        for getal in reeks_getallen:
            # kijken of getal uit reeks_getallen kleiner is dan index
            if getal < index:
                aantal_kleiner += 1 # getal is kleiner
        Frequentiereeks.append(aantal_kleiner)

    return Frequentiereeks

# functie verhogen uitschrijven
def verhogen(reeks_getallen):
    """"""
    Geeft een nieuwe lijst terug die de getallen bevat van de gegeven reeks
    maar telkens verhoogd overeenkomstig hun positie in de gegeven reeks.

    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    # verhoog elk getal met zijn index + 1 want python telt vanaf 0 en wij vanaf 1
    verhoogde_lijst = []
    for index in range(1, len(reeks_getallen) + 1):
        # Let op, de lijst verandert wel degelijk ook al stellen we het nergens aan gelijk
        verhoogde_lijst.append(reeks_getallen[index - 1] + index)

    return verhoogde_lijst

# functie complementaire_reeksen uitschrijven
def complementaire_reeksen(reeks_getallen):
    """"""
    Geeft een tuple terug waarvan het eerste element een nieuwe lijst is
    met de getallen van de gegeven reeks die verhoogd werden
    overeenkomstig hun positie in de reeks.

    Het tweede element van de tuple is een nieuwe lijst met
    de frequentiereeks van de gegeven reeks waarvan de getallen
    verhoogd werden overeenkomstig hun positie in de reeks.

    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    # Eerst maken we een verhoogde reeks van de gegeven getallen
    verhoogde_reeks = verhogen(reeks_getallen)
    
    # Als tweede maken we een frequentielijst
    frequentie_reeks = frequentiereeks(reeks_getallen)
    
    # We verhogen de frequentie_reeks
    frequentie_reeks_verhoogd = verhogen(frequentie_reeks)
    
    # Tuple maken met deze 2 reeksen en teruggeven
    return (verhoogde_reeks, frequentie_reeks_verhoogd)

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( member_expression ( identifier ) ( property_identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Wout Bogaert/complementaire-reeksen.py"",""fullName"":""Wout Bogaert"",""id"":""11827"",""status"":""correct"",""submissionID"":""6394558"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T17:04:12.000Z"",""labels"":""fyss""}"
670,/home/maxiem/Downloads/files/Wannes Soenen/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(len(reeks)- 1):
        if reeks[i] > reeks[i + 1]:
            return False
    return True


if_name_ = '_Main_'
import doctest

doctest.testmod()


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    getal = []
    for i in range(len(reeks)):
        while len(getal) != reeks[i]:
            getal.append(i)
#getal is nu elk cijfer behalve, dat is altijd 1 getal, dat gelijk is aan getal[-1]+1
    getal.append(len(reeks))
    return list(getal)
def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = list(lijst)
    for i in range(len(lijst)):
        getal = lijst[i]
        getal = getal + 1 + i
        lijst[i] = getal
    return lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    ret = verhogen(lijst)
    antwoord = []
    antwoord.append(ret)
    antwoord.append(verhogen(frequentiereeks(lijst)))
    return tuple(antwoord)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( import ) ( ERROR ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Wannes Soenen/complementaire-reeksen.py"",""fullName"":""Wannes Soenen"",""id"":""11828"",""status"":""correct"",""submissionID"":""6339034"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T14:42:33.000Z"",""labels"":""chem""}"
671,/home/maxiem/Downloads/files/Nathan Tops/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >> > stijgend([2, 3, 5, 7, 11, 13])
    True
    >> > stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >> > stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    teller = 0
    for i in range(len(reeks)-1):
        if reeks[i] <= reeks[i+1]:
            teller += 1
        else:
            return False
    return True

def frequentiereeks(reeks):
    """"""
    >> > frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >> > frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >> > frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    aantal = int(reeks[-1]) + 1
    lijst = []
    for i in range(0, aantal):
        teller = 0
        for a in range(len(reeks)):
            if reeks[a] < i+1:
                teller += 1
        lijst.append(teller)
        teller = 0
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    return lijst

def verhogen(reeks):
    """"""
    >> > verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >> > verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >> > verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    reeks = list(reeks)
    teller = 1
    for a in range(len(reeks)):
        reeks[a] = int(reeks[a]) + teller
        teller += 1
    return reeks

def complementaire_reeksen(reeks):
    """"""
    >> > complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >> > complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >> > complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    tuple1 = verhogen(reeks)
    tuple2 = verhogen(frequentiereeks((reeks)))
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    return (tuple1, tuple2)


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Nathan Tops/complementaire-reeksen.py"",""fullName"":""Nathan Tops"",""id"":""11803"",""status"":""correct"",""submissionID"":""6355831"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T18:01:42.000Z"",""labels"":""bcbt""}"
672,/home/maxiem/Downloads/files/Marie Schoenmakers/complementaire-reeksen.py,"def stijgend(lijst):
    for i in range(len(lijst) - 1):
        if lijst[i] <= lijst[i + 1]:
            statement = True
        else:
            return False
    return statement


def frequentiereeks(lijst):
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    hoogste_getal = lijst[-1] + 1
    waarde = 1
    nieuwe_lijst = []
    for b in range(0, hoogste_getal):
        aantal_kleiner = 0
        for i in lijst:
            if i < waarde:
                aantal_kleiner += 1
        nieuwe_lijst.append(aantal_kleiner)
        waarde += 1
    return nieuwe_lijst


def verhogen(lijst):
    nieuwe_lijst = []
    optellen = 1
    for i in lijst:
        i += optellen
        nieuwe_lijst.append(i)
        optellen += 1
    return nieuwe_lijst
    

def complementaire_reeksen(lijst):
    eerste = verhogen(lijst)
    tweede = frequentiereeks(lijst)
    derde = verhogen(tweede)
    return (eerste, derde)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Marie Schoenmakers/complementaire-reeksen.py"",""fullName"":""Marie Schoenmakers"",""id"":""11832"",""status"":""correct"",""submissionID"":""6368807"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T20:08:05.000Z"",""labels"":""chem""}"
673,/home/maxiem/Downloads/files/Cedric Thierens/complementaire-reeksen.py,"def increasing(lijst):
    n = 0
    for i in range(len(lijst) - 1):
        if lijst[i] <= lijst[i + 1]:
            n += 1
        else:
            return False
    return True


def frequency_sequence(reeks):
    nummer = int(reeks[-1]+1)
    freq = []
    for i in range(0, nummer):
        teller = 0
        for n in range(len(reeks)):
            if reeks[n] < i + 1:
                teller += 1
        freq.append(teller)
        teller = 0
    assert increasing(reeks), 'given sequence is not increasing'
    return freq


def lift(reeks):
    lijst = []
    for i in range(len(reeks)):
        lijst.append(reeks[i]+ i+1)
    return lijst


def complementary_sequences(reeks):
    assert increasing(reeks), 'given sequence is not increasing'

    return lift(reeks), lift(frequency_sequence(reeks))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Cedric Thierens/complementaire-reeksen.py"",""fullName"":""Cedric Thierens"",""id"":""11833"",""status"":""correct"",""submissionID"":""6415280"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T13:33:13.000Z"",""labels"":""bcbt""}"
674,/home/maxiem/Downloads/files/Jens Cousin/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(lijst):
    hoogste = 0
    for getal in lijst:
        if getal < hoogste:
            return False
        hoogste = getal
    return True


def frequentiereeks(lijst):
    freqlijst = []
    i = 0
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""

    for tel in range(lijst[-1] + 1):
        tel += 1
        for getal in lijst:
            if getal < tel:
                i += 1
        freqlijst.append(i)
        i = 0
    return freqlijst


def verhogen(lijst):
    i = 1
    if isinstance(lijst, tuple):
        lijst = list(lijst)

    for getal in lijst:
        lijst[i - 1] = getal + i
        i += 1
    nieuwe_lijst = lijst
    return nieuwe_lijst


def complementaire_reeksen(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""

    el2 = frequentiereeks(lijst)
    el2 = verhogen(el2)
    el1 = verhogen(lijst)

    return el1, el2


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Jens Cousin/complementaire-reeksen.py"",""fullName"":""Jens Cousin"",""id"":""11838"",""status"":""correct"",""submissionID"":""6412660"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T10:39:29.000Z"",""labels"":""fyss""}"
675,/home/maxiem/Downloads/files/Isaline Rubens/complementaire-reeksen.py,"def stijgend(lijst):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    stijgende_lijst = True
    l = len(lijst)

    for i in range(1, l):
        if lijst[i] < lijst[i-1]:
            stijgende_lijst = False

    return stijgende_lijst

def frequentiereeks(lijst):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    frequentiereeks_lijst = []
    is_lijst_stijgend = stijgend(lijst)

    for i in range(1, int(lijst[-1]+2)):
        frequentiereeks_getal = 0
        for getal in lijst:
            if getal < i:
                frequentiereeks_getal += 1
        frequentiereeks_lijst += [frequentiereeks_getal]

    if is_lijst_stijgend is not True:
        raise AssertionError(""gegeven reeks is niet stijgend"")

    if is_lijst_stijgend is True:
        return frequentiereeks_lijst


def verhogen(lijst):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    index = 1
    verhoogde_lijst = []
    l = len(lijst)

    for i in range(0, l):
        getal_verhoogd = lijst[i] + index
        index += 1
        verhoogde_lijst += [getal_verhoogd]

    return verhoogde_lijst

def complementaire_reeksen(lijst):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    is_lijst_stijgend = stijgend(lijst)
    verhoogde_lijst = verhogen(lijst)
    frequentiereeks_lijst = frequentiereeks(lijst)

    frequentiereeks_verhoogd = verhogen(frequentiereeks_lijst)

    if is_lijst_stijgend is not True:
        raise AssertionError(""gegeven reeks is niet stijgend"")

    if is_lijst_stijgend is True:
        return verhoogde_lijst, frequentiereeks_verhoogd

if __name__ == '__main__':
    import doctest
    doctest.testmod()
    ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Isaline Rubens/complementaire-reeksen.py"",""fullName"":""Isaline Rubens"",""id"":""11843"",""status"":""correct"",""submissionID"":""6352918"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T12:47:29.000Z"",""labels"":""bcbt""}"
676,/home/maxiem/Downloads/files/Taebin Han/complementaire-reeksen.py,"def increasing(sequence):

    """"""
    A function increasing that returns a Boolean value (bool)
    that indicates if the integers in the given sequence are increasing.
    Duplicates are allowed
    (in other words: you don't have to check if the sequence is strictly increasing).

    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    index = 1
    for element in sequence[:-1]:
        if element > sequence[index]:
            return False
        index += 1
    return True

def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    # count every element <= index
    def count(sequence,b):
        c = 0
        for element in sequence:
            if element <= b:
                c += 1
        return c

    assert increasing(sequence)==True, 'given sequence is not increasing'
    List_frequency = []
    for index in range(sequence[-1]+1):
        List_frequency.append(count(sequence,index)) #add to list
    return List_frequency

def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]

    """"""
    Lifted_list = []
    index = 1
    for element in sequence:
        Lifted_list.append(element+index)
        index += 1
    return Lifted_list

def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence)==True, 'given sequence is not increasing'
    return(lift(sequence),lift(frequency_sequence(sequence)))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Taebin Han/complementaire-reeksen.py"",""fullName"":""Taebin Han"",""id"":""11845"",""status"":""correct"",""submissionID"":""6392016"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T13:40:34.000Z"",""labels"":""keuz""}"
677,/home/maxiem/Downloads/files/Elke Lycke/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    Returns if the sequence contains increasing values

    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    former_element = 0
    for element in sequence:
        if element < former_element:
            return False
        else:
            former_element = element
    return True

def frequency_sequence(sequence):
    """"""
    Returns the frequency sequence of the sequence
    How many number are smaller than 1, 2, ..., n+1?

    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence), ""given sequence is not increasing""
    max_index = sequence[-1] + 1
    sublist = []               # A list of all the elements under the treshold
    endlist = []               # A list filled with all the sublists

    for index in range(0, max_index):   # Creating sublists containing all number under the threshold
        for element in sequence:
            if element <= index:
                sublist.append(element)
        endlist.append(sublist)         # Adding all sublists to 1 big list
        sublist = []

    result = []
    for element in endlist:             # The length of each list represents the amount of numbers under the treshold
        result.append(len(element))

    return result

def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    result = []
    for index, element in enumerate(sequence):
        new = element + index + 1
        result.append(new)

    return result

def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence), ""given sequence is not increasing""

    lift_seq = lift(sequence)
    frequency = frequency_sequence(sequence)
    lift_frequency = lift(frequency)

    return lift_seq, lift_frequency

# The holy grail
if __name__ == '__main__':
    import doctest
    doctest.testmod()
    ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( number ) ( sequence_expression ( number ) ( ERROR ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Elke Lycke/complementaire-reeksen.py"",""fullName"":""Elke Lycke"",""id"":""707"",""status"":""correct"",""submissionID"":""6360551"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T12:53:53.000Z"",""labels"":""biol""}"
678,/home/maxiem/Downloads/files/Matthijs Van Hooste/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks_getallen):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False

    """"""
    reeks_getallen = list(reeks_getallen)
    Bool = True
    i = 1
    while i < len(reeks_getallen):
        if reeks_getallen[i-1] <= reeks_getallen[i]:
            i += 1
        else:
            Bool = False
            i+= 1
    return Bool
def frequentiereeks (reeks_getallen):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    reeks_getallen = list(reeks_getallen)

    len_reeks = reeks_getallen[-1] + 1
    frequentiereeks =[]
    index1 = 0
    index2 = 1

    for index1 in range(len_reeks):
        aantal_kleiner = 0
        for getal in reeks_getallen:
            if getal < index2:
                aantal_kleiner += 1
        frequentiereeks += [aantal_kleiner]
        index2 += 1
        index1 += 1
    assert stijgend(reeks_getallen) != False, ""gegeven reeks is niet stijgend""
    return frequentiereeks
def verhogen(reeks_getallen):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    getal = 1
    index = 0
    verhoogde_reeks = []
    for index in range(len(reeks_getallen)):
        verhoogde_reeks += [reeks_getallen[index] + getal]
        getal += 1
        index += 1
    return  verhoogde_reeks
def complementaire_reeksen(reeks_getallen):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    verhoogde_reeks, verhoogde_frequentiereeks = [verhogen(reeks_getallen),verhogen(frequentiereeks(reeks_getallen))]
    assert stijgend(reeks_getallen) != False, ""gegeven reeks is niet stijgend""
    return (verhoogde_reeks, verhoogde_frequentiereeks)




",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Matthijs Van Hooste/complementaire-reeksen.py"",""fullName"":""Matthijs Van Hooste"",""id"":""11854"",""status"":""correct"",""submissionID"":""6332391"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T11:11:33.000Z"",""labels"":""bcbt""}"
679,/home/maxiem/Downloads/files/Wout Kerkaert/complementaire-reeksen.py,"def stijgend(lijst):
    for i in range(0,len(lijst)-1):
        if lijst[i] > lijst[i+1]:
            return(False)
     
            
    return(True)

def frequentiereeks(lijst):
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'
    fqjes = []
    i = 0
    a = 0
    while i <=int(lijst[-1]):
        q= lijst.count(i)
        a = a+q
        
        i = i+1
        fqjes.append(a)
        
    return(fqjes)
def verhogen(lijst):
    for i in range(0, len(lijst)):
        lijst = list(lijst)
        lijst[i] = int(lijst[i])+i+1
    return(lijst)
    
def complementaire_reeksen(lijst):
    lijstje = []
    lijstertje = []
    lijst  = list(lijst)
    lijstje = verhogen(lijst)

    kijstertje= frequentiereeks(lijst)
    lijstertje = verhogen(kijstertje)
    return(lijstje, lijstertje)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( identifier ) ) ( number ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Wout Kerkaert/complementaire-reeksen.py"",""fullName"":""Wout Kerkaert"",""id"":""11861"",""status"":""correct"",""submissionID"":""6209171"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-31T19:52:19.000Z"",""labels"":""keuz""}"
680,/home/maxiem/Downloads/files/Gilles Devloo/complementaire-reeksen.py,"def stijgend(reeks):
    return all(reeks[i] <= reeks[i + 1]for i in range(len(reeks)-1))
    
def frequentiereeks(reeks):
    boodschap = 'gegeven reeks is niet stijgend'
    assert stijgend(reeks), boodschap
    aantal, waarde = 0, 0
    frequentie = []
    for getal in reeks:
        while waarde < getal:
            frequentie.append(aantal)
            waarde += 1
        aantal += 1
    frequentie.append(aantal)

    return frequentie
    
def verhogen(reeks):
    return [element + positie + 1 for positie, element in enumerate(reeks)]

def complementaire_reeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))





",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( number ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Gilles Devloo/complementaire-reeksen.py"",""fullName"":""Gilles Devloo"",""id"":""11871"",""status"":""correct"",""submissionID"":""6422152"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T18:31:29.000Z"",""labels"":""bcbt""}"
681,/home/maxiem/Downloads/files/Hanne De Lathauwer/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    """"""
>>> stijgend([2, 3, 5, 7, 11, 13])
True
>>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
True
>>> stijgend([5, 3, 2, 7, 8, 1, 9])
False
    """"""
    #controleer of gesorteerde tuple gelijk is aan reeks (en dus of reeks stijgend is)
    #zet lijst steeds op naar tuple om de sorted methode te kunnen toepassen
    gesorteerd=tuple(sorted(reeks))
    return gesorteerd==tuple(reeks)

def frequentiereeks(reeks):
    """"""
>>> frequentiereeks([2, 3, 5, 7, 11, 13])
[0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
>>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[2, 3, 5, 7, 11, 13, 14]
>>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend
    """"""
    #controleer of gegeven reeks stijgend is
    if  not stijgend(reeks):
        assert False, 'gegeven reeks is niet stijgend'
    lijst=[]
    reeks=tuple(reeks)
    #overloop alle getallen van 1 tot m+1 (waarbij m laatste/hoogste getal uit lijst is)

    for i in range(reeks[-1]+1):
        #stel bij elk nieuw getal (1,2,3,...) de count terug gelijk aan nul
        count=0
        #overloop elk getal in de reeks en kijk of het kleiner is dan 1,2,3,...m+1
        #als het kleiner is, tel eentje bij het totaal
        for getal in reeks:
            if getal<i+1:
                count+=1
        #na overlopen elk getal uit reeks, voeg het getelde aantal toe aan lijst
        lijst.append(count)
    return lijst

def verhogen(reeks):
    """"""
>>> verhogen([2, 3, 5, 7, 11, 13])
[3, 5, 8, 11, 16, 19]
>>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
>>> verhogen([5, 3, 2, 7, 8, 1, 9])
[6, 5, 5, 11, 13, 7, 16]""""""
    verhooggetal=1
    lijst=[]
    for getal in reeks:
        getal+=verhooggetal
        verhooggetal+=1
        lijst.append(getal)
    return lijst

def complementaire_reeksen(reeks):
    """"""
>>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
>>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
>>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend""""""
    if not stijgend(reeks):
        assert False, 'gegeven reeks is niet stijgend'

    verhoogd=verhogen(reeks)
    freq_verhoogd=verhogen(frequentiereeks(reeks))
    return verhoogd,freq_verhoogd

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( string ) ) ) ),"{""filename"":""Hanne De Lathauwer/complementaire-reeksen.py"",""fullName"":""Hanne De Lathauwer"",""id"":""11876"",""status"":""correct"",""submissionID"":""6350760"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T07:51:48.000Z"",""labels"":""geol""}"
682,/home/maxiem/Downloads/files/Lola Claeys/complementaire-reeksen.py,"def stijgend(getallen):

    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    getallen = list(getallen)
    stijgend = 0
    for i in getallen:
        if i == stijgend or i > stijgend:
            stijgend = i

        else:
            return False

    return True

def frequentiereeks(getallen):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    m = max(getallen)
    lenfreq = '0'
    i = 0
    aantal = 0
    freq = []

    if not stijgend(getallen):
        assert False, 'gegeven reeks is niet stijgend'

    else:
        while len(lenfreq) < m + 1:
            lenfreq += '0'

        for index, cijfer in enumerate(lenfreq):
            if index + 1 > getallen[i]:
                if getallen.count(getallen[i]) == 1:

                    aantal += 1
                    i += 1

                else:
                    aantal += getallen.count(getallen[i])
                    i += getallen.count(getallen[i])

            freq.append(aantal)

        return freq

def verhogen(getallen):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    verhoogt = []
    karakter = 0

    for index, cijfer in enumerate(getallen):
        karakter = cijfer + index + 1
        verhoogt.append(karakter)

    return verhoogt

def complementaire_reeksen(getallen):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    if not stijgend(getallen):
        assert False, 'gegeven reeks is niet stijgend'

    freqreeks = frequentiereeks(getallen)

    getallen = verhogen(getallen)

    freqreeks = verhogen(freqreeks)

    resultaat = (getallen, freqreeks)

    return resultaat


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Lola Claeys/complementaire-reeksen.py"",""fullName"":""Lola Claeys"",""id"":""11881"",""status"":""correct"",""submissionID"":""6391006"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T12:10:27.000Z"",""labels"":""geol""}"
683,/home/maxiem/Downloads/files/Hannah Broeckx/complementaire-reeksen.py,"def increasing(first_list):
    increase = False
    count = 1
    for index in range(len(first_list)):
        if first_list[index] >= first_list[index-1]:
            count += 1
    if count == len(first_list):
        increase = True
    return increase

def frequency_sequence(first_list):
    assert increasing(first_list), ""given sequence is not increasing""
    count = 0
    n = 1
    sequence_count = []
    # + 2 because we want the max + one and because range is open we do again + one to put it in the range
    for n in range(1,max(first_list)+2):
        for element in first_list:
            if element < n:
                count += 1
        sequence_count += [count]
        count = 0
        n +=1
    return sequence_count

def lift(first_list):
    lifted_sequence = []
    for index, element in enumerate(first_list):
        lifted_sequence += [element + (index + 1)]
    return lifted_sequence

def complementary_sequences(first_list):
    freq_sequence = frequency_sequence(first_list)
    lifted_frequency = lift(freq_sequence)
    lifted_sequence = lift(first_list)
    return (lifted_sequence, lifted_frequency)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( unary_expression ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( ERROR ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ),"{""filename"":""Hannah Broeckx/complementaire-reeksen.py"",""fullName"":""Hannah Broeckx"",""id"":""11884"",""status"":""correct"",""submissionID"":""6385545"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T15:33:54.000Z"",""labels"":""biol""}"
684,/home/maxiem/Downloads/files/Phaedra Hulstaert/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    This function will check if the sequence is increasing (not strictly).
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    short_sequence = sequence[:-1]
    position = 0
    for character in short_sequence:
        if character <= sequence[position + 1]:
            position += 1
        else:
            return False
    return True


def frequency_sequence(sequence):
    """"""
    This function will return a new list that contains how many integers
    are below a certain value.
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence) == True, ""given sequence is not increasing""
    list_with_sequences = []
    last_number = sequence[-1] + 2
    reference = list(range(1, last_number))
    counter = 0
    for character in reference:
        for number in sequence:
            if number < character:
                counter += 1
        list_with_sequences.append(counter)
        counter = 0
    return list_with_sequences


def lift(sequence):
    """"""
    This function add 1 to the first number of the sequence, 2 the the second
    and so on.
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    new_list = []
    additions = list(range(1, len(sequence) + 1))
    position = 0
    for character in sequence:
        new_character = character + additions[position]
        position += 1
        new_list.append(new_character)
    return new_list


def complementary_sequences(sequence):
    """"""
    This function will
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence) == True, ""given sequence is not increasing""
    first_part = lift(sequence)
    range_for_second_part = list(range(1, first_part[-1] + 2))
    second_part = []
    for character in range_for_second_part:
        if character not in first_part:
            second_part.append(character)
    return first_part, second_part


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( ERROR ( identifier ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ( identifier ) ) ) ( expression_statement ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( binary_expression ( call_expression ( number ) ( ERROR ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Phaedra Hulstaert/complementaire-reeksen.py"",""fullName"":""Phaedra Hulstaert"",""id"":""11886"",""status"":""correct"",""submissionID"":""6378420"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:52:10.000Z"",""labels"":""biol""}"
685,/home/maxiem/Downloads/files/Yana Titeca/complementaire-reeksen.py,"def stijgend(getallen):
    lijst = list(getallen)
    if lijst == sorted(lijst):
        return True
    else:
        return False

def frequentiereeks(getallen):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(getallen):
        raise AssertionError('gegeven reeks is niet stijgend')
    frequentie = []
    getallen = list(getallen)
    grootste = int(getallen[-1])
    for i in range (1, grootste + 2):
        start = 0
        lager = 0
        while start < len(getallen) and getallen[start]< i:
            lager += 1
            start += 1
        frequentie.append(lager)

    return frequentie

def verhogen(getallen):
    getallen = list(getallen)
    verhoogd = []
    for index , element in  enumerate(getallen):
        nieuwgetal = element + index + 1
        verhoogd.append(nieuwgetal)
    return verhoogd

def complementaire_reeksen(getallen):
    verhoogd = verhogen(getallen)
    freqverhoogd = verhogen(frequentiereeks(getallen))
    if not stijgend(getallen):
        raise AssertionError('gegeven reeks is niet stijgend')
    

    return verhoogd, freqverhoogd",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Yana Titeca/complementaire-reeksen.py"",""fullName"":""Yana Titeca"",""id"":""11882"",""status"":""correct"",""submissionID"":""6380560"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T19:53:05.000Z"",""labels"":""bcbt""}"
686,/home/maxiem/Downloads/files/Jana De Coster/complementaire-reeksen.py,"def increasing(seq):
    x = all((i <= j for i, j in zip(seq, seq[1:])))
    return x

def frequency_sequence(seq):
    x = all((i <= j for i, j in zip(seq, seq[1:])))
    assert x != False, ""given sequence is not increasing""

    if type(seq) == list:
        n = max(seq) + 1
        seq2 = []
        for i in range(n):
            j = sum(e < (i+1) for e in seq)
            seq2.append(j)
        return seq2

    if type(seq) == tuple:
        m = max(seq) +1
        seq2 = []
        for i in range(1, m+1):
            count = 0
            for e in seq:
                if i > e:
                    count += 1
            seq2.append(count)
        return seq2

def lift(seq):
    seq2 = []
    n = len(seq)
    for i in range(n):
        seq2.append(seq[i] + (i + 1))
    return seq2

def complementary_sequences(seq):
    x = all((i <= j for i, j in zip(seq, seq[1:])))
    assert x != False, ""given sequence is not increasing""

    x1 = lift(seq)
    x2 = frequency_sequence(seq)
    x3 = lift(x2)
    return (x1, x3)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Jana De Coster/complementaire-reeksen.py"",""fullName"":""Jana De Coster"",""id"":""9300"",""status"":""correct"",""submissionID"":""6337052"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T10:04:36.000Z"",""labels"":""keuz""}"
687,/home/maxiem/Downloads/files/Viktor Moortgat/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(1, len(lijst)):
        if lijst[i-1] > lijst[i]:
            return False

    return True


def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    maximum = max(lijst) + 1
    nieuwe_lijst = []

    for i in range(1, maximum + 1):
        count = 0
        for k in lijst:
            if i > k:
                count += 1
        nieuwe_lijst.append(count)

    return nieuwe_lijst


def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    nieuwe_lijst = []
    for i in range(1, len(lijst) + 1):
        nieuwe_lijst.append(lijst[i - 1] + i)

    return nieuwe_lijst


def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    verhoogd = verhogen(lijst)
    complement = verhogen(frequentiereeks(lijst))

    return verhoogd, complement


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Viktor Moortgat/complementaire-reeksen.py"",""fullName"":""Viktor Moortgat"",""id"":""11895"",""status"":""correct"",""submissionID"":""6332353"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T11:06:54.000Z"",""labels"":""stat""}"
688,/home/maxiem/Downloads/files/Charlotte Taelman/complementaire-reeksen.py,"def stijgend(reeks):

    if isinstance(reeks, tuple): # als het een tuple is
        reeks = list(reeks) # reeks van maken

    onveranderd = reeks[:]
    reeks.sort()

    if reeks == onveranderd:
        return True
    else:
        return False


def frequentiereeks(reeks): # het is sowieso een lijst

    # reeks moet stijgend zijn
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    # frequentiereeks maken
    m = max(reeks)
    # frequentiereeks mag maar m+1 lang zijn
    freqreeks = []
    for i in range(1, m+2):
        freq = 0
        for j in reeks:
            if j < i:
                freq += 1

        freqreeks += [freq]
        
    

    return freqreeks
    
    

def verhogen(reeks):

    verhoogde_reeks = []
    for index, cijfer in enumerate(reeks):
        cijfer += index + 1
        verhoogde_reeks.append(cijfer)
    return verhoogde_reeks
    
    
def complementaire_reeksen(reeks):
    
    freqreeks = frequentiereeks(reeks)
   
    return (verhogen(reeks), verhogen(freqreeks))
    
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ( binary_expression ( identifier ) ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( string ) ( ERROR ) ( identifier ) ( identifier ) ) ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( array ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( number ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( ERROR ( number ) ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Charlotte Taelman/complementaire-reeksen.py"",""fullName"":""Charlotte Taelman"",""id"":""11897"",""status"":""correct"",""submissionID"":""6339451"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T15:21:25.000Z"",""labels"":""biol""}"
689,/home/maxiem/Downloads/files/Roy Rijk/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    """"""
    >>> stijgend([1, 1, 3, 4, 5])
    True
    >>> stijgend([1, 2, 4, 3, 5])
    False
    """"""
    getallen = []
    reeks = list(reeks)
    for x in range(len(reeks) - 1):
        if reeks[x] <= reeks[x + 1]:
            getallen.insert(x, reeks[x])
        else:
            getallen = getallen
    for x in range(len(reeks) - 1, len(reeks)):
        if reeks[x] >= reeks[x - 1]:
            getallen.insert(x, reeks[x])
        else:
            getallen = getallen
    if getallen == reeks:
        return True
    else:
        return False

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    m = max(reeks)
    i = 0
    x = 0
    y = 0
    freq = []
    if stijgend(reeks) == True:
        while x <= m:
            if reeks[i] <= x:
                i += 1
                y += 1
                if i == len(reeks):
                    freq.insert(x, y)
                    return freq
            else:
                i = 0
                x += 1
                freq.insert(x, y)
                y = 0
        return freq
    else:
        assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoging = []
    for x in range(len(reeks)):
        verhoging.insert(x, reeks[x] + x + 1)
    return verhoging

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last): AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(reeks) == True:
        eerste = verhogen(frequentiereeks(reeks))
        tweede = verhogen(reeks)
        totaal = (tweede, eerste)
        return totaal
    else:
        assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Roy Rijk/complementaire-reeksen.py"",""fullName"":""Roy Rijk"",""id"":""11908"",""status"":""correct"",""submissionID"":""6372215"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:30:49.000Z"",""labels"":""geol""}"
690,/home/maxiem/Downloads/files/Wouter Depaepe/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    for index, number in enumerate(sequence[:-1]):
        if number > sequence[index + 1]:
            return False

    return True


def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(sequence), ""given sequence is not increasing""

    frequency = []
    check = 0
    for char in range(int(sequence[-1]) + 1):
        count = 0
        check += 1
        for number in sequence:
            if number < check:
                count += 1
        frequency.append(count)

    return frequency


def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    lifted = []
    for index, number in enumerate(sequence):
        lifted.append(number + index + 1)

    return lifted


def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    frequency = lift(frequency_sequence(sequence))
    sequence = lift(sequence)

    return sequence, frequency
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Wouter Depaepe/complementaire-reeksen.py"",""fullName"":""Wouter Depaepe"",""id"":""11910"",""status"":""correct"",""submissionID"":""6340845"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T17:57:47.000Z"",""labels"":""biol""}"
691,/home/maxiem/Downloads/files/Jan De Mey/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    # zet eerst input om in list, want sorted(tuple) returnt een list, dus ook al is tuple in volgorde,
    # is sorted(tuple) != tuple
    sequence_list = list(sequence)
    if sorted(sequence) == sequence_list:
        return True
    else:
        return False

def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence), 'given sequence is not increasing'

    frequency = []
    value = 0
    amount = 0
    for i in sequence:
        while value < i:
            frequency.append(amount)
            value += 1
        amount += 1
    frequency.append(amount)
    return frequency

def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lifted_sequence = []
    for index, element in enumerate(sequence):
        lifted_sequence.append(index + element + 1)
    return lifted_sequence

def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    return lift(sequence), lift(frequency_sequence(sequence))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jan De Mey/complementaire-reeksen.py"",""fullName"":""Jan De Mey"",""id"":""11020"",""status"":""correct"",""submissionID"":""6408999"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T21:31:53.000Z"",""labels"":""keuz""}"
692,/home/maxiem/Downloads/files/Tim Laebens/complementaire-reeksen.py,"def increasing(sequence):
    test = True
    for index in range(0, len(sequence)-1):
        if sequence[index+1] < sequence[index]:
            test = False
    return test


def frequency_sequence(sequence):
    int_list = []
    assert increasing(sequence), ""given sequence is not increasing""

    for number in range(1, sequence[-1]+2):
        count = len([index for index in sequence if index < number])
        int_list.append(count)
    return int_list


def lift(sequence):
    sequence = list(sequence)
    for number in range(0, len(sequence)):
        sequence[number] += int(number+1)
    return sequence


def complementary_sequences(sequence):
    return lift(sequence), lift(frequency_sequence(sequence))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Tim Laebens/complementaire-reeksen.py"",""fullName"":""Tim Laebens"",""id"":""11914"",""status"":""correct"",""submissionID"":""6348513"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T17:33:47.000Z"",""labels"":""biol""}"
693,/home/maxiem/Downloads/files/Sarah De Laet/complementaire-reeksen.py,"def stijgend(sequence):

    """"""
    Geeft met een booleaanse waarde aan of de getallen in de gegeven reeks al dan niet stijgend zijn.
    Daarbij is het wel toegelaten dat er dubbels voorkomen.
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    value = []
    for index, digit in enumerate(sequence[:-1]):
        if digit > sequence[index + 1]:
            value.append(False)
    return not bool(value)


def frequentiereeks(sequence):

    """"""
    Geeft een nieuwe lijst (list) terug met de getallen (int) van de frequentiereeks van de gegeven reeks.
    Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen met de boodschap
    'gegeven reeks is niet stijgend'.
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    # check stijgend met functie:
    assert (stijgend(sequence)), 'gegeven reeks is niet stijgend'
    m = sequence[-1]
    freq_reeks = []
    for number in range(m + 1):
        kleinerdan = 0
        for digit in sequence:
            if digit < number + 1:
                kleinerdan += 1
        freq_reeks.append(kleinerdan)
    return freq_reeks


def verhogen(sequence):

    """"""
    Geeft een nieuwe lijst (list) terug die de getallen (int) van de gegeven reeks bevat, maar telkens verhoogd
    overeenkomstig un positie in de gegeven reeks — dat is 1 opgeteld bij het eerste getal van de gegeven reeks,
    2 bij het tweede getal, enzovoort.
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    new = []
    for index, digit in enumerate(sequence):
        digit += index + 1
        new.append(digit)
    return new


def complementaire_reeksen(sequence):

    """"""
    Geeft een tuple terug. Het eerste element is een nieuwe lijst met de getallen van de gegeven reeks verhoogd
    overeenkomstig hun positie in de reeks. Het tweede element is een nieuwe lijst met de frequentiereeks van
    de gegeven reeks, waarvan de getallen verhoogd werden overeenkomstig hun positie in de reeks. Een assertion
    error wordt opgeworpen indien de gegeven reeks niet stijgend is.
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert (stijgend(sequence)), 'gegeven reeks is niet stijgend'
    element1 = verhogen(sequence)
    freq_reeks = frequentiereeks(sequence)
    element2 = verhogen(freq_reeks)
    return (element1, element2)


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( new_expression ( ERROR ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( new_expression ( ERROR ) ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( ERROR ( new_expression ( ERROR ( identifier ) ) ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Sarah De Laet/complementaire-reeksen.py"",""fullName"":""Sarah De Laet"",""id"":""11915"",""status"":""correct"",""submissionID"":""6370686"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T08:46:01.000Z"",""labels"":""stat""}"
694,/home/maxiem/Downloads/files/Aag Bogaert/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for index, getal in enumerate(reeks[:-1]):
        volgende = reeks[index + 1]
        if getal > volgende:
            return False
    return True

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks):
        assert False, 'gegeven reeks is niet stijgend'
    else:  # tellen in de reeks hoeveel getallen kleiner zijn dan 1,2...tot grootste_getal + 1
        reeks = list(reeks)
        grootste_getal = max(reeks)

        kleiner_dan = 0
        totaal = 0
        frequentie = []

        while kleiner_dan < grootste_getal + 1:
            totaal += reeks.count(kleiner_dan)
            frequentie.append(totaal)
            kleiner_dan += 1

        return frequentie

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    reeks = list(reeks)

    for positie, element in enumerate(reeks):
        reeks[positie] = element + positie + 1

    return reeks

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    if not stijgend(reeks):
        assert False, 'gegeven reeks is niet stijgend'
    else:
        return (verhogen(reeks), verhogen(frequentiereeks(reeks)))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Aag Bogaert/complementaire-reeksen.py"",""fullName"":""Aag Bogaert"",""id"":""11922"",""status"":""correct"",""submissionID"":""6372837"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T11:17:46.000Z"",""labels"":""geog""}"
695,/home/maxiem/Downloads/files/Antoine Anneessens/complementaire-reeksen.py,"def stijgend(tuple):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    c = 0
    lengte = len(tuple)
    for c in range(0, lengte-1):
        if tuple[c] <= tuple[c+1]:
            c += 1
            antwoord = True
        else:
            c += 1
            antwoord = False
            break
    return antwoord

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""

    m = max(lijst)
    nieuwelijst = []
    for waarde in range(1, m + 2):

        # bepaal aantal getallen dat kleiner is dan waarde
        aantal = 0
        for getal in lijst:
            if getal < waarde:
                aantal += 1

        # aantal toevoegen aan de lijst
        nieuwelijst.append(aantal)

    return nieuwelijst

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    c = 1
    nieuwe_lijst = []
    for element in lijst:
        nieuw_getal = element + c
        nieuwe_lijst.append(nieuw_getal)
        c += 1
    return nieuwe_lijst

def complementaire_reeksen(lijst):

    assert stijgend(lijst), ""gegeven reeks is niet stijgend""

    x = verhogen(lijst)
    y = frequentiereeks(lijst)
    y = verhogen(y)

    return (x, y)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( break_statement ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Antoine Anneessens/complementaire-reeksen.py"",""fullName"":""Antoine Anneessens"",""id"":""11934"",""status"":""correct"",""submissionID"":""6339010"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T14:40:20.000Z"",""labels"":""geog""}"
696,/home/maxiem/Downloads/files/Wannes De Beer/complementaire-reeksen.py,"def stijgend(getallen):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    for i in range(len(getallen)):
        if int(getallen[i]) <= int(getallen[i+1]):
            i += 1
            if i == (len(getallen)-1):
                return (True)
        else:
            return False

def frequentiereeks(getallen):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    getallen = list(getallen)
    len_getallen = getallen[-1] +1
    nieuwe_lijst = []
    index1 = 0
    index2 = 1
    for index1 in range(len_getallen):
        aantal_kleiner = 0
        for getal in getallen:
            if getal < index2:
                aantal_kleiner += 1
        nieuwe_lijst += [aantal_kleiner]
        index2 += 1
        index1 += 1
    assert stijgend(getallen) != False, ""gegeven reeks is niet stijgend""
    return nieuwe_lijst


def verhogen(getallen):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    index = 1
    getallen = list(getallen)
    lengte = len(getallen)
    for i in range(lengte):
        getallen[i] += index
        index += 1
        i += 1
    return getallen
def complementaire_reeksen(lijst1):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(lijst1) == False:
        assert stijgend(lijst1) != False, ""gegeven reeks is niet stijgend""
        return lijst1
    else:
        lijst2 = verhogen(lijst1)
        lijst3 = frequentiereeks(lijst1)
        lijst3 = verhogen(lijst3)
        return (lijst2, lijst3)

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Wannes De Beer/complementaire-reeksen.py"",""fullName"":""Wannes De Beer"",""id"":""11940"",""status"":""correct"",""submissionID"":""6352187"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T11:18:37.000Z"",""labels"":""bcbt""}"
697,/home/maxiem/Downloads/files/Roxanne Nouille/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    antwoord = True
    i = 0

    while i < (len(reeks) - 1):
        if reeks[i] > reeks[i + 1]:
            antwoord = False
        i += 1
    return antwoord


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    # DOCTEST ZAL ALTIJD FOUT ZIJN JOEPIE
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    lijst = []
    lengte = reeks[-1] + 1
    for i in range(1, lengte + 1):
        telling = 0
        for cijfer in reeks:
            if cijfer < i:
                telling += 1
        lijst.append(telling)

    return lijst

def verhogen(reeks):
    lijst = []
    i = 0
    for karakter in reeks:
        i += 1
        nieuw_karakter = karakter + i
        lijst.append(nieuw_karakter)
    return lijst

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    freq = frequentiereeks(reeks)
    return (verhogen(reeks), verhogen(freq))


if __name__ == ""__main__"":
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Roxanne Nouille/complementaire-reeksen.py"",""fullName"":""Roxanne Nouille"",""id"":""11933"",""status"":""correct"",""submissionID"":""6349435"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T20:01:11.000Z"",""labels"":""bcbt""}"
698,/home/maxiem/Downloads/files/Gil Glorieus/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    vorig = 0
    for element in reeks:
        if element < vorig:
            return False
        vorig = element
    return True


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    frequentie = []
    aantal = 0
    for cijfer in range(reeks[-1] + 1):
        aantal += reeks.count(cijfer)
        frequentie.append(aantal)
    return frequentie


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = []
    for index, getal in enumerate(reeks):
        lijst.append(index + getal + 1)
    return lijst


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Gil Glorieus/complementaire-reeksen.py"",""fullName"":""Gil Glorieus"",""id"":""11948"",""status"":""correct"",""submissionID"":""6339508"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T15:27:09.000Z"",""labels"":""geog""}"
699,/home/maxiem/Downloads/files/Cédric De Smet/complementaire-reeksen.py,"def stijgend(pn):#pn is de bewuste cijferreeks waarvoor we zullen nagaan of de getallen erin stijgend zijn (niet strikt, dus dubbels mogen, zie @)
    i = 0
    l = len(pn)
    while i != l-1:
        if i == 0:
            pass
        else:
            if pn[i] >= pn[i-1] and pn[i] <= pn[i+1]: #@
                pass
            else:
                return False
        i += 1
    if i == l-1:
        return True

def frequentiereeks(pn): #Deze geeft de frequentiereeks (als lijst) van pn weer of een Assertionerror indien de getallen in pn niet stijgend zijn
    waarofvals = stijgend(pn)
    if waarofvals == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        reeks = list()
        i = 1
        while i != pn[-1] + 2:
            n = 0

            for cijfer in pn:
                if cijfer < i:
                    n += 1
            reeks.append(n)
            i += 1
        return reeks

def verhogen(pn): #We tellen bij elk cijfer zijn index op. Let wel, de indexering wordt beschouwd als zijnde beginnend bij nul dus +1
    verhoogd = []
    i = 0
    l = len(pn)
    while i != l:
        n = i + 1 + pn[i]
        verhoogd.append(n)
        i += 1
    return verhoogd

def complementaire_reeksen(pn):
    waarofvals = stijgend(pn)
    if waarofvals == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        verhoogd = verhogen(pn)
        verhoogdfrequentie = verhogen(frequentiereeks(pn))
        return (verhoogd, verhoogdfrequentie)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ( identifier ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( member_expression ( identifier ) ( property_identifier ) ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Cédric De Smet/complementaire-reeksen.py"",""fullName"":""Cédric De Smet"",""id"":""11928"",""status"":""correct"",""submissionID"":""6339169"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T14:56:52.000Z"",""labels"":""bcbt""}"
700,/home/maxiem/Downloads/files/Juliet Steffen/complementaire-reeksen.py,"def stijgend(reeks):
    for i in range(1, len(reeks)):
        if reeks[i] < reeks[i - 1]:
            return False
    return True
    
def frequentiereeks(reeks):
    if stijgend(reeks) is False:
        raise AssertionError('gegeven reeks is niet stijgend')
    teller = 0
    resultaat = []
    for i in range(1, reeks[-1]+2):
        for e in reeks:
            if e < i:
                teller += 1
        resultaat.append(teller)
        teller = 0
    return resultaat

def verhogen(reeks):
    reeks = list(reeks)
    for i in range(len(reeks)):
        reeks[i] += i + 1
    return reeks
    
def complementaire_reeksen(reeks):
    if stijgend(reeks) is False:
        raise AssertionError('gegeven reeks is niet stijgend')
    reeks2 = verhogen(frequentiereeks(reeks))
    return (verhogen(reeks), reeks2)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ),"{""filename"":""Juliet Steffen/complementaire-reeksen.py"",""fullName"":""Juliet Steffen"",""id"":""7928"",""status"":""correct"",""submissionID"":""6351907"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T10:49:06.000Z"",""labels"":""geog""}"
701,/home/maxiem/Downloads/files/Robbe Bohy/complementaire-reeksen.py,"def stijgend(reeks):
    """"""Gaat na of een bepaalde reeks van natuurlijke getallen stijgend is of niet. Output is een boolean
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for index, getal in enumerate(reeks):
        # als de index + 1 niet kleiner is dan de lengte van de reeks
        # dan zijn alle waarden al overlopen en is het stijgend
        if index + 1 < len(reeks) and reeks[index + 1] < getal:
            return False
    return True


def frequentiereeks(reeks):
    """"""Geeft frequentiereeks weer van gegeven reeks. Als dit niet mogelijk is dan geeft het een error weer.
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    # hoogste getal van de reeks bepalen:
    m_int = reeks[-1]
    frequentie_lijst = []

    if stijgend(reeks):
        for nummer in range(1, m_int + 2):
            count = 0
            for getal_reeks in reeks:
                if getal_reeks < nummer:
                    count += 1
            frequentie_lijst.append(count)
        return frequentie_lijst

    assert (stijgend(reeks)), ""gegeven reeks is niet stijgend""


def verhogen(reeks):
    """"""Verhoogt elk getal met de waarde van zijn positie.
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    # index + 1 want python begint te tellen bij 0
    return [i + index + 1 for index, i in enumerate(reeks)]


def complementaire_reeksen(reeks):
    """"""Verhoogt elk element van de reeks met de waarde van zijn positie en neemt deze nieuwe lijst als
    eerste element in een tuple. De frequentiereeks wordt genomen van de oorspronkelijke reeks en ook verhoogt
    met de waarde van zijn positie. Dit vormt het tweede element van de tuple

    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(reeks):
        nieuwe_lijst = verhogen(reeks)
        verhoogde_frequentie_lijst = verhogen(frequentiereeks(reeks))
        return nieuwe_lijst, verhoogde_frequentie_lijst
    assert(stijgend(reeks)), 'gegeven reeks is niet stijgend'


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Robbe Bohy/complementaire-reeksen.py"",""fullName"":""Robbe Bohy"",""id"":""11953"",""status"":""correct"",""submissionID"":""6377209"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:35:34.000Z"",""labels"":""chem""}"
702,/home/maxiem/Downloads/files/Artur Damaziak/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    # controleer of de reeks stijgend is
    return all (reeks[i] <= reeks[i+1] for i in range(len(reeks) - 1))

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    frequentie, waarde, aantal = [], 0, 0
    for getal in reeks:
        while waarde < getal:
            frequentie.append(aantal)
            waarde += 1
        aantal += 1
    frequentie.append(aantal)
    return frequentie

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return[element + positie + 1 for positie, element in enumerate(reeks)]
def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
if __name__ == ""__main__"":
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Artur Damaziak/complementaire-reeksen.py"",""fullName"":""Artur Damaziak"",""id"":""11955"",""status"":""correct"",""submissionID"":""6422790"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:11:01.000Z"",""labels"":""chem""}"
703,/home/maxiem/Downloads/files/Kim Dierckx/complementaire-reeksen.py,"import math
import string

def increasing(sequence):

    """"""
    returns a Boolean value (bool) that indicates
    if the integers in the given sequence are increasing.
    Duplicates are allowed.

    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    # convert input to list
    sequence = list(sequence)

    length = len(sequence)

    # initialize starting values
    i = 1
    previous_number = sequence[0]

    # Iterate over sequence using while loop
    # if current>= previous number, set increasing indicator to 1
    while i < length:
        current_number = sequence[i]
        if current_number >= previous_number:
            condition = 1
            # initialize values again
            previous_number = current_number
            i += 1
        else:
            condition = 0
            break

    return (condition == 1)


def frequency_sequence(sequence):

    """"""
    returns a new list containing the integers (int) in the frequency sequence
     of the given sequence. In case the given sequence is not increasing,
     the function raises an AssertionError with the message
     given sequence is not increasing.

    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    # convert input to tuple if it is a list
    sequence = list(sequence)

    # raise AssertionError if given sequence is not increasing
    assert increasing(sequence) == True, ""given sequence is not increasing""

    # define last_number as the last element of sequence + 1
    last_number = sequence[-1] + 1

    count_list = []

    for i in range(0, last_number):
        # initialize count
        count = 0
        for j in sequence:
            if j<=i:
                count += 1
            else:
                count = count
        count_list.append(count)

    return count_list


def lift(sequence):

    """"""
    returns a new list containing the integers (int) of the given sequence
    that have been increased according to their position in the sequence.

    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    # convert input to list
    sequence = list(sequence)

    length = len(sequence)
    lift_list = []

    # Iterate over sequence using while loop
    # summing the number index to the current number
    # and adding them to lift_list
    for i in range(0, length):
        current_number = sequence[i]
        new_number = current_number + i + 1
        lift_list.append(new_number)

    return lift_list


def complementary_sequences(sequence):

    """"""
    returns a tuple with first element a new list containing the integers (int)
    of the given sequence that have been increased according to their position in the sequence,
    and the second element a new list containing the integers (int) in the frequency sequence
    of the given sequence that have been increased according to their position in the sequence.
    In case the given sequence is not increasing, the function raises an AssertionError.

    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    # convert input to list
    sequence = list(sequence)

    com_sequence = (lift(sequence), lift(frequency_sequence((sequence))))
    return com_sequence


if __name__ == '__main__':
    import doctest
    doctest.testmod()






",( program ( ERROR ( identifier ) ( call_expression ( import ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( number ) ) ) ( ERROR ( identifier ) ( jsx_namespace_name ( identifier ) ( identifier ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( array ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( break_statement ) ( return_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( identifier ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Kim Dierckx/complementaire-reeksen.py"",""fullName"":""Kim Dierckx"",""id"":""11956"",""status"":""correct"",""submissionID"":""6350597"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T07:01:28.000Z"",""labels"":""stat""}"
704,/home/maxiem/Downloads/files/Sigrid Torfs/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    is_stijgend = True
    for i in range(len(reeks) - 1):
        if reeks[i] > reeks[i + 1]:  # elke keer: any all; korter door eerst op true te zetten en vanaf het een keer fout is weet je dat het niet meer stijgend is
            is_stijgend = False

    return is_stijgend


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    frequentiereeks = []
    max = reeks[-1]
    frequentiereeks.append(reeks.count(0)) # bereken hoeveel elementer er kleiner zijn dan 1
    for i in range(1, max + 1):
        frequentiereeks.append(frequentiereeks[i-1] + reeks.count(i))  # begin meteen met hoeveel kleiner dan 2

    return frequentiereeks


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogd = []
    for i, value in enumerate(reeks):
        verhoogd.append(value + i + 1)  # niet eerste positie van dat element nemen

    return verhoogd


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( true ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Sigrid Torfs/complementaire-reeksen.py"",""fullName"":""Sigrid Torfs"",""id"":""11724"",""status"":""correct"",""submissionID"":""6386194"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T16:40:04.000Z"",""labels"":""keuz""}"
705,/home/maxiem/Downloads/files/Ellen Blomme/complementaire-reeksen.py,"def increasing(SeqOfInt):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for index in range(1, len(SeqOfInt)):
        if SeqOfInt[index] < SeqOfInt[index - 1]:
            return False
    return True


def frequency_sequence(SeqOfInt):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(SeqOfInt), 'given sequence is not increasing'
    index = 0
    result = []
    for number in range(1, SeqOfInt[-1] + 1):
        while SeqOfInt[index] < number:
            index += 1
        result.append(index)
    result.append(len(SeqOfInt))
    return result


def lift(SeqOfInt):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    result = []
    add = 0
    for number in SeqOfInt:
        add += 1
        result.append(number + add)
    return result


def complementary_sequences(SeqOfInt):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    increased = lift(SeqOfInt)
    freq = frequency_sequence(SeqOfInt)
    return (increased, lift(freq))


if __name__ == '__main__':
    import doctest

    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Ellen Blomme/complementaire-reeksen.py"",""fullName"":""Ellen Blomme"",""id"":""11961"",""status"":""correct"",""submissionID"":""6328792"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-07T18:46:54.000Z"",""labels"":""biol""}"
706,/home/maxiem/Downloads/files/Justine Lemaître/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(getallenreeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return list(getallenreeks) == sorted(list(getallenreeks))


def frequentiereeks(getallenreeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(getallenreeks), 'gegeven reeks is niet stijgend'
    frequenties = []
    for index in range(getallenreeks[-1] + 1):
        aantal = 0
        for cijfer in getallenreeks:
            if cijfer <= index:
                aantal += 1
        frequenties.append(aantal)
    return frequenties


def verhogen(getallenreeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    nieuwe_lijst = []
    for index, getal in enumerate(getallenreeks):
        nieuwe_lijst.append(getal + index + 1)
    return nieuwe_lijst


def complementaire_reeksen(getallenreeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(getallenreeks), 'gegeven reeks is niet stijgend'
    return verhogen(getallenreeks), verhogen(frequentiereeks(getallenreeks))",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( return_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Justine Lemaître/complementaire-reeksen.py"",""fullName"":""Justine Lemaître"",""id"":""9236"",""status"":""correct"",""submissionID"":""6380530"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T19:50:49.000Z"",""labels"":""keuz""}"
707,/home/maxiem/Downloads/files/Paulien D'Hondt/complementaire-reeksen.py,"def stijgend(reeks):
    for i in range(1, len(reeks)):
        if reeks[i] < reeks[i - 1]:
            return False
    return True


def frequentiereeks(reeks):
    assert stijgend(reeks),""gegeven reeks is niet stijgend""
    teller1 = 0
    teller2 = 0
    reeks2 = []
    while teller1 <= reeks[-1]:
        if reeks[teller2] == teller1:
            teller2 += reeks.count(teller1)
        reeks2.append(teller2)
        teller1 +=1
    return reeks2

def verhogen(reeks):
    reeks = list(reeks)
    for index,waarde in enumerate(reeks):
        reeks[index] += index + 1
    return reeks

def complementaire_reeksen(reeks):
    assert stijgend(reeks),""gegeven reeks is niet stijgend""
    reeks1 = verhogen(reeks)
    reeks2 = verhogen(frequentiereeks(reeks))
    return(reeks1,reeks2)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Paulien D'Hondt/complementaire-reeksen.py"",""fullName"":""Paulien D'Hondt"",""id"":""11974"",""status"":""correct"",""submissionID"":""6379006"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T16:38:21.000Z"",""labels"":""geog""}"
708,/home/maxiem/Downloads/files/Dingrongruo Yu/complementaire-reeksen.py,"def increasing(a):
    if isinstance(a, tuple):
        b = list(a)
        if sorted(b) == b:
            return True
        return False
    else:
        if sorted(a) == a:
            return True
        return False

def frequency_sequence(a):
    if increasing(a):
        long_list_or_tuple = a[-1] + 1
        new_list = []
        for i in range(1, long_list_or_tuple + 1):
            count_number = 0
            for m in a:
                if m < i:
                    count_number += 1
            new_list.append(count_number)
        return new_list
    else:
        raise AssertionError(""given sequence is not increasing"")

def lift(a):
    new_list = []
    long_list_or_tuple = len(a)
    plus_number = 1
    for i in a:
        new_i = i + plus_number
        plus_number += 1
        new_list.append(new_i)
        new_i = 0
    return new_list

def complementary_sequences(a):
    if increasing(a):
        return (lift(a), lift(frequency_sequence(a)))
    else:
        raise AssertionError(""given sequence is not increasing"")",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ),"{""filename"":""Dingrongruo Yu/complementaire-reeksen.py"",""fullName"":""Dingrongruo Yu"",""id"":""11978"",""status"":""correct"",""submissionID"":""6420327"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T16:32:33.000Z"",""labels"":""keuz""}"
709,/home/maxiem/Downloads/files/Jasper Verdonck/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return all(i <= j for i, j in zip(sequence, sequence[1:]))


def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence), 'given sequence is not increasing'
    return [sum(sequence[j] < i for j in range(len(sequence))) for i in range(1, sequence[-1]+2)]


def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return [sequence[i] + (i+1) for i in range(len(sequence))]

def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence), 'given sequence is not increasing'
    return lift(sequence), lift(frequency_sequence(sequence))


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jasper Verdonck/complementaire-reeksen.py"",""fullName"":""Jasper Verdonck"",""id"":""1487"",""status"":""correct"",""submissionID"":""6400117"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T11:23:12.000Z"",""labels"":""stat""}"
710,/home/maxiem/Downloads/files/Evi Scheirlinckx/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    lijst = []
    vorig_cijfer = reeks[0]
    for i in reeks[1:]:
        if i >= vorig_cijfer:
            lijst.append(True)
        else:
            lijst.append(False)
        vorig_cijfer = i

    if all(lijst):
        return True
    else:
        return False

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    grootste_cijfer = reeks[0]
    for getal in reeks:
        if getal > grootste_cijfer:
            grootste_cijfer = getal
    i = 1
    frequentielijst = []
    while len(frequentielijst) <= grootste_cijfer:
        cijfer = 0
        for getal in reeks:
            if getal < i:
                cijfer += 1
        frequentielijst.append(cijfer)
        i += 1

    return frequentielijst

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogde_reeks = []
    for index, getal in enumerate(reeks):
        verhoogde_reeks.append(index+1 + getal)

    return verhoogde_reeks

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    verhoogde_reeks = verhogen(reeks)
    assert stijgend(verhoogde_reeks), 'gegeven reeks is niet stijgend'
    frequentie_lijst = frequentiereeks(reeks)
    verhoogde_frequentiereeks = verhogen(frequentie_lijst)

    return (verhoogde_reeks,verhoogde_frequentiereeks)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Evi Scheirlinckx/complementaire-reeksen.py"",""fullName"":""Evi Scheirlinckx"",""id"":""11988"",""status"":""correct"",""submissionID"":""6416922"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T14:14:23.000Z"",""labels"":""bcbt""}"
711,/home/maxiem/Downloads/files/Simon Knockaert/complementaire-reeksen.py,"def stijgend(reeks):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    antwoord = True
    for i in range(len(reeks)-1):
        if reeks[i] > reeks[i+1]:
            antwoord = False
    return antwoord


def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    m = 0
    n = 1
    freq = []
    for i in range(reeks[-1]+1):
        if reeks[m] < n:
            if m + 1 != len(reeks) and reeks[m] == reeks[m+1]:
                aantal_m = list(reeks).count(reeks[m])
                m += aantal_m
                freq += [m]
                n += 1

            else:
                m += 1
                freq += [m]
                n += 1

        else:
            freq += [m]
            n += 1
    return freq


#def frequentiereeks(reeks):
#    """"""
#    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
#    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
#    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
#    [2, 3, 5, 7, 11, 13, 14]
#    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
#    Traceback (most recent call last):
#    AssertionError: gegeven reeks is niet stijgend
#    """"""
#    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
#    m = int(reeks[-1])
#    frequentie = []
#    for x in range(m+1):
#        count = 0
#        for n in range(len(reeks)):
#            if reeks[n] < x+1:
#                count += 1
#        frequentie.append(count)
#    return frequentie


def verhogen(reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    reeks_nieuw = []
    for i in range(len(reeks)):
        waarde = reeks[i] + i+1
        reeks_nieuw += [waarde]
    return reeks_nieuw

def complementaire_reeksen(reeks):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    verhoogd = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    verhoogd_freq = verhogen(frequentie)
    return verhoogd, verhoogd_freq
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Simon Knockaert/complementaire-reeksen.py"",""fullName"":""Simon Knockaert"",""id"":""11917"",""status"":""correct"",""submissionID"":""6380305"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T19:27:10.000Z"",""labels"":""bcbt""}"
712,/home/maxiem/Downloads/files/Karlien Coppens/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(reeks):
    stijgend = sorted(reeks)
    return list(reeks) == stijgend

def frequentiereeks(reeks):
    reeks = list(reeks)
    aantal = 0
    frequentie = []

    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    for i in range(reeks[-1] + 1):
        for element in reeks:
            if element < i + 1:
                aantal += 1
        frequentie.append(aantal)
        aantal = 0
    return frequentie

def verhogen(reeks):
    reeks = list(reeks)
    i = 0
    verhoogd = []
    while i < len(reeks):
        verhoogd.append(reeks[i] + i + 1)
        i += 1
    return verhoogd

def complementaire_reeksen(reeks):
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    frequentie = frequentiereeks(reeks)
    verhoogd1 = verhogen(reeks)
    verhoogd2 = verhogen(frequentie)
    return (verhoogd1, verhoogd2)

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Karlien Coppens/complementaire-reeksen.py"",""fullName"":""Karlien Coppens"",""id"":""11989"",""status"":""correct"",""submissionID"":""6392551"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T14:19:05.000Z"",""labels"":""bcbt""}"
713,/home/maxiem/Downloads/files/Rohan Kluskens/complementaire-reeksen.py,"def stijgend(reeks):
    for i in range(len(reeks)-1):
        if not reeks[i] <= reeks[i+1]:
            return False
    return True

def frequentiereeks(reeks):
    nieuw = []
    for i in range(reeks[-1]+1):
        aantal = 0
        for element in reeks:
            if element < i + 1:
                aantal += 1
        nieuw.append(aantal)
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    return nieuw

def verhogen(reeks):
    lijst = list(reeks)
    for i, getal in enumerate(lijst):
        lijst[i] = int(getal) + i + 1
    return lijst

def complementaire_reeksen(reeks):
    lijst1 = verhogen(reeks)
    lijst2 = verhogen(frequentiereeks(reeks))
    return lijst1, lijst2

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Rohan Kluskens/complementaire-reeksen.py"",""fullName"":""Rohan Kluskens"",""id"":""11993"",""status"":""correct"",""submissionID"":""6365920"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T14:56:22.000Z"",""labels"":""chem""}"
714,/home/maxiem/Downloads/files/Remi Laplasse/complementaire-reeksen.py,"def stijgend(lijst):
    index = 0
    while index < len(lijst):
        if lijst[index] <= lijst[index + 1]:
            index += 1
            if index == len(lijst) - 1:
                return True
        else:
            return False
def frequentiereeks(lijst):
    nlijst = stijgend(lijst)
    freq = []
    i = 1
    index = 0
    if nlijst == False:
        assert False, 'gegeven reeks is niet stijgend'
    elif nlijst == True:
        for i in range(1, int(lijst[-1] + 2)):
            x = 0
            for a in lijst:
                if a < i:
                    x += 1
            freq.append(x)
        return freq
def verhogen(lijst):
        nlijst = []
        w = 1
        for i in lijst:
            v = i + w
            nlijst.append(v)
            w += 1
        return nlijst

def complementaire_reeksen(lijst):
        tuple = ()
        rlijst = frequentiereeks(lijst)
        tuple += verhogen(lijst), verhogen(rlijst)
        return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( formal_parameters ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( sequence_expression ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Remi Laplasse/complementaire-reeksen.py"",""fullName"":""Remi Laplasse"",""id"":""11984"",""status"":""correct"",""submissionID"":""6365172"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T14:33:46.000Z"",""labels"":""bcbt""}"
715,/home/maxiem/Downloads/files/Wouter Verstappe/complementaire-reeksen.py,"def stijgend(reeks):
    z = 0
    juist = True
    for i in range(len(reeks)):
        if reeks[i] < z:
            juist = False
        z = reeks[i]
    return juist
def frequentiereeks(reeks):
    laatste = int(reeks[-1])
    lijst = []
    for z in range(laatste+1):
        getal = 0
        z += 1
        for i in range(len(reeks)):
            if reeks[i] < z:
                getal += 1
        lijst.append(getal)
        z += 1
    if stijgend(reeks) == False:
        assert False, ""gegeven reeks is niet stijgend""
    return lijst
def verhogen(reeks):
    getal = 1
    lijst = []
    for i in range(len(reeks)):
        k = reeks[i] + getal
        lijst.append(k)
        getal += 1
    return lijst
def complementaire_reeksen(reeks):
    eerste = verhogen((reeks))
    deel = frequentiereeks(reeks)
    tweede = verhogen(deel)
    tuple = (eerste,tweede)
    if stijgend(reeks) == False:
        assert False, ""gegeven reeks is niet stijgend""
    return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Wouter Verstappe/complementaire-reeksen.py"",""fullName"":""Wouter Verstappe"",""id"":""11840"",""status"":""correct"",""submissionID"":""6335413"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T18:03:02.000Z"",""labels"":""bcbt""}"
716,/home/maxiem/Downloads/files/Manon Montyne/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    stijgt = True
    i = 0
    while i <= (len(reeks) - 2):
        if reeks[i] > reeks[i + 1]:
            stijgt = False
        i += 1

    return stijgt


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    maximum = max(reeks)
    i = 1
    nieuwe_lijst = []
    while i <= maximum + 1:
        aantal = 0
        for cijfer in reeks:
            if cijfer < i:
                aantal += 1
        nieuwe_lijst.append(aantal)
        i += 1

    return nieuwe_lijst

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    nieuwe_reeks = []
    for index, cijfer in enumerate(reeks):
        nieuwe_cijfer = cijfer + index + 1
        nieuwe_reeks.append(nieuwe_cijfer)

    return nieuwe_reeks

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))


if __name__ == ""main"":
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ),"{""filename"":""Manon Montyne/complementaire-reeksen.py"",""fullName"":""Manon Montyne"",""id"":""5881"",""status"":""correct"",""submissionID"":""6361372"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T13:10:55.000Z"",""labels"":""keuz""}"
717,/home/maxiem/Downloads/files/Yves Vanden Broucke/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    vorige_element = 0

    for elementen in reeks:
        if elementen < vorige_element:
            return False
        vorige_element = elementen
    return True

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks) is not False, 'gegeven reeks is niet stijgend'
    lijst = []


    m = reeks[-1]
    for nummer in range(1, m + 2):
        hoeveel = 0
        for element in reeks:
            if element < nummer:
                hoeveel += 1

        lijst.append(hoeveel)
    return lijst

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = []
    plaats = 0
    for element in reeks:
        plaats += 1
        new_element = element + plaats
        lijst.append(new_element)
    return lijst

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks) is not False, 'gegeven reeks is niet stijgend'
    a_tuple = verhogen(reeks), verhogen(frequentiereeks(reeks))
    return a_tuple


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Yves Vanden Broucke/complementaire-reeksen.py"",""fullName"":""Yves Vanden Broucke"",""id"":""12000"",""status"":""correct"",""submissionID"":""6375728"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T13:45:32.000Z"",""labels"":""fyss""}"
718,/home/maxiem/Downloads/files/Anton Leagre/complementaire-reeksen.py,"""""""
>>> stijgend([2, 3, 5, 7, 11, 13])
True
>>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
True
>>> stijgend([5, 3, 2, 7, 8, 1, 9])
False
""""""
def stijgend(lort):
    for i in range(len(lort) - 1):
        if not lort[i+1] >= lort[i]:
            return False
    return True

""""""
>>> frequentiereeks([2, 3, 5, 7, 11, 13])
[0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
>>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[2, 3, 5, 7, 11, 13, 14]
>>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend
""""""
def frequentiereeks(lort):
    assert stijgend(lort), ""gegeven reeks is niet stijgend""
    out = []
    for i in range(1, lort[len(lort) -1] + 2):
        nums_smaller = 0
        for c in lort:
            if c < i:
                nums_smaller += 1
        out.append(nums_smaller)
    return out

""""""
>>> verhogen([2, 3, 5, 7, 11, 13])
[3, 5, 8, 11, 16, 19]
>>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
>>> verhogen([5, 3, 2, 7, 8, 1, 9])
[6, 5, 5, 11, 13, 7, 16]

""""""
def verhogen(lort):
    out = []
    for i,c in enumerate(lort):
        out.append(c + i + 1)
    return out

""""""
>>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
>>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
>>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend
""""""
def complementaire_reeksen(lort):
    assert stijgend(lort), ""gegeven reeks is niet stijgend""
    return verhogen(lort), verhogen(frequentiereeks(lort))



if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
",( program ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Anton Leagre/complementaire-reeksen.py"",""fullName"":""Anton Leagre"",""id"":""12010"",""status"":""correct"",""submissionID"":""6391258"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T12:37:37.000Z"",""labels"":""fyss""}"
719,/home/maxiem/Downloads/files/Ilja Welvaert/complementaire-reeksen.py,"def stijgend(list):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return all(list[x] <= list[x + 1] for x in range(len(list) - 1))

def frequentiereeks(list):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(list), ""gegeven reeks is niet stijgend""

    freq_list = []
    freq_value = 0
    freq_amount = 0

    for number in list:
        while freq_value < number:
            freq_list.append(freq_amount)
            freq_value += 1
        freq_amount += 1

    freq_list.append(freq_amount)

    return freq_list

def verhogen(list):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhogen_list = []
    for index, getal in enumerate(list):
        verhogen_list.append(getal + index + 1)

    return verhogen_list

def complementaire_reeksen(list):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(list), ""gegeven reeks is niet stijgend""

    return (verhogen(list), verhogen(frequentiereeks(list)))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Ilja Welvaert/complementaire-reeksen.py"",""fullName"":""Ilja Welvaert"",""id"":""12015"",""status"":""correct"",""submissionID"":""6421422"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T17:43:42.000Z"",""labels"":""biol""}"
720,/home/maxiem/Downloads/files/Emma Bossuyt/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return all(reeks[getal] <= reeks[getal + 1] for getal in range(len(reeks) - 1))


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend"" #nagaan of de reeks stijgend is
    frequentie_reeks = []
    aantal = 0
    waarde = 0
    for getal in reeks:
        while waarde < getal:
            frequentie_reeks.append(aantal)
            waarde += 1

        aantal += 1
        
    frequentie_reeks.append(aantal)

    return frequentie_reeks


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    nieuwe_reeks = []

    for index, getal in enumerate(reeks):
        nieuwe_reeks.append(getal + index + 1)
    return nieuwe_reeks


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Emma Bossuyt/complementaire-reeksen.py"",""fullName"":""Emma Bossuyt"",""id"":""12021"",""status"":""correct"",""submissionID"":""6340156"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:26:28.000Z"",""labels"":""biol""}"
721,/home/maxiem/Downloads/files/Maaike Dhondt/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def increasing(sequence):
    """"""
    returns True is the integers in the sequence are increasing,
    duplicates are allowed
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    previous_number = sequence[0]  # define the first number
    for number in sequence[1:]:  # go over al the other numbers
        if number < previous_number:  # once a number is lower than the previous one False is returned
            return False
        previous_number = number
    return True  # if no decreasing number is detected True is returned


def frequency_sequence(sequence):
    """"""

    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    # if the sequence is not increasing, raise AssertionError
    assert increasing(sequence), 'given sequence is not increasing'
    # length of the list that needs to be returned = m+1, where m = max(sequence)
    length = max(sequence) + 1
    freq_sequence = []
    # make the frequency sequence
    for i in range(length):
        frequency = 0
        for number in sequence:
            if number <= i:
                frequency += 1
        freq_sequence.append(frequency)
    return freq_sequence


def lift(sequence):
    """"""
    returns a list containing the intergers of the sequence increased according to their position
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    # increase every number according to its position in the sequence
    new_list = []
    for index in range(len(sequence)):
        new_list += [sequence[index] + index+1]
    return new_list


def complementary_sequences(sequence):
    """"""
    returns 2 lists: 1) result of lift function
                     2) result of the frequency_sequence function of the result of the lift function
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    # if the sequence is not increasing, raise AssertionError
    assert increasing(sequence), 'given sequence is not increasing'
    return lift(sequence), lift(frequency_sequence(sequence))


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( number ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Maaike Dhondt/complementaire-reeksen.py"",""fullName"":""Maaike Dhondt"",""id"":""12022"",""status"":""correct"",""submissionID"":""6327923"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-07T16:40:55.000Z"",""labels"":""biol""}"
722,/home/maxiem/Downloads/files/Danté Bouckhout/complementaire-reeksen.py,"import string
def stijgend(lijst):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    a = 0
    for i in lijst:
        if int(i) < int(a):
            return(False)
        a = i
    return(True)
def frequentiereeks(lijst):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    frequentie = []
    assert (stijgend(lijst)),'gegeven reeks is niet stijgend'
    for i in range(lijst[-1]+1):
        aantal = 0
        for x in lijst:

            if x < i+1:
                aantal +=1
        frequentie.append(aantal)
    return(frequentie)

def verhogen(lijst):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    nieuwelijst = []
    for pos, i in enumerate(lijst):
        nieuwelijst.append(pos+i+1)
    return(nieuwelijst)
def complementaire_reeksen(lijst):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    return(verhogen(lijst),verhogen(frequentiereeks(lijst)))
if __name__ == '__main__':
   import doctest
   doctest.testmod()",( program ( ERROR ( call_expression ( import ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Danté Bouckhout/complementaire-reeksen.py"",""fullName"":""Danté Bouckhout"",""id"":""11553"",""status"":""correct"",""submissionID"":""6356998"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T22:01:13.000Z"",""labels"":""fyss""}"
723,/home/maxiem/Downloads/files/Manon Durnez/complementaire-reeksen.py,"def stijgend(reeks):

    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    reeks_tuple = tuple(reeks)
    reeks = list(reeks)
    reeks.sort()
    if reeks_tuple == tuple(reeks):
        return True
    else:
        return False


def frequentiereeks(reeks):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    reeks = list(reeks)
    m = max(reeks)
    frequentiereeks = []
    n = 0

    for index in range(0, m + 1):
        n += reeks.count(index)
        frequentiereeks.append(n)

    return frequentiereeks


def verhogen(reeks):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    reeks = list(reeks)
    n = 1

    for index in range(1, len(reeks) + 1):
        reeks[index - 1] += n
        n += 1

    return reeks


def complementaire_reeksen(reeks):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    reeks_verhoogd = verhogen(reeks)
    frequentiereeks_verhoogd = verhogen(frequentiereeks(reeks))

    return (reeks_verhoogd, frequentiereeks_verhoogd)


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Manon Durnez/complementaire-reeksen.py"",""fullName"":""Manon Durnez"",""id"":""11822"",""status"":""correct"",""submissionID"":""6419204"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T15:36:59.000Z"",""labels"":""bcbt""}"
724,/home/maxiem/Downloads/files/Martijn De Feyter/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    Als urgument geef je een lijst of tuple.
    Geeft weer als de elemnten van klein naar grooot staan
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    x = 1
    for element in range(len(reeks) - 1):
        if reeks[element] <= reeks[element + 1]:
            x += 1
    return len(reeks) == x

def frequentiereeks(reeks):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    frequentie = []
    frequentie.append(reeks.count(0))
    for x in range(max(reeks)):
        frequentie.append(reeks.count(x + 1) + frequentie[-1])
    return frequentie


def verhogen(reeks):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    nieuwe_reeks = []
    x = 0
    for elementen in reeks:
        x += 1
        nieuwe_reeks.append(elementen + x)
    return nieuwe_reeks

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    verhoogd = verhogen(reeks)
    frequentie = frequentiereeks(reeks)

    return verhoogd, verhogen(frequentie)

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Martijn De Feyter/complementaire-reeksen.py"",""fullName"":""Martijn De Feyter"",""id"":""12041"",""status"":""correct"",""submissionID"":""6377917"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:18:41.000Z"",""labels"":""chem""}"
725,/home/maxiem/Downloads/files/Longnan Shi/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def increasing(a):
    for i in range(len(a) - 1):
        if not (a[i + 1] - a[i] >= 0):
            return False
    return True


def frequency_sequence(b):
    if increasing(b) is True:
        apple=[]
        for i in range (1,int(b[-1])+2):
            count = 0
            for k in range(0,len(b),1):
                if b[k] < i:
                    count += 1
            apple.append(count)
        return apple
    else:
            raise AssertionError(""given sequence is not increasing"")


def lift(c):
    sum = []
    for i in range(len(c)):
        sum.append(c[i] + i + 1)
    return (sum)


def complementary_sequences(d):
    if not increasing(d):
        raise AssertionError(""given sequence is not increasing"")
    else:
        return(lift(d),lift(frequency_sequence(d)))


",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ),"{""filename"":""Longnan Shi/complementaire-reeksen.py"",""fullName"":""Longnan Shi"",""id"":""12043"",""status"":""correct"",""submissionID"":""6421847"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T18:12:47.000Z"",""labels"":""stat""}"
726,/home/maxiem/Downloads/files/Lennard Dekeukeleire/complementaire-reeksen.py,"def increasing(sequence):
    increase = True
    for index, number in enumerate(sequence):
        if index != 0:
            if number < sequence[index - 1]:
                increase = False
    return increase


def frequency_sequence(sequence):
    assert increasing(sequence), ""given sequence is not increasing""
    new_sequence = []
    for number in range(1, sequence[-1] + 2):
        count = 0
        for sequence_number in sequence:
            if sequence_number < number:
                count += 1
        new_sequence.append(count)
    return new_sequence
    
    
def lift(sequence):
    new_sequence = []
    for index, number in enumerate(sequence):
        lifted_number = number + index + 1
        new_sequence.append(lifted_number)
    return new_sequence  
    
    
def complementary_sequences(sequence):
    lifted_sequence = lift(sequence)
    freq_sequence = lift(frequency_sequence(sequence))
    return (lifted_sequence, freq_sequence)    ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Lennard Dekeukeleire/complementaire-reeksen.py"",""fullName"":""Lennard Dekeukeleire"",""id"":""7948"",""status"":""correct"",""submissionID"":""6373026"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T11:31:52.000Z"",""labels"":""biol""}"
727,/home/maxiem/Downloads/files/Ivar Faber/complementaire-reeksen.py,"def stijgend(i):
    for e in range(len(i) - 1):
        if i[e] > i[e+1]:
            return False
    return True

def frequentiereeks(reeks):
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    l = int(reeks[-1])
    r = 0
    q = []
    p = len(reeks)
    while r <= l:
        t = 0
        for j in range(0, p):
            if r + 1 > int(reeks[j]):
                t += 1
        r += 1
        q.append(t)
    return q 
    
def verhogen(reeks):
    c = []
    ln = len(reeks)
    for i in range(ln):
        a = reeks[i]
        b = int(a) + int(i) + 1
        c.append(b)
    return c
    
def complementaire_reeksen(reeks):
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    x = verhogen(reeks)
    y = frequentiereeks(reeks)
    z = verhogen(y)
    return x, z",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Ivar Faber/complementaire-reeksen.py"",""fullName"":""Ivar Faber"",""id"":""12078"",""status"":""correct"",""submissionID"":""6351479"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T10:02:17.000Z"",""labels"":""fyss""}"
728,/home/maxiem/Downloads/files/Juul Janssen/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(lijst):
    if isinstance(lijst, tuple):
        lijst = list(lijst)
    return lijst == sorted(lijst)

def frequentiereeks(lijst):
    assert stijgend(lijst) is True, ""gegeven reeks is niet stijgend""
    m = lijst[-1]
    terug_te_geven_lijst = []
    kleiner_dan = len(lijst)
    lengte_lijst = kleiner_dan
    j = 0
    a = 0
    for i in range(0,m):
        while j >= lijst[a]:
            kleiner_dan -= 1
            a += 1
        terug_te_geven_lijst.append(lengte_lijst - kleiner_dan)
        j += 1
        a = 0
        kleiner_dan = len(lijst)
    terug_te_geven_lijst.append(lengte_lijst)
    return terug_te_geven_lijst

def verhogen(lijst):
    if isinstance(lijst, tuple):
        lijst = list(lijst)
    for i in range(0, len(lijst)):
        lijst[i] += i + 1
    return lijst

def complementaire_reeksen(lijst):
    assert stijgend(lijst) is True, ""gegeven reeks is niet stijgend""
    verhoogd = verhogen(lijst)
    hoogste_getal = verhoogd[-1] +1
    tweede_output = []
    for i in range(1,hoogste_getal+1):
        if i not in verhoogd:
            tweede_output.append(i)

    return (verhoogd, tweede_output)


",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Juul Janssen/complementaire-reeksen.py"",""fullName"":""Juul Janssen"",""id"":""12118"",""status"":""correct"",""submissionID"":""6386352"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T16:54:16.000Z"",""labels"":""stat""}"
729,/home/maxiem/Downloads/files/Silke Vergucht/complementaire-reeksen.py,"def stijgend (reeks_getallen):
    #dit klopt
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    resultaat = True
    for getal in range (len(reeks_getallen)-1):
        if reeks_getallen[getal] > reeks_getallen[getal+1]:
            resultaat = False
    return resultaat

def frequentiereeks (reeks_getallen):
    #dit klopt
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks_getallen), 'gegeven reeks is niet stijgend'
    reeks_getallen1 = list(reeks_getallen)
    getal = (reeks_getallen1 [-1])+1
    reeks_getallen2 = reeks_getallen1.append(getal)
    x = 0
    lijst =[]
    kleiner = 0
    for getal in (reeks_getallen1):
        while x < getal:
            lijst.append(kleiner)
            x += 1
        kleiner += 1
    return lijst


def verhogen (reeks_getallen):
    #dit klopt
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = []
    optellen = 1

    reeks_getallen_lijst= list(reeks_getallen)
    while len(lijst) < len(reeks_getallen):
        getal = (reeks_getallen_lijst[optellen-1]) + optellen
        lijst.append(getal)
        optellen+=1
    return lijst

def complementaire_reeksen(reeks_getallen):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks_getallen), 'gegeven reeks is niet stijgend'

    deel1 = verhogen(reeks_getallen)
    deel2 = frequentiereeks(reeks_getallen)
    deel3 = verhogen(deel2)
    geheel = (deel1,deel3)
    return geheel


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Silke Vergucht/complementaire-reeksen.py"",""fullName"":""Silke Vergucht"",""id"":""12119"",""status"":""correct"",""submissionID"":""6372602"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:58:57.000Z"",""labels"":""bcbt""}"
730,/home/maxiem/Downloads/files/Viktor Van Nauw/complementaire-reeksen.py,"def stijgend(cijfers):
    cijfers = list(cijfers)
    truth = True
    for i in range(1, len(cijfers)):
        if cijfers[i] < cijfers[i - 1]:
            truth = False
    return truth
def frequentiereeks(reeks):
    reeks = list(reeks)
    assert stijgend(reeks) == True , 'gegeven reeks is niet stijgend'
    m = reeks[len(reeks) - 1]
    reeks2 = []
    index = 1
    while index <= (m +1):
        y = 0
        for i in range(len(reeks)):
            if int(reeks[i]) < index:
                y += 1
        index += 1
        reeks2.append(y)
         
    return reeks2
    
def verhogen(reeks):
    reeks = list(reeks)
    for i in range (len(reeks)):
        reeks[i] = int(reeks[i]) + (i + 1)
    return reeks
    
def complementaire_reeksen(reeks):
    reeks = list(reeks)
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    x = verhogen(reeks)
    y = frequentiereeks(reeks)
    y = verhogen(y)
    reeks2 = []
    reeks2.append(x)
    reeks2.append(y)
    reeks2 = tuple(reeks2)
    return reeks2",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Viktor Van Nauw/complementaire-reeksen.py"",""fullName"":""Viktor Van Nauw"",""id"":""12105"",""status"":""correct"",""submissionID"":""6360543"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T12:53:45.000Z"",""labels"":""bcbt""}"
731,/home/maxiem/Downloads/files/Dounya Van Overschelde/complementaire-reeksen.py,"def stijgend(list_or_tuple):
    gesorteerd = sorted(list_or_tuple)
    return gesorteerd == list(list_or_tuple)
def frequentiereeks(list_or_tuple):
    if not stijgend(list_or_tuple):
        raise AssertionError('gegeven reeks is niet stijgend')
    list_to_check = list(list_or_tuple)
    m = list_to_check[-1]
    new_list = []
    for i in range(m+1):
        teller = 0
        for cijfer in list_to_check:
            if (i+1) > cijfer:
                teller += 1
        new_list.append(teller)
    return new_list
def verhogen(list_or_tuple):
    list_to_check = list(list_or_tuple)
    new_list = []
    i = 1
    for cijfer in list_to_check:
        new_list.append(cijfer + i)
        i += 1
    return new_list
def complementaire_reeksen(tup):
    if not stijgend(tup):
        raise AssertionError('gegeven reeks is niet stijgend')
    lijst1 = verhogen(tup)
    frequent = frequentiereeks(tup)
    complement = verhogen(frequent)
    return (lijst1, complement)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Dounya Van Overschelde/complementaire-reeksen.py"",""fullName"":""Dounya Van Overschelde"",""id"":""8231"",""status"":""correct"",""submissionID"":""6351542"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T10:11:10.000Z"",""labels"":""bcbt""}"
732,/home/maxiem/Downloads/files/Naïs Fleury/complementaire-reeksen.py,"def stijgend(lijst):
    pos = 0
    for nummer in lijst:
        if pos < len(lijst) - 1:
            if lijst[pos] > lijst[pos + 1]:
                return False
            pos += 1
        else:
            if lijst[pos] < lijst[pos - 1]:
                return False
    return True

def frequentiereeks(lijst):
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'
    maxi = max(lijst)
    nieuwelijst = list()
    for getal in range(1,maxi + 2):
        som = 0
        for cijfer in lijst:
            if cijfer < getal:
                som += 1
        nieuwelijst.append(som)
    return nieuwelijst


def verhogen(lijst):
    nieuwelijst = list()
    pos = 1
    for getal in lijst:
        nieuwelijst.append(lijst[pos - 1] + pos)
        pos += 1
    return nieuwelijst
    
def complementaireReeksen(lijst):
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'
    compleet = list()
    eerstelijst = verhogen(lijst)
    tweede = frequentiereeks(lijst)
    tweedelijst = verhogen(tweede)
    compleet.append(eerstelijst)
    compleet.append(tweedelijst)
    return tuple(compleet)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Naïs Fleury/complementaire-reeksen.py"",""fullName"":""Naïs Fleury"",""id"":""8133"",""status"":""correct"",""submissionID"":""6189507"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-30T13:57:02.000Z"",""labels"":""bcbt""}"
733,/home/maxiem/Downloads/files/Jana Goes/complementaire-reeksen.py,"def stijgend(reeks):

    onthouder = 0
    for iterator in reeks:
        if not iterator >= onthouder:
            return False

        onthouder = iterator
    return True

def frequentiereeks(reeks):

    assert stijgend(reeks), ""gegeven reeks is niet stijgend""

    nieuwe_lijst = []
    aantal = 0
    for i in range(max(reeks) + 1):

        aantal += reeks.count(i)
        nieuwe_lijst.append(aantal)

    return nieuwe_lijst

def verhogen(reeks):

    reeks = list(reeks)

    index = 0
    for iterator in reeks:
        reeks[index] += index + 1
        index += 1

    return reeks

def complementaire_reeksen(reeks):
    
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    
    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Jana Goes/complementaire-reeksen.py"",""fullName"":""Jana Goes"",""id"":""2459"",""status"":""correct"",""submissionID"":""6334012"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T13:56:45.000Z"",""labels"":""biol""}"
734,/home/maxiem/Downloads/files/Sarvnaz Gostary/complementaire-reeksen.py,"def stijgend(x):
    lol = 0
    lengte = len(x)
    p = x[:-1]
    for pos, i in enumerate(p):
            if i <= x[pos+1]:
                lol+=1

    if lol == lengte-1:
        return True
    else:
        return False

def frequentiereeks(x):
    kak = stijgend(x)
    if kak == False:
        raise AssertionError(""gegeven reeks is niet stijgend"")
    else:
        m = max(x)
        rang = range(1, m+2)
        pop = list(rang)
        lijst = []
        listo = []
        for i in pop:
            kat = i
            for i in x:
                if i < kat:
                    listo.append(i)
            lengte = len(listo)
            lijst.append(lengte)
            listo = []
        return lijst
        
def verhogen(x):
    kak = 1
    lijst = []
    for i in x:
        yum = i + kak
        lijst.append(yum)
        kak += 1
    return lijst
    
def complementaire_reeksen(x):
    kak = stijgend(x)
    if kak == False:
        raise AssertionError(""gegeven reeks is niet stijgend"")
    else:
        lijst1 = verhogen(x)
        poop = frequentiereeks(x)
        lijst2 = verhogen(poop)
        tuple = lijst1, lijst2
    return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Sarvnaz Gostary/complementaire-reeksen.py"",""fullName"":""Sarvnaz Gostary"",""id"":""12125"",""status"":""correct"",""submissionID"":""6354930"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T16:16:24.000Z"",""labels"":""bcbt""}"
735,/home/maxiem/Downloads/files/Hanke Vermeiren/complementaire-reeksen.py,"def stijgend(reeks):
    if type(reeks) == tuple:
        reeks = list(reeks)
    test_reeks = reeks[:]
    test_reeks.sort()
    if test_reeks == reeks:
        bool = True
    else:
        bool = False
    return bool

def frequentiereeks(reeks):

    frequentie = []
    count = 0
    maximum = max(reeks)
    for i in range(0, maximum+1):
        count = 0
        for element in reeks:
            count += int(element <= i)
        frequentie.append(count)
    assert (stijgend(reeks) == True), 'gegeven reeks is niet stijgend'
    return frequentie

def verhogen(reeks):
    list = []
    for indx, ele in enumerate(reeks):
        list.append(ele + indx +1)
    return list

def complementaire_reeksen(reeks):
    verhoogd = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    verhoogd_frequentie = verhogen(frequentie)

    tuple = (verhoogd, verhoogd_frequentie)
    return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ( binary_expression ( identifier ) ( identifier ) ) ( assignment_expression ( identifier ) ( ERROR ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( array_pattern ) ( assignment_expression ( identifier ) ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( number ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( sequence_expression ( augmented_assignment_expression ( identifier ) ( call_expression ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( identifier ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( identifier ) ) ) ),"{""filename"":""Hanke Vermeiren/complementaire-reeksen.py"",""fullName"":""Hanke Vermeiren"",""id"":""12127"",""status"":""correct"",""submissionID"":""6333941"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T13:48:29.000Z"",""labels"":""keuz""}"
736,/home/maxiem/Downloads/files/Lara Morren/complementaire-reeksen.py,"def stijgend(reeks):
    sorteren = sorted(reeks)
    return sorteren == list(reeks)

def frequentiereeks(reeks):
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    reeks = list(reeks)
    m = reeks[-1]
    lijst = []
    for i in range(m+1):
        count = 0
        for cijfer in reeks:
            if (i+1) > cijfer:
                count += 1
        lijst.append(count)
    return lijst

def verhogen(reeks):
    checken = list(reeks)
    lijst = []
    n = 1
    for cijfer in reeks:
        lijst.append(cijfer + n)
        n += 1
    return lijst

def complementaire_reeksen(tuple):
    if not stijgend(tuple):
        raise AssertionError('gegeven reeks is niet stijgend')
    list = verhogen(tuple)
    frequentie = frequentiereeks(tuple)
    complement = verhogen(frequentie)
    return (list, complement)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Lara Morren/complementaire-reeksen.py"",""fullName"":""Lara Morren"",""id"":""12088"",""status"":""correct"",""submissionID"":""6356050"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T18:36:55.000Z"",""labels"":""bcbt""}"
737,/home/maxiem/Downloads/files/Steffen De Keersmaeker/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    vorige = -1
    for getal in lijst:
        if getal < vorige:
            return False
        vorige = getal
    return True


def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    vorige = 0
    resultaat = []
    for index, getal in enumerate(lijst):
        aantal_keer = getal - vorige
        for _ in range(aantal_keer):
            resultaat.append(index)
        vorige = getal
    resultaat.append(len(lijst))
    return resultaat

    
def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    resultaat_list = []
    for index, getal in enumerate(lijst):
        resultaat_list.append(getal + index + 1)
    return resultaat_list
 
    
def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""    
    return verhogen(lijst), verhogen(frequentiereeks(lijst))


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Steffen De Keersmaeker/complementaire-reeksen.py"",""fullName"":""Steffen De Keersmaeker"",""id"":""5283"",""status"":""correct"",""submissionID"":""6405259"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T16:35:49.000Z"",""labels"":""keuz""}"
738,/home/maxiem/Downloads/files/Olivia Van der Sypt/complementaire-reeksen.py,"def stijgend(reeks):
    flag_stop = 0
    for i in range(1,len(reeks)):
        if reeks[i] < reeks[i-1]:
            flag_stop = 1
    if flag_stop == 1:
        return False
    else:
        return True


def frequentiereeks(reeks):
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    m = reeks[-1]
    result = []
    for i in range(1,m+2):
        teller = 0
        for j in range(len(reeks)):
            if i > reeks[j]:
                teller += 1
        result.append(teller)
    return result


def verhogen(reeks):
    result1 = []
    for i in range(len(reeks)):
        result1.append(reeks[i] + i+1)
    return result1


def complementaire_reeksen(reeks):
    x = stijgend(reeks)
    assert x == True, 'gegeven reeks is niet stijgend'
    return (verhogen(reeks),verhogen(frequentiereeks(reeks)))

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Olivia Van der Sypt/complementaire-reeksen.py"",""fullName"":""Olivia Van der Sypt"",""id"":""12120"",""status"":""correct"",""submissionID"":""6393357"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T15:21:38.000Z"",""labels"":""bcbt""}"
739,/home/maxiem/Downloads/files/hendrik kriekemans/complementaire-reeksen.py,"def stijgend(reeks):
    reekstest = list(reeks[:])
    reeks = list(reeks[:])
    reekstest.sort()
    if reeks == reekstest:
        return True
    else:
        return False
def frequentiereeks(reeks):
    assert (stijgend(reeks) == True),'gegeven reeks is niet stijgend'
    reeks = list(reeks)
    maximum = max(reeks) + 1
    reeksreeks = list([reeks] * maximum)
    check = 1
    frequentiereeks = []
    k = 0
    for element in reeksreeks:
        for e in reeks:
            if e < check:
                k += 1
        frequentiereeks.append(k)
        k = 0
        check += 1
    return frequentiereeks
def verhogen(reeks):
    bijtellen = 1
    index = 0
    nieuwereeks = []
    for getal in reeks:
        getal = reeks[index] + bijtellen
        nieuwereeks.append(getal)
        index += 1
        bijtellen += 1
    return nieuwereeks
def complementaire_reeksen(reeks):
    assert (stijgend(reeks) == True), 'gegeven reeks is niet stijgend'
    verhoogd = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    verhoogdfrequentie = verhogen(frequentie)
    return (verhoogd, verhoogdfrequentie)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( array ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""hendrik kriekemans/complementaire-reeksen.py"",""fullName"":""hendrik kriekemans"",""id"":""7979"",""status"":""correct"",""submissionID"":""6420602"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T16:48:39.000Z"",""labels"":""chem""}"
740,/home/maxiem/Downloads/files/Sebastian Wylleman/complementaire-reeksen.py,"def increasing(list):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False

    :param list:
    :return:
    """"""

    for index in range(1, len(list)):
        if list[index -1] > list[index]:
            return False

    return True

def frequency_sequence(list):
    """"""
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]

    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing

    :param list:
    :return:
    """"""

    assert increasing(list), 'given sequence is not increasing'

    teller = 0
    sequence = []

    for index in range(list[-1]+1):
        teller += list.count(index)
        sequence.append(teller)

    return sequence





def lift(given_list):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]

    :param list:
    :return:
    """"""

    liftlist = list(given_list)

    for index, element in enumerate(liftlist):
        liftlist[index] = element + index + 1

    return liftlist

def complementary_sequences(list):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing

    :param list:
    :return:
    """"""

    assert increasing(list), 'given sequence is not increasing'

    return lift(list), lift(frequency_sequence(list))

if __name__ == '__main__':
    import doctest
    print(doctest.testmod())",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( ERROR ( string ) ) ( expression_statement ( string ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( string ) ) ) ),"{""filename"":""Sebastian Wylleman/complementaire-reeksen.py"",""fullName"":""Sebastian Wylleman"",""id"":""12156"",""status"":""correct"",""submissionID"":""6349965"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T22:04:33.000Z"",""labels"":""keuz""}"
741,/home/maxiem/Downloads/files/Seyedomid Sobhani/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(1, len(sequence)):
        if sequence[i] < sequence[i-1]:
            return False
    return True


def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence), 'given sequence is not increasing'
    j, newSeq = 0, []
    for i in range(sequence[-1] + 1):
        for num in sequence:
            if num <= i:
                j += 1
        newSeq.append(j)
        j = 0
    return newSeq


def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    newSeq = []
    for i in enumerate(sequence):
        temp = i[0] + 1 + sequence[i[0]]
        newSeq.append(temp)
    return newSeq


def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    return lift(sequence), lift(frequency_sequence(sequence))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Seyedomid Sobhani/complementaire-reeksen.py"",""fullName"":""Seyedomid Sobhani"",""id"":""12157"",""status"":""correct"",""submissionID"":""6339866"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:01:01.000Z"",""labels"":""stat""}"
742,/home/maxiem/Downloads/files/Arthur Mestdagh/complementaire-reeksen.py,"def increasing(seq):
    """"""
    A function increasing that returns a Boolean value (bool) that indicates if the integers in the given sequence are increasing.
    Duplicates are allowed (in other words: you don't have to check if the sequence is strictly increasing).

    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    for i in range(len(seq) - 1):
        if seq[i + 1] < seq[i]:
            return False

    return True


def frequency_sequence(seq):
    """"""
    A function frequency_sequence that returns a new list containing the integers (int) in the frequency sequence of the given sequence.
    In case the given sequence is not increasing, the function must raise an AssertionError with the message given sequence is not increasing.

    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(seq) == True, ""given sequence is not increasing""

    m = seq[-1]
    fs = []

    for c in range(m+1):
        q = 0

        while seq[q] < c:
            q += 1

        if c > 0:
            fs.insert(c, q)

    fs.append(len(seq))

    return fs


def lift(seq):
    """"""
    A function lift that returns a new list containing the integers (int) of the given sequence that have been increased
    according to their position in the sequence -- that is, 1 added to the first integer in the given sequence,
    2 to the second integer, and so on.

    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    l = []
    for i in enumerate(seq):
        l.insert(i[0], seq[i[0]] + i[0] + 1)

    return l

def complementary_sequences(seq):
    """"""
    A function complementary_sequences that returns a tuple.
    The first element of the tuple is a new list containing the integers (int) of the given sequence that have been
    increased according to their position in the sequence.
    The second element of the tuple is a new list containing the integers (int) in the frequency sequence of the given
    sequence that have been increased according to their position in the sequence.
    In case the given sequence is not increasing, the function must raise an AssertionError with the message given
    sequence is not increasing.

    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(seq) == True, ""given sequence is not increasing""

    lseq = lift(seq)
    lfseq = lift(frequency_sequence(seq))

    return lseq, lfseq


if __name__ == '__main__':
    import doctest

    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( formal_parameters ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( formal_parameters ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( formal_parameters ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( formal_parameters ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ( identifier ) ( ERROR ( formal_parameters ( ERROR ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ( identifier ) ( formal_parameters ( array_pattern ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ( ERROR ( number ) ) ) ) ( identifier ) ( formal_parameters ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( string ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Arthur Mestdagh/complementaire-reeksen.py"",""fullName"":""Arthur Mestdagh"",""id"":""12159"",""status"":""correct"",""submissionID"":""6334573"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T15:42:13.000Z"",""labels"":""keuz""}"
743,/home/maxiem/Downloads/files/Lennert Devriendt/complementaire-reeksen.py,"def stijgend(reeks):
    for i in range(1, len(reeks)):
        if reeks[i] < reeks[i-1]:
            return False
    return True

def frequentiereeks(reeks):
    lijst = []
    aantal = 0
    grens = 1
    assert stijgend(reeks) is True, 'gegeven reeks is niet stijgend'
    for n in range(reeks[-1] + 1):
        for getal in reeks:
            if getal < grens:
                aantal += 1
        lijst.append(aantal)
        aantal = 0
        n += 1
        grens += 1
    return lijst

def verhogen(reeks):
    lijst = []
    for i, element in enumerate(reeks, 1):
        som = i + element
        lijst.append(som)
    return lijst

def complementaire_reeksen(reeks):
    reeks1 = verhogen(reeks)
    reeks2 = verhogen(frequentiereeks(reeks))
    return reeks1, reeks2",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Lennert Devriendt/complementaire-reeksen.py"",""fullName"":""Lennert Devriendt"",""id"":""7935"",""status"":""correct"",""submissionID"":""6351869"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T10:45:26.000Z"",""labels"":""geog""}"
744,/home/maxiem/Downloads/files/Manu Claessens/complementaire-reeksen.py,"def increasing(sequence):

    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    for index, char in enumerate(sequence):
        if index == 0:
            last_char = char
        else:
            if char < last_char:
                return False
        last_char = char

    return True

def frequency_sequence(sequence):

    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(sequence), ""given sequence is not increasing""

    sol = []
    counter = 0
    for i in range(max(sequence) + 1):
        counter += sequence.count(i)
        sol.append(counter)

    return sol

def lift(sequence):

    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    sol = []
    counter = 1
    for element in sequence:
        sol.append(element + counter)
        counter += 1

    return sol

def complementary_sequences(sequence):

    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(sequence), ""given sequence is not increasing""
    return lift(sequence), lift(frequency_sequence(sequence))

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Manu Claessens/complementaire-reeksen.py"",""fullName"":""Manu Claessens"",""id"":""5108"",""status"":""correct"",""submissionID"":""6341996"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T22:09:06.000Z"",""labels"":""stat""}"
745,/home/maxiem/Downloads/files/Loes Breekelmans/complementaire-reeksen.py,"def stijgend(lijst_tuple):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(1, len(lijst_tuple)):
        if lijst_tuple[i] < lijst_tuple[i-1]:
            return False
    return True
# krijg een extra output
#bij de false is het juist, bij true nog niet

def frequentiereeks(lijst_tuple):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(lijst_tuple) is False:
        raise AssertionError('gegeven reeks is niet stijgend')

    resultaat = []
    getal = 0
    for i in range(1, lijst_tuple[-1]+2): #want het laatste getal + 2
        for e in lijst_tuple:
            if e < i:
                getal += 1
        resultaat.append(getal)
        getal = 0
    return resultaat

def verhogen(lijst_tuple):
    lijst_tuple = list(lijst_tuple)
    for i in range(len(lijst_tuple)):
        lijst_tuple[i] += (i + 1)
    return lijst_tuple

def complementaire_reeksen(lijst_tuple):
    eerste = verhogen(lijst_tuple)
    tweede = frequentiereeks(lijst_tuple)
    derde = verhogen(tweede)
    #hier moet nog iets tussen voor als de reekst nt stijgend is!
    return (eerste, derde)
    
if __name__ =='__main__':
	import doctest
	doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( false ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( true ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Loes Breekelmans/complementaire-reeksen.py"",""fullName"":""Loes Breekelmans"",""id"":""12165"",""status"":""correct"",""submissionID"":""6372663"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T11:03:49.000Z"",""labels"":""geog""}"
746,/home/maxiem/Downloads/files/Kim Bettens/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(lijst):
    """"""
    Nagaan of invoer stijgend is, dubbele getallen mogen
    :param lijst_start: lijst met m getallen
    :return: boolean, true als lijst stijgend is
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    lijst = list(lijst)
    lijst_gesorteerd = sorted(lijst)
    return lijst == lijst_gesorteerd

def frequentiereeks(lijst):
    """"""
    Frequentiereeks van reeks getallen weergeven,
    indien reeks getallen niet stijgend --> AssertionError met boodschap
    'gegeven reeks is niet stijgend'
    :param lijst: reeks met m getallen
    :return: freqentiereeks of AssertionError
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    if stijgend(lijst):
        m = lijst[-1]
        freq_lijst = [0] * (m+1)
        for getal in lijst:
            for i in range(getal, m+1):
                freq_lijst[i] += 1
        return freq_lijst
    else:
        raise AssertionError('gegeven reeks is niet stijgend')

def verhogen(lijst):
    """"""
    Lijst genereren met daarin getal van oorspronkelijke lijst opgeteld bij plaats in lijst
    :param lijst: reeks met m getallen
    :return: lijst met getallen uit oorspronkelijke lijst telkens verhoogd met plaats
    in de lijst
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst_verhoogd = []
    for i, getal in enumerate(lijst):
        lijst_verhoogd.append(getal + i + 1)
    return lijst_verhoogd

def complementaire_reeksen(lijst):
    """"""
    :param lijst: reeks met m getallen
    :return: tuple met lijst_1 = lijst verhoogd met positie in lijst,
    lijst_2_verhoogd = frequentiereeks van de oorspronkelijke lijst
    ook verhoogd met positie in lijst
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    lijst_1 = verhogen(lijst)
    lijst_2 = frequentiereeks(lijst)
    lijst_2_verhoogd = verhogen(lijst_2)
    return lijst_1, lijst_2_verhoogd

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( update_expression ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( string ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( ERROR ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( return_statement ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( ERROR ( identifier ) ( identifier ) ) ( sequence_expression ( assignment_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Kim Bettens/complementaire-reeksen.py"",""fullName"":""Kim Bettens"",""id"":""12166"",""status"":""correct"",""submissionID"":""6368338"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T19:22:04.000Z"",""labels"":""keuz""}"
747,/home/maxiem/Downloads/files/Kylian Baeyens/complementaire-reeksen.py,"def stijgend(listortuple):
    x = tuple(listortuple)
    count = 0
    for i in range(1, len(x)):
        if x[i] >= x[i-1]:
            count += 1
    return True if count + 1 == len(x) else False
def frequentiereeks(listortuple):
    assert stijgend(listortuple) == True, ""gegeven reeks is niet stijgend""
    f = []
    for i in range(1, int(listortuple[-1] + 2)):
        x = 0
        for a in listortuple:
            if a < i:
                x += 1
        f.append(x)
    return f
def verhogen(listortuple):
    verhoogd = []
    for i in range(len(listortuple)):
        x = listortuple[i] + int(i) + 1
        verhoogd.append(x)
    return verhoogd
def complementaire_reeksen(listortuple):
    assert stijgend(listortuple) == True, ""gegeven reeks is niet stijgend""
    return (verhogen(listortuple),verhogen(frequentiereeks(listortuple)))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( ERROR ( identifier ) ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Kylian Baeyens/complementaire-reeksen.py"",""fullName"":""Kylian Baeyens"",""id"":""11821"",""status"":""correct"",""submissionID"":""6380205"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T19:15:17.000Z"",""labels"":""bcbt""}"
748,/home/maxiem/Downloads/files/Fjonna De Vroe/complementaire-reeksen.py,"def stijgend(pn):
    # controleer of de cijfers stijgen (niet strikt dus ook gelijk)

    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    pn = list(pn)
    if sorted(pn) == pn:
        return True
    return False

def frequentiereeks(pn):
    # frequentiereeks van pn lengte m+1

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    nieuw = []
    if not stijgend(pn):
        raise AssertionError('gegeven reeks is niet stijgend')
    for i in range(1, int(pn[-1]) + 2):
        plus = 0
        for getal in pn:
            if int(getal) < i:
                plus += 1
        nieuw.append(plus)
    return nieuw

def verhogen(pn):
    # frequentiereeks van de frequentiereeks van pn

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    oplossing = []
    for count, getal in enumerate(pn):
        getal = int(getal)
        getal2 = getal + count + 1
        oplossing.append(getal2)
    return oplossing

def complementaire_reeksen(pn):
    # bij beide reeksen positie bij optellen

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    oplossing = []
    if not stijgend(pn):
        raise AssertionError('gegeven reeks is niet stijgend')
    eerste_element = list(verhogen(pn))
    tweede_element = list(frequentiereeks(pn))
    tweede_element = list(verhogen(tweede_element))
    oplossing.append(eerste_element)
    oplossing.append(tweede_element)
    return tuple(oplossing)


if __name__ == '__main__':
    import doctest

    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Fjonna De Vroe/complementaire-reeksen.py"",""fullName"":""Fjonna De Vroe"",""id"":""12116"",""status"":""correct"",""submissionID"":""6386365"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T16:55:05.000Z"",""labels"":""bcbt""}"
749,/home/maxiem/Downloads/files/Daniel Leleu/complementaire-reeksen.py,"def increasing(seq):
    Bl = False
    for i in range(1,len(seq)):
        if seq[i] >= seq[i-1]:
            Bl = True
        else:
            Bl = False
    return(Bl)
            
def frequency_sequence(seq):
    inc = increasing(seq)
    if inc = False:
        raise AssertionError:
            print(""given sequence is not increasing"")
        
    freq_l = []
    freq_i= []
    for j in seq:
        for i in index:
            if j< i:
                freq_i.append(True)
                count = sum(freq_i)
                freq_l.append(count)
            
    index = []
    for i,j in enumerate(seq):
        index.append(i+1)
    
    
def lift(seq):
    l = []
    for i,j in enumerate(seq):
        k = i + j+1
        l.append(k)
    return(l)
        

def complementary_sequences(seq):
    return(lift(seq), frequency_sequence(seq))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Daniel Leleu/complementaire-reeksen.py"",""fullName"":""Daniel Leleu"",""id"":""12171"",""status"":""compilation error"",""submissionID"":""6414729"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T13:10:38.000Z"",""labels"":""stat""}"
750,/home/maxiem/Downloads/files/Amila Thalakotunage/complementaire-reeksen.py,"# @author: Thalakotunage A.H., Created on Sun Nov 01 21:54:50 2020

def complementary_sequences(sequence):

    """"""
    Returns a tuple containing in which the first item is the increased list of given sequence with respect to the
    position of the elements while the second item of the tuple being a list of increased sequence of the frequency
    sequence of the given initial argument-sequence.
    """"""

    if not increasing(sequence):
        raise AssertionError('given sequence is not increasing')

    first_item = lift(sequence)
    second_item = lift(frequency_sequence(sequence))

    return (first_item, second_item)

def lift(sequence):
    """"""
    Returns a list containing the values increased by the corresponding position of each

    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]

    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    """"""

    lifted_sequence = [pos + item for pos, item in enumerate(sequence, 1)]

    return lifted_sequence

def frequency_sequence(sequence):
    """"""
    Returns a list containing number of prime occurrences/frequency which are less than the values ranging
    from 1 to the maximum plus one of the list

    >>> frequency_sequence((0, 4, 5, 6, 7, 12, 14, 15, 16))
    [1, 1, 1, 1, 2, 3, 4, 5, 5, 5, 5, 5, 6, 6, 7, 8, 9]

    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    """"""

    if not increasing(sequence):
        raise AssertionError('given sequence is not increasing')

    max_value = max(sequence)
    frequency_list = []

    for digit in range(1, max_value + 2):
        count = 0
        for element in sequence:
            if element < digit: # number of primes in the list less than the digit
                count += 1
        frequency_list.append(count)

    return frequency_list

def increasing(sequence):
    """"""
    Returns True if the given sequence of numbers are in ascending order and positive integers, else False

    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    True
    """"""

    if not isinstance(sequence, (list, tuple, int)):  # check the type of the argument and its characters
        return False

    if not list(sequence) == sorted(sequence):
        return False

    for element in sequence:
        if not element >= 0:
            return False

    return True


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ( decorator ( member_expression ( member_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( property_identifier ) ) ( ERROR ) ( property_identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( number ) ( number ) ( number ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Amila Thalakotunage/complementaire-reeksen.py"",""fullName"":""Amila Thalakotunage"",""id"":""12187"",""status"":""correct"",""submissionID"":""6225428"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-01T23:02:57.000Z"",""labels"":""keuz""}"
751,/home/maxiem/Downloads/files/Gustave Beuren/complementaire-reeksen.py,"def stijgend(lijst):

    if isinstance(lijst,tuple):
        lijst_geordend = tuple(sorted(lijst))


    if isinstance(lijst, list):
        lijst_geordend = sorted(lijst)

    if lijst == lijst_geordend:
        return True
    else:
        return False

def frequentiereeks(lijst):
    nieuwe_lijst = []
    if stijgend(lijst):
       m = lijst[len(lijst)-1]
       for n in range(0,m+1):
           teller = 0
           for getallen in lijst:
               if getallen <= n:
                   teller += 1
           nieuwe_lijst += [teller]
       return nieuwe_lijst


    else:
        assert False, ""gegeven reeks is niet stijgend""

def verhogen(lijst):
    nieuwe_lijst = []
    for n in range(1,len(lijst)+1):
        nieuwe_lijst += [n + lijst[n-1]]
    return nieuwe_lijst

def complementaire_reeksen(lijst):
    if stijgend(lijst):
        verhoogde_lijst_1 = verhogen(lijst)
        verhoogde_lijst_2 = verhogen(frequentiereeks(lijst))
        return (verhoogde_lijst_1,verhoogde_lijst_2)
    else:
        assert False, ""gegeven reeks is niet stijgend""",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Gustave Beuren/complementaire-reeksen.py"",""fullName"":""Gustave Beuren"",""id"":""12188"",""status"":""correct"",""submissionID"":""6411819"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T10:02:00.000Z"",""labels"":""keuz""}"
752,/home/maxiem/Downloads/files/Emile Roels/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    stijg = True
    vorige = reeks[0]
    for element in reeks[0:]:
        if stijg is True:
            if element >= vorige:
                stijg = True
                vorige = element
            elif element < vorige:
                stijg = False
    return stijg

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(reeks) is False:
        raise AssertionError('gegeven reeks is niet stijgend')
    elif stijgend(reeks) is True:
        getal = 1
        l = []
        aantal = 0
        for n in range(reeks[-1] +1):
            for element in reeks:
                if element < getal:
                    aantal += 1
            l.append(aantal)
            getal += 1
            n += 1
            aantal = 0
        return l



def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    l = []
    for index, getal in enumerate(reeks):
        l.append(getal + index + 1)
    return l

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(reeks) is False:
        raise AssertionError('gegeven reeks is niet stijgend')
    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Emile Roels/complementaire-reeksen.py"",""fullName"":""Emile Roels"",""id"":""7933"",""status"":""correct"",""submissionID"":""6351866"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T10:45:05.000Z"",""labels"":""geog""}"
753,/home/maxiem/Downloads/files/Hanne François/complementaire-reeksen.py,"def stijgend(tuple):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    lengte = 1
    for index, karakter in enumerate(tuple):
        if index > 0:
            if int(karakter) >= int(tuple[index - 1]):
                lengte += 1
    return bool(lengte == len(tuple))


def frequentiereeks(tuple):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(tuple), 'gegeven reeks is niet stijgend'
    lengte = tuple[-1] + 1
    niewe_lijst = []
    for index in range(lengte):
        getal = 0
        for waarde in tuple:
            if waarde <= index:
                getal += 1
        niewe_lijst += [getal]
    return niewe_lijst


def verhogen(tuple):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogd = []
    for index, karakter in enumerate(tuple):
        verhoogd += [int(karakter) + 1 + index]
    return verhoogd


def complementaire_reeksen(tuple):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(tuple), verhogen((frequentiereeks(tuple)))


if __name__ == '__main__':
    import doctest

    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Hanne François/complementaire-reeksen.py"",""fullName"":""Hanne François"",""id"":""12190"",""status"":""correct"",""submissionID"":""6340377"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:52:07.000Z"",""labels"":""geol""}"
754,/home/maxiem/Downloads/files/Maïté Van Hecke/complementaire-reeksen.py,"def stijgend(lijst):
    for index in range(0, len(lijst)-1):
        cijfer1 = lijst[index]
        cijfer2 = lijst[index + 1]
        if cijfer1 > cijfer2:
            return False
    return True
def frequentiereeks(lijst):
    assert stijgend(lijst) == True , 'gegeven reeks is niet stijgend'
    m = max(lijst)
    nieuwe_lijst = []
    for index in range(1, m + 2):
        count = 0
        for element in lijst:
            if element< index:
                count += 1
        nieuwe_lijst.append(count)
    return nieuwe_lijst
def verhogen(reeks):
    nieuwe_reeks = []
    for index in range(0, len(reeks)):
        nieuw_element = reeks[index] + index + 1
        nieuwe_reeks.append(nieuw_element)
    return nieuwe_reeks
    
def complementaire_reeksen(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    verhoogde_reeks = verhogen(reeks)
    assert stijgend(verhoogde_reeks), 'gegeven reeks is niet stijgend'
    lijst_2 = verhogen(frequentiereeks(reeks))
    return (verhoogde_reeks, lijst_2)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Maïté Van Hecke/complementaire-reeksen.py"",""fullName"":""Maïté Van Hecke"",""id"":""8155"",""status"":""correct"",""submissionID"":""6253812"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-03T17:45:43.000Z"",""labels"":""bcbt""}"
755,/home/maxiem/Downloads/files/Hanno Schroyen/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(lijst):

    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    nieuwe_lijst = []
    for positie, element in enumerate(lijst):
        if nieuwe_lijst and nieuwe_lijst[positie - 1] > element:
            return False
        nieuwe_lijst.append(element)
    return True


def frequentiereeks(lijst):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(lijst), 'gegeven reeks is niet stijgend'

    nieuwe_lijst = []

    for x in range(max(lijst) + 1):
        kleiner = 0
        for element in lijst:
            if element < x + 1:
                kleiner += 1
        nieuwe_lijst.append(kleiner)
    return nieuwe_lijst


def verhogen(lijst):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    # nieuwe_lijst = []
    # for positie, element in enumerate(lijst):
    #     element += positie + 1
    #     nieuwe_lijst.append(element)

    nieuwe_lijst = [x + positie + 1 for positie, x in enumerate(lijst)]

    return nieuwe_lijst


def complementaire_reeksen(lijst):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(lijst), 'gegeven reeks is niet stijgend'

    verhoogde_lijst = verhogen(lijst)
    verhoogde_frequentiereeks = verhogen(frequentiereeks(lijst))

    return verhoogde_lijst, verhoogde_frequentiereeks


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( identifier ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Hanno Schroyen/complementaire-reeksen.py"",""fullName"":""Hanno Schroyen"",""id"":""12191"",""status"":""correct"",""submissionID"":""6361382"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T13:11:09.000Z"",""labels"":""keuz""}"
756,/home/maxiem/Downloads/files/Ruben Vercruysse/complementaire-reeksen.py,"def stijgend(pn):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(len(pn) - 1):
        if pn[i] > pn[i + 1]:
            return False

    return True


def frequentiereeks(pn):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(pn):
        raise AssertionError(""gegeven reeks is niet stijgend"")

    frequentie = 0
    frequentie_list = []
    for getal in range(1, max(pn) + 2):  # + 1 voor  beginnen tellen vanaf 0, +1 voor max + 1
        # frequentie kleinere getallen = frequentie getallen vorige + frequentie getal 1 kleiner (stijgende reeks)
        frequentie += pn.count(getal - 1)

        frequentie_list.append(frequentie)

    return frequentie_list


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]

    """"""
    reeks_verhoogd = []
    i = 1
    for getal in reeks:
        getal_verhoogd = getal + i
        reeks_verhoogd.append(getal_verhoogd)
        i += 1

    return reeks_verhoogd


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))


",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( number ) ) ) ( binary_expression ( unary_expression ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( ERROR ( identifier ) ( number ) ( identifier ) ) ( arguments ( identifier ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Ruben Vercruysse/complementaire-reeksen.py"",""fullName"":""Ruben Vercruysse"",""id"":""12199"",""status"":""correct"",""submissionID"":""6359877"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T12:25:27.000Z"",""labels"":""chem""}"
757,/home/maxiem/Downloads/files/Jolien van Hommelen/complementaire-reeksen.py,"import doctest


def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    for i, e in enumerate(sequence[1:]):
        if not e >= sequence[i]:
            return False
    return True


def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    if increasing(sequence):
        frequency_sequence = [sequence.count(0)]

        for m in range(1, max(sequence) + 1):
            m_count = sequence.count(m)
            frequency_sequence.append(m_count + frequency_sequence[m - 1])

        return frequency_sequence

    else:
        raise AssertionError(""given sequence is not increasing"")


def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    new_list = []

    for i, e in enumerate(sequence):
        new_list.append(i + 1 + e)

    return new_list


def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    return lift(sequence), lift(frequency_sequence(sequence))


doctest.testmod()
",( program ( expression_statement ( binary_expression ( call_expression ( import ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jolien van Hommelen/complementaire-reeksen.py"",""fullName"":""Jolien van Hommelen"",""id"":""12196"",""status"":""correct"",""submissionID"":""6380277"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T19:22:38.000Z"",""labels"":""keuz""}"
758,/home/maxiem/Downloads/files/Marte Meeusen/complementaire-reeksen.py,"def stijgend(lijst):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    lengte = len(lijst) - 1
    voorwaarde = True
    for i in range(lengte):
        if lijst[i] > lijst[i+1]:
            voorwaarde = False
    return voorwaarde

def frequentiereeks(lijst):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    #als de reek stijgend is, kunnen we verder
    #anders moeten we een foutmelding meegeven
    frequentiereek_stijgend = stijgend(lijst)
    assert frequentiereek_stijgend == True, ""gegeven reeks is niet stijgend""

    #frequentiereek is stijgend dus we kunnen verder

    #tot welk cijgfer moeten we nagaan hoeveel cijfers kleiner zijn
    maximaal = lijst[-1] + 1

    #lege lijst definiëren
    resultaat = []

    #for lus hoeveel cijfers telkens kleiner zijn
    for i in range(1, maximaal):
        #telkens opnieuw bij het begin van de lus beginnen
        index = 0
        #telkens opnieuw met 0 beginnen
        aantal = 0
        #als het cijfer echt kleiner is, moeten we bepalen hoeveel cijfers daarna ook kleiner zijn
        #daarom een while lus
        while lijst[index] < i:
            #als het cijfer kleiner is, aantal += 1
            aantal += 1
            #volgend cijfer in de lijst nagaan of het kleiner is in de lijst
            index += 1
        resultaat.append(aantal)
    #hoeveel cijfers kleiner dan het laatste getal = het laatste getal
    resultaat.append(len(lijst))

    return resultaat

def verhogen(lijst):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    index = 0
    resultaat = []

    for i in range(1, len(lijst) + 1):
        #getal in de lijst inlezen
        getal = lijst[index]
        #getal verhogen met de positie
        getal_lijst = getal + i
        #nieuwe index, volgend getal
        index += 1
        #verhoogd getal toevoegen aan de lijst
        resultaat.append(getal_lijst)
    return resultaat

def complementaire_reeksen(lijst):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    lijst_1 = verhogen(lijst)
    frequentiereeks_2 = frequentiereeks(lijst)
    lijst_2 = verhogen(frequentiereeks_2)
    return lijst_1, lijst_2

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Marte Meeusen/complementaire-reeksen.py"",""fullName"":""Marte Meeusen"",""id"":""12084"",""status"":""correct"",""submissionID"":""6359277"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T11:48:24.000Z"",""labels"":""bcbt""}"
759,/home/maxiem/Downloads/files/Mireau Lijbaert/complementaire-reeksen.py,"def increasing(seq):
    for a in range(1, len(seq)):
        if bool(seq[a-1] > seq[a]):
            return False
    return True

def frequency_sequence(seq):
    assert increasing(seq), ""given sequence is not increasing""
    p = max(seq)
    freq = []
    for i in range(1, p+2):
        a = 0
        for x in seq:
            if x < i:
                a += 1
        freq.append(a)
    return freq

def lift(seq):
    dyeLb = []
    for n, x in enumerate(seq):
        dyeLb.append(n+x+1)
    return dyeLb

def complementary_sequences(seq):
    return (lift(seq), lift(frequency_sequence(seq)))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Mireau Lijbaert/complementaire-reeksen.py"",""fullName"":""Mireau Lijbaert"",""id"":""12201"",""status"":""correct"",""submissionID"":""6380014"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T18:45:07.000Z"",""labels"":""chem""}"
760,/home/maxiem/Downloads/files/James Geldhof/complementaire-reeksen.py,"def stijgend(lijst):

    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    lijst = list(lijst)

    if sorted(lijst) == lijst:
        return True

    else:
        return False

def frequentiereeks(lijst):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    lijst = list(lijst)

    if stijgend(lijst) == False:
        assert False, ""gegeven reeks is niet stijgend""

    else:
        m1 = list(range(lijst[-1] + 2))
        freq = []
        for i in m1[1:]:
            ind = 0
            for j in lijst:
                if j < i:
                    ind += 1
            freq.append(ind)

    return freq

def verhogen(lijst):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    lijst = list(lijst)

    up = []
    plus = 1
    for i in lijst:
        up.append(i + plus)
        plus += 1

    return up

def complementaire_reeksen(lijst):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""


    lijst = list(lijst)

    if stijgend(lijst) == False:
        assert False, ""gegeven reeks is niet stijgend""



    return verhogen(lijst), verhogen(frequentiereeks(lijst))



if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""James Geldhof/complementaire-reeksen.py"",""fullName"":""James Geldhof"",""id"":""12110"",""status"":""correct"",""submissionID"":""6387121"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T18:19:34.000Z"",""labels"":""bcbt""}"
761,/home/maxiem/Downloads/files/Lore Lamote/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    antwoord = True
    reeks = list(reeks)
    for positie, element in enumerate(reeks):
        if positie == 0:
            h = 1
        elif int(element) - reeks[positie - 1] < 0:
            antwoord = False
            return antwoord
    return antwoord


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    eindgetal = reeks[-1] + 1
    lijst = [0] * eindgetal
    for index in range(0, eindgetal):
        for n in reeks:
            if index >= n:
                lijst[index] += 1
    return lijst

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    reeks = list(reeks)
    for index, getal in enumerate(reeks):
        reeks[index] = getal + index + 1
    return reeks

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    lijst = []
    verhoogd = verhogen(reeks)
    freq = frequentiereeks(reeks)
    lijst.append(verhoogd)
    freq_verhoogd = verhogen(freq)
    lijst.append(freq_verhoogd)
    return tuple(lijst)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Lore Lamote/complementaire-reeksen.py"",""fullName"":""Lore Lamote"",""id"":""12202"",""status"":""correct"",""submissionID"":""6409466"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T23:08:28.000Z"",""labels"":""geog""}"
762,/home/maxiem/Downloads/files/Tijs Vandenneucker/complementaire-reeksen.py,"def stijgend(reeks):
    for x in range(len(reeks)):
        if x == len(reeks) - 1:
            return True

        elif not reeks[x] <= reeks[x + 1]:
            return False


def frequentiereeks(reeks):
    if stijgend(reeks) is False:
        raise AssertionError('gegeven reeks is niet stijgend')
    lijst = []

    for x in range(int(reeks[-1])+1):
        getal = 0
        for _ in reeks:
            if _ < x+1:
                getal += 1
        lijst.append(getal)

    return lijst


def verhogen(reeks):
    return [int(_) + (x+1) for x, _ in enumerate(reeks)]


def complementaire_reeksen(reeks):
    eerste_deel_tuple = verhogen(reeks)
    tweede_deel_tuple = verhogen(frequentiereeks(reeks))
    return (eerste_deel_tuple, tweede_deel_tuple)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Tijs Vandenneucker/complementaire-reeksen.py"",""fullName"":""Tijs Vandenneucker"",""id"":""12204"",""status"":""correct"",""submissionID"":""6366490"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T15:46:03.000Z"",""labels"":""chem""}"
763,/home/maxiem/Downloads/files/Eva De Mits/complementaire-reeksen.py,"# check if the integers in the given sequence are increasing
def increasing(sequence):

    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    
    for i in range(len(sequence) - 1):
        if sequence[i] > sequence[i + 1]:
            return False
    return True


def frequency_sequence(sequence):

    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(sequence), ""given sequence is not increasing""
    # count elements in new sequence
    count = 0
    new_sequence = []
    while len(new_sequence) <= sequence[-1]:
        count += 1
        # number of elements smaller then 1, 2, 3, 4 ...
        count_new_sequence = sum(number < count for number in sequence)
        new_sequence.append(count_new_sequence)
    return new_sequence


def lift(sequence):

    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    new_sequence = []
    for index, number in enumerate(sequence):
        new_sequence.append(number + index + 1)
    return new_sequence


def complementary_sequences(sequence):

    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(sequence), ""given sequence is not increasing""

    return lift(sequence), lift(frequency_sequence(sequence))
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Eva De Mits/complementaire-reeksen.py"",""fullName"":""Eva De Mits"",""id"":""11094"",""status"":""correct"",""submissionID"":""6337966"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T13:02:38.000Z"",""labels"":""geog""}"
764,/home/maxiem/Downloads/files/Akke De Boever/complementaire-reeksen.py,"def stijgend(reeks):
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))

def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    freq, waarde, aantal = [], 0, 0
    for getal in reeks:
        while waarde < getal:
            freq.append(aantal)
            waarde += 1
            
        aantal += 1

    freq.append(aantal)

    return freq

def verhogen(reeks):
    return [element + positie + 1 for positie, element in enumerate(reeks)]

def complementaire_reeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Akke De Boever/complementaire-reeksen.py"",""fullName"":""Akke De Boever"",""id"":""12206"",""status"":""correct"",""submissionID"":""6421593"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T17:55:50.000Z"",""labels"":""chem""}"
765,/home/maxiem/Downloads/files/Roselien Verhaegen/complementaire-reeksen.py,"def stijgend(lijst_tupple):
    lijst = [0]
    n = 0
    for i in lijst_tupple:
        if i >= lijst[n]:
            lijst.append(i)
            n += 1
    if len(lijst) == len(lijst_tupple) + 1:
        return True
    else: 
        return False

def frequentiereeks(lijst_tupple):
    if stijgend(lijst_tupple) == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        laatste = lijst_tupple[len(lijst_tupple) - 1] + 1
        lijst = [0] * laatste
        for i in lijst_tupple:
            lijst = lijst[:i] + [getal + 1 for getal in lijst[i:]]
    return lijst
    
def verhogen(lijst_tuple):
    # de reeks moet telkens verhoogt worden met de positie waar het element zich bevindt
    nieuwe_lijst = []
    positie = 1
    for i in lijst_tuple:
        nieuwe_i = i + positie
        nieuwe_lijst.append(nieuwe_i)
        positie += 1
    return nieuwe_lijst

def complementaire_reeksen(lijst_tuple):
    if stijgend(lijst_tuple) == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        verhogen1 = verhogen(lijst_tuple)
        deel1 = frequentiereeks(lijst_tuple)
        frequentiereeks1 = verhogen(deel1)
    
    return verhogen1, frequentiereeks1",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( array ( number ) ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( array ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Roselien Verhaegen/complementaire-reeksen.py"",""fullName"":""Roselien Verhaegen"",""id"":""12034"",""status"":""correct"",""submissionID"":""6372065"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:22:31.000Z"",""labels"":""bcbt""}"
766,/home/maxiem/Downloads/files/Karen Desmedt/complementaire-reeksen.py,"def stijgend(lijst):
    vorig_getal = 0
    for element in lijst:
        if vorig_getal <= element:
            vorig_getal = element
        else:
            return False
        
    return True

def frequentiereeks(lijst):
    stijgen = stijgend(lijst)

    aantal = int(lijst[-1])+1
    nieuwelijst = []
    for i in range(aantal):
        totaal = 0
        for element in lijst:
            if int(element) < (i+1):
                totaal += 1
        nieuwelijst.extend([totaal])
    if stijgen is False:
        assert False, ""gegeven reeks is niet stijgend""
    
    else:
        return nieuwelijst
def verhogen(lijst):
    lengte = len(lijst)
    nieuwelijst = []
    for i in range(lengte):
        nieuw = lijst[i]+i+1
        nieuwelijst.extend([nieuw])
    return nieuwelijst
    
def complementaire_reeksen(lijst):
    stijgen = stijgend(lijst)
    verhoogd = verhogen(lijst)
    
    if stijgen is False:
        assert False, ""gegeven reeks is niet stijgend""
    laatst = verhoogd[-1]+2
    nieuw = []
    for i in range(laatst):
        if i != 0:
            if i not in verhoogd:
                nieuw.extend([i])
    return verhoogd, nieuw",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( array ( identifier ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( array ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( array ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Karen Desmedt/complementaire-reeksen.py"",""fullName"":""Karen Desmedt"",""id"":""12208"",""status"":""correct"",""submissionID"":""6370869"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T09:08:04.000Z"",""labels"":""chem""}"
767,/home/maxiem/Downloads/files/Geike Heremans/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    teller = 0
    for index in range(len(lijst) - 1):
        if lijst[index] <= lijst[index + 1]:
            teller += 1
    if teller == (len(lijst) - 1):
        return True
    else:
        return False

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    nieuwe_lijst = []
    for i in range(1, lijst[-1] + 2):
        tel = len([a for a in lijst if a < i])
        nieuwe_lijst.append(tel)
    return nieuwe_lijst

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    nieuwe_lijst = []
    for i, getal in enumerate(lijst):
        nieuwe_lijst.append(getal + i + 1)
    return nieuwe_lijst

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""

    verhoogd = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    frequentie = verhogen(frequentie)
    nieuw = verhoogd, frequentie
    return nieuw",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Geike Heremans/complementaire-reeksen.py"",""fullName"":""Geike Heremans"",""id"":""12091"",""status"":""correct"",""submissionID"":""6377359"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:46:31.000Z"",""labels"":""bcbt""}"
768,/home/maxiem/Downloads/files/Kobe Scherpereel/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    tf = True
    i = 0
    while i < len(lijst) - 1:
        if lijst[i] > lijst[i + 1]:
            tf = False
        i += 1
    return tf
def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    n = 1
    p = []
    if stijgend(lijst) == True:
        while n != lijst[-1] + 2:
            tot = 0
            i = 0
            while i != len(lijst):
                if lijst[i] < n:
                    tot += 1
                i+= 1
            p.append(tot)
            n += 1
    else:
        raise AssertionError('gegeven reeks is niet stijgend')

    return p

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    p = []
    for i in range(len(lijst)):
        n = i + 1
        tot = lijst[i] + n
        p.append(tot)
    return p

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(lijst) == True:
        t = ()
        p = verhogen(lijst)
        q = frequentiereeks(lijst)
        q = verhogen(q)
        t += p, q 
    else:
        raise AssertionError('gegeven reeks is niet stijgend')
    return t
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Kobe Scherpereel/complementaire-reeksen.py"",""fullName"":""Kobe Scherpereel"",""id"":""12209"",""status"":""correct"",""submissionID"":""6377412"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:49:32.000Z"",""labels"":""chem""}"
769,/home/maxiem/Downloads/files/Mira Van Eesbeek/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    teller = 0
    lengte = len(reeks)
    for index in range(lengte - 1):
        if reeks[index + 1] >= reeks[index]:
            teller += 1

    return bool(teller == lengte - 1)

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    nieuw = []
    for i in range(1, lijst[-1] + 2):  # range gaat niet tot laatste getal
        tel = len([a for a in lijst if a < i])
        nieuw.append(tel)
    return nieuw


def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    nieuwe_lijst = []
    for i, getal in enumerate(lijst):
        nieuwe_lijst.append(getal + i + 1)

    return nieuwe_lijst


def complementaire_reeksen(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    
    lijst1 = verhogen(lijst)
    freq = frequentiereeks(lijst)
    lijst2 = verhogen(freq)
    return (lijst1, lijst2)



if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Mira Van Eesbeek/complementaire-reeksen.py"",""fullName"":""Mira Van Eesbeek"",""id"":""12112"",""status"":""correct"",""submissionID"":""6377353"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:46:13.000Z"",""labels"":""bcbt""}"
770,/home/maxiem/Downloads/files/Elien Vrancken/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    reeks is reeks getallen als list of tuple
    functie geeft Booleaanse waarde terug die aangeeft of reeks al dan niet stijgend is
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return bool(list(reeks) == list(sorted(reeks)))

def frequentiereeks(reeks):
    """"""
    functie geeft nieuwe lijst met getallen van de frequentiereeks van de gegeven reeks
    als gegeven reeks niet stijgend is: AssertionError
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    reeks = list(reeks) #als tuple, omzetten naar lijst
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    reeks2 = []
    i = 1 #vanaf 1 beginnen tellen tot hoogste

    while i <= reeks[-1] + 1:
        count = 0
        for cijfer in reeks:#elk cijfer uit reeks apart afgaan
            if cijfer < i:#kijk of elk cijfer kleiner is dan getal tussen 1 en hoogste getal plus 1
                count += 1
        i += 1
        reeks2.append(count)
    return reeks2

def verhogen(reeks):
    """"""
    nieuwe lijst (list) teruggeeft die de getallen (int) van de gegeven reeks bevat,
    maar telkens verhoogd overeenkomstig hun positie in de gegeven reeks —
    dat is 1 opgeteld bij het eerste getal van de gegeven reeks, 2 bij het tweede getal, enzoverder.
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = list(reeks)

    for index, cijfer in enumerate(lijst):
        lijst[index] = cijfer + (index+1)
    return lijst

def complementaire_reeksen(reeks):
    """"""
    tuple teruggeeft
    Het eerste element van dit tuple is een nieuwe lijst (list) met de getallen (int) van de gegeven reeks
    die verhoogd werden overeenkomstig hun positie in de reeks
    Het tweede element van het tuple is een nieuwe lijst (list) met de frequentiereeks van de gegeven reeks,
    waarvan de getallen (int) verhoogd werden overeenkomstig hun positie in de reeks.
    Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen met de boodschap
    gegeven reeks is niet stijgend
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    verhoogt = verhogen(reeks)
    freqreeks = frequentiereeks(reeks)
    reeks2 = [index+1 for index in range(len(freqreeks))]
    opgeteld = [term1+term2 for term1, term2 in zip(reeks2, freqreeks)]


    return (verhoogt, opgeteld)

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Elien Vrancken/complementaire-reeksen.py"",""fullName"":""Elien Vrancken"",""id"":""12214"",""status"":""correct"",""submissionID"":""6338510"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T13:53:19.000Z"",""labels"":""geol""}"
771,/home/maxiem/Downloads/files/Noor Ghesquiere/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    resultaat = True
    for i in range(1,len(reeks)):
        if resultaat:
            if reeks[i] >= reeks[i-1]:
                resultaat = True
            else:
                resultaat = False
    return resultaat

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks) != False, 'gegeven reeks is niet stijgend'
    #tel hoeveel getallen van de reeks er kleiner zijn dan 1 en dan 2 enzovoort. Maak een lijst
    list = []
    for i in range(1, max(reeks)+2):
        count = 0
        for l in reeks:
            if l < i:
                count += 1
        list.append(count)
    return list

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogd = []
    resultaat = 0
    count = 1
    for e in reeks:
        resultaat = e+count
        count +=1
        verhoogd.append(resultaat)
    return verhoogd

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks) != False, 'gegeven reeks is niet stijgend'
    x = verhogen(reeks)
    y = verhogen(frequentiereeks(reeks))
    lijst = [x, y]
    return tuple(lijst)



if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Noor Ghesquiere/complementaire-reeksen.py"",""fullName"":""Noor Ghesquiere"",""id"":""12203"",""status"":""correct"",""submissionID"":""6335316"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T17:42:11.000Z"",""labels"":""geog""}"
772,/home/maxiem/Downloads/files/Norah Roels/complementaire-reeksen.py,"def increasing(list_hier):
    som = 0
    for i in range(len(list_hier) - 1):
        if list_hier[i] <= list_hier[i+1]:
            som += 1
    return bool(som == (len(list_hier)-1))

def frequency_sequence(list_hier):
    m = list_hier[-1]
    number = 0
    final_list = []
    for i in range(int(m) + 1):
        number += list_hier.count(i)
        final_list += [number]
    if increasing(list_hier) == False:
        raise AssertionError('given sequence is not increasing')
    return final_list

def lift(list_hier):
    new_list = []
    for i in range(len(list_hier)):
        num = int(list_hier[i]) + (i+1)
        new_list += [num]
    return new_list
    
def complementary_sequences(list_hier):
    final_tuple = (lift(list_hier), lift(frequency_sequence(list_hier)))
    return final_tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Norah Roels/complementaire-reeksen.py"",""fullName"":""Norah Roels"",""id"":""12215"",""status"":""correct"",""submissionID"":""6349794"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T21:16:25.000Z"",""labels"":""chem""}"
773,/home/maxiem/Downloads/files/Judith Porters/complementaire-reeksen.py,"def stijgend(reeks):
    gezegde = True
    item = 0
    while item in range(0, len(reeks)) and gezegde == True:
        if reeks[item] >= reeks[item-1] and item != 0:
            gezegde = True
            item += 1
        elif item == 0:
            gezegde = True
            item += 1
        else:
            gezegde = False
            item += 1
    return gezegde # gezegde zit in deze functie
def frequentiereeks(reeks):
    # frequentiereeks neemt de maximum van de reeks, de frequentiereeks is dan max +1 lang en zegt telkens hoeveel getallen van de reeks groter zijn dan de index van die plaats
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    reeksf = []
    maximum1 = reeks[-1]
    u = 0
    while u in range(0,maximum1+1):
        getal = 0
        for x in reeks:
            if x < u or x == u:
                getal += 1
            else:
                break
        reeksf.append(getal)
        u += 1
    return reeksf
def verhogen(reeks):
    u = 1
    verhoogd = []
    for x in reeks:
        f = x + u
        verhoogd.append(f)
        u += 1
    return verhoogd
def complementaire_reeksen(reeks):
    assert verhogen(reeks), 'gegeven reeks is niet stijgend'
    uitkomst = []
    b = verhogen(reeks)
    uitkomst.append(b)
    c = frequentiereeks(reeks)
    d = verhogen(c)
    uitkomst.append(d)
    return tuple(uitkomst)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( binary_expression ( identifier ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( break_statement ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Judith Porters/complementaire-reeksen.py"",""fullName"":""Judith Porters"",""id"":""12097"",""status"":""correct"",""submissionID"":""6405110"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T16:27:54.000Z"",""labels"":""bcbt""}"
774,/home/maxiem/Downloads/files/Dries De Pesseroey/complementaire-reeksen.py,"def stijgend(lijst):
    for i in range(len(lijst) - 1):
        if not lijst[i] <= lijst[i+1]:
            return False
    return True

def frequentiereeks(lijst):
    resultaat = []
    for i in range(lijst[-1] + 1):
        aantal = 0
        for element in lijst:
            if element < i + 1:
                aantal += 1
        resultaat.append(aantal)

    if not stijgend(lijst):
        raise AssertionError('gegeven reeks is niet stijgend')
    return resultaat

def verhogen(lijst):
    resultaat = []
    for index, getal in enumerate(lijst):
        resultaat.append(getal + index + 1)

    return resultaat

def complementaire_reeksen(lijst):
    waarde1 = verhogen(lijst)
    waarde2 = verhogen(frequentiereeks(lijst))

    if not stijgend(lijst):
        raise AssertionError('gegeven reeks is niet stijgend')
    
    return waarde1, waarde2",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Dries De Pesseroey/complementaire-reeksen.py"",""fullName"":""Dries De Pesseroey"",""id"":""12207"",""status"":""correct"",""submissionID"":""6367664"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T17:50:45.000Z"",""labels"":""chem""}"
775,/home/maxiem/Downloads/files/Tim Biesemans/complementaire-reeksen.py,"def stijgend(lijst):
    lengte_lijst = len(lijst)

    for i in range(len(lijst) - 1):
        if lijst[i] > lijst[i + 1]:
            return False

    return True

def frequentiereeks(lijst):
    if stijgend(lijst) == True:
        reeks = (lijst[-1] + 1) * [0]
        x = 0
        if len(reeks) < lijst[-1]:
            for i in range(len(reeks)):
                if i < lijst[x]:
                    reeks[i] += x
                
                
                else:
                    x += 1
                    reeks[i] += x
        else:
            for i in range(lijst[-1] + 1):
                x = lijst.count(i)
                reeks[i] = reeks[i-1] + x
            
            return reeks
        
    else:
        raise AssertionError('gegeven reeks is niet stijgend')

def verhogen(lijst):
    reeks = list(lijst)
    for i in range(len(lijst)):
        reeks[i] += i + 1
    return reeks

def complementaire_reeksen(lijst):
    if stijgend(lijst) is True:
        reeks1 = verhogen(lijst)
        reeks2 = verhogen(frequentiereeks(lijst))
        
        return reeks1, reeks2
    
    else: raise AssertionError('gegeven reeks is niet stijgend')",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ( array ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ),"{""filename"":""Tim Biesemans/complementaire-reeksen.py"",""fullName"":""Tim Biesemans"",""id"":""12216"",""status"":""correct"",""submissionID"":""6405891"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T17:03:30.000Z"",""labels"":""chem""}"
776,/home/maxiem/Downloads/files/Rémi Vandewalle/complementaire-reeksen.py,"def stijgend(reeks):
    if all(i <= j for i, j in zip(reeks, reeks[1:])):
        return True
    return False 
def frequentiereeks(reeks):
    assert stijgend(reeks) is True, ""gegeven reeks is niet stijgend""
    hoogste = max(reeks)
    frequentie = list()
    for i in range(hoogste + 1):
        aantal = 0
        for a in reeks: 
            if a <= i:
                aantal += 1
        frequentie.append(aantal)
    return frequentie
def verhogen(reeks):
    verhoogdereeks = list()
    for index, getal in enumerate(reeks):
        verhoogdereeks.append(getal + index + 1)
    return verhoogdereeks
def complementaire_reeksen(reeks):
    assert stijgend(reeks) is True, ""gegeven reeks is niet stijgend""
    verhoogdefrequentiereeks = list()
    for index, getal in enumerate(frequentiereeks(reeks)):
        verhoogdefrequentiereeks.append(getal + index + 1)
    return verhogen(reeks), verhoogdefrequentiereeks",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ),"{""filename"":""Rémi Vandewalle/complementaire-reeksen.py"",""fullName"":""Rémi Vandewalle"",""id"":""12217"",""status"":""correct"",""submissionID"":""6401460"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T13:26:10.000Z"",""labels"":""geog""}"
777,/home/maxiem/Downloads/files/Hanne Claes/complementaire-reeksen.py,"def stijgend(reeks):

  """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend((2, 3, 5, 7, 11, 13, 12))
    False
  """"""
  check = 0
  i = 1
  while i < len(reeks):
      if (reeks[i] < reeks[i - 1]):
          check = 1
      i += 1

  if check == 1:
      return False
  else:
      return True


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    b=[]

    e=int(reeks[-1])+1


    if stijgend(reeks)== False:
        raise AssertionError(""gegeven reeks is niet stijgend"")

    else:
        for i in range(e):
            d=0
            for ch in reeks:
                if int(ch)<(i+1):
                    d+=1
            b.append(d)



    return b


def verhogen(reeks):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
  

    b=[]
    for i in range(len(reeks)):
        a=i+1
        c= a+ reeks[i]
        b.append(c)
    return b


def complementaire_reeksen(reeks):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    if stijgend(reeks) == False:
        raise AssertionError(""gegeven reeks is niet stijgend"")

    else:
        a=frequentiereeks(reeks)
        b=verhogen(a)
        return verhogen(reeks), b



if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Hanne Claes/complementaire-reeksen.py"",""fullName"":""Hanne Claes"",""id"":""12035"",""status"":""correct"",""submissionID"":""6351705"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T10:30:29.000Z"",""labels"":""chem""}"
778,/home/maxiem/Downloads/files/Rosalia-Alba Vittiglio/complementaire-reeksen.py,"def stijgend(getallen):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    x = 0
    while x != len(getallen) - 1:
        get = getallen[x]
        if get > getallen[x+1]:
            return False
        x += 1
    return True

def frequentiereeks(getallen):
    """"""
    >>> frequentiereeks((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    [0, 1, 1, 3, 3, 6, 6, 10]
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    freeks = list('')
    getallen = list(getallen)
    assert stijgend(getallen) == True, 'gegeven reeks is niet stijgend'
    x = 1
    while len(freeks) <= getallen[-1]:
        n = 0
        while x > getallen[n] and getallen[n] != getallen[-1]:
            n += 1
        freeks.append(n)
        x += 1
    n = len(getallen)
    freeks[-1] = n
    return freeks



def verhogen(getallen):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    x = 1
    getallen = list(getallen)
    for i in getallen:
        getallen[x-1] = i + x
        x += 1
    return getallen
def complementaire_reeksen(getallen):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(getallen) == True, 'gegeven reeks is niet stijgend'
    verhoogd = verhogen(getallen)
    frequentie = frequentiereeks(getallen)
    fverhoogd = verhogen(frequentie)
    return (verhoogd,fverhoogd)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Rosalia-Alba Vittiglio/complementaire-reeksen.py"",""fullName"":""Rosalia-Alba Vittiglio"",""id"":""12211"",""status"":""correct"",""submissionID"":""6338709"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T14:12:31.000Z"",""labels"":""geol""}"
779,/home/maxiem/Downloads/files/Emily Blanchetot/complementaire-reeksen.py,"def stijgend(getallen):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    if list(getallen) == sorted(getallen):
        return True
    return False

def frequentiereeks(getallen):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(getallen), 'gegeven reeks is niet stijgend'

    frequentiereeks = []
    x = 1   # cijfer kleiner dan x
    z = 0   # toegevoegd aan frequentiereeks
    for cijfer in getallen:
        while x <= cijfer:
            frequentiereeks.append(z)
            x += 1
        z += 1
    # laatste cijfer nog toevoegen aan de lijst
    frequentiereeks.append(z)

    return frequentiereeks

def verhogen(getallen):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    getallen = list(getallen)
    for index, cijfer in enumerate(getallen):
        getallen[index] = cijfer + index + 1

    return getallen

def complementaire_reeksen(getallen):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    eerste_element = verhogen(getallen)
    tweede_element = verhogen(frequentiereeks(getallen))
    
    return eerste_element, tweede_element
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Emily Blanchetot/complementaire-reeksen.py"",""fullName"":""Emily Blanchetot"",""id"":""8350"",""status"":""correct"",""submissionID"":""6353237"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T13:26:56.000Z"",""labels"":""geol""}"
780,/home/maxiem/Downloads/files/Razvan Oita/complementaire-reeksen.py,"def stijgend(p):
    p = list(p)
    import itertools
    import operator
    res = all(itertools.starmap(operator.le,zip(p, p[1:])))
    return res

def geef_kleiner(lijst,getal):
    nummer = 0
    for x in lijst:
        if x <= getal:
            nummer += 1
        if x > getal:
            return nummer
    return nummer

def frequentiereeks(p):
 if stijgend(p) == False:
     raise AssertionError('gegeven reeks is niet stijgend')
 laatste_getal = p[-1]
 laatste_getal += 1
 lijst = []
 for x in range(laatste_getal):
     lijst.append(geef_kleiner(p,x))
 return lijst



def verhogen(p):
    p = list(p)
    v = []
    for inx, elements in enumerate(p, start = 1):
        v.append(inx + elements)

    return (v)

def complementaire_reeksen(p):
  a = verhogen(p)
  b = frequentiereeks(p)
  c = verhogen(b)
  return (a,c)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( import ) ( ERROR ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Razvan Oita/complementaire-reeksen.py"",""fullName"":""Razvan Oita"",""id"":""12194"",""status"":""correct"",""submissionID"":""6403176"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T14:53:54.000Z"",""labels"":""chem""}"
781,/home/maxiem/Downloads/files/Laura Meerschaert/complementaire-reeksen.py,"def stijgend(reeks):
    code = []
    i = 0
    reeks = list(reeks)

    for i in range(len(reeks) - 1):
        if reeks[i] <= reeks[i + 1]:
            code.insert(i, reeks[i])
        else:
            code = code
    for i in range(len(reeks) - 1, len(reeks)):
        if reeks[i] >= reeks[i - 1]:
            code.insert(i, reeks[i])
        else:
            code = code
    if code == reeks:
        return True
    else:
        return False

def frequentiereeks(reeks):
    m = max(reeks)
    x = 0
    y = []
    i = 0
    j = 0
    if stijgend(reeks) == True:
        while i <= m:
            if reeks[j] <= i:
                x += 1
                j += 1
                if j == len(reeks):
                    y.insert(i,x)
                    return y
            else:
                j = 0
                i += 1
                y.insert(i,x)
                x = 0
        return y
    else:
        assert stijgend(reeks)== True, 'gegeven reeks is niet stijgend'

def verhogen(reeks):
    y = []
    for i in range(len(reeks)):
        y.insert(i, reeks[i] + (i + 1))
    return y

def complementaire_reeksen(reeks):
    if stijgend(reeks) == False:
        assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    else:
        reeks1 = frequentiereeks(reeks)
        reeks2 = verhogen(reeks1)
        reeks3 = verhogen(reeks)
    eindreeks = (reeks3, reeks2)
    return eindreeks
if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( identifier ) ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Laura Meerschaert/complementaire-reeksen.py"",""fullName"":""Laura Meerschaert"",""id"":""12044"",""status"":""correct"",""submissionID"":""6390426"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T11:04:01.000Z"",""labels"":""bcbt""}"
782,/home/maxiem/Downloads/files/Thibault Van Wonterghem/complementaire-reeksen.py,"def stijgend(reeks):
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))
def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    freq, waarde, aantal = [], 0, 0
    for getal in reeks:
        while waarde < getal:
            freq.append(aantal)
            waarde += 1
        aantal += 1
    freq.append(aantal)
    return freq
def verhogen(reeks):
    return [element + positie + 1 for positie, element in enumerate(reeks)]
def complementaire_reeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( call_expression ( call_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Thibault Van Wonterghem/complementaire-reeksen.py"",""fullName"":""Thibault Van Wonterghem"",""id"":""12219"",""status"":""correct"",""submissionID"":""6418053"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T14:44:31.000Z"",""labels"":""geog""}"
783,/home/maxiem/Downloads/files/Thuraya Al Halawi/complementaire-reeksen.py,"def stijgend(p):
    p = list(p)
    import itertools
    import operator
    res = all(itertools.starmap(operator.le,zip(p, p[1:])))
    return res

def geef_kleiner(lijst,getal):
    nummer = 0
    for x in lijst:
        if x <= getal:
            nummer += 1
        if x > getal:
            return nummer
    return nummer

def frequentiereeks(p):
 if stijgend(p) == False:
     raise AssertionError('gegeven reeks is niet stijgend')
 laatste_getal = p[-1]
 laatste_getal += 1
 lijst = []
 for x in range(laatste_getal):
     lijst.append(geef_kleiner(p,x))
 return lijst



def verhogen(p):
    p = list(p)
    v = []
    for inx, elements in enumerate(p, start = 1):
        v.append(inx + elements)

    return (v)

def complementaire_reeksen(p):
  a = verhogen(p)
  b = frequentiereeks(p)
  c = verhogen(b)
  return (a,c)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( import ) ( ERROR ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Thuraya Al Halawi/complementaire-reeksen.py"",""fullName"":""Thuraya Al Halawi"",""id"":""12220"",""status"":""correct"",""submissionID"":""6403142"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T14:52:39.000Z"",""labels"":""chem""}"
784,/home/maxiem/Downloads/files/Lukas De Wilde/complementaire-reeksen.py,"def stijgend(lijst):
    check = 0
    for getal in lijst:
        if getal >= check:
            check = getal
        else:
            return(False)
    return True
def frequentiereeks(lijst):
    assert stijgend(lijst),'gegeven reeks is niet stijgend'
    eind = lijst[-1] + 2
    aantal = 0
    listj = []
    for i in range(1,eind):
        for getal in lijst:
            if getal < i:
                aantal += 1 
        listj.append(aantal)
        aantal = 0
    return listj
def verhogen(lijst):
    verhoogd = 1
    listj = []
    for getal in lijst:
        sqrt = getal + verhoogd
        verhoogd += 1
        listj.append(sqrt)
    return listj
def complementaire_reeksen(lijst):
    verhoogd = verhogen(lijst)
    freq = frequentiereeks(lijst)
    freq = verhogen(freq)
    return (verhoogd, freq)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Lukas De Wilde/complementaire-reeksen.py"",""fullName"":""Lukas De Wilde"",""id"":""8379"",""status"":""correct"",""submissionID"":""6224003"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-01T19:42:55.000Z"",""labels"":""chem""}"
785,/home/maxiem/Downloads/files/Sarah Strickx/complementaire-reeksen.py,"def stijgend(reeks):
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))

def frequentiereeks(reeks):

    assert stijgend(reeks), ""gegeven reeks is niet stijgend""

    frequentie = []
    aantal_getallen_kleiner = 0
    waarde = 0

    for getal in reeks:
        while waarde < getal:
            frequentie.append(aantal_getallen_kleiner)
            waarde += 1
        aantal_getallen_kleiner += 1
    frequentie.append(aantal_getallen_kleiner)
    return frequentie


def verhogen(reeks):
    verhoogd = []
    for positie, element in enumerate(reeks):
        verhoogd.append(positie + element + 1)
    return verhoogd

def complementaire_reeksen(reeks):

    assert stijgend(reeks), ""gegeven reeks is niet stijgend""

    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Sarah Strickx/complementaire-reeksen.py"",""fullName"":""Sarah Strickx"",""id"":""7934"",""status"":""correct"",""submissionID"":""6245485"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-03T13:13:44.000Z"",""labels"":""geog""}"
786,/home/maxiem/Downloads/files/Sigrid Verhelst/complementaire-reeksen.py,"def stijgend(reeks):

    reeks = list(reeks)
    gesorteerde_reeks = sorted(reeks)
    return bool(reeks == gesorteerde_reeks)

print(stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6)))

def frequentiereeks(reeks):

    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    lijst = []
    som = 0
    maximum = ((sorted(reeks))[-1])+1
    for cijfer in range(1, maximum+1):
        for element in reeks:
            if element < cijfer:
                som += 1
        lijst.append(som)
        som = 0
    return lijst

print(frequentiereeks([0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]))

def verhogen(reeks):

    lijst = []
    verhoger = 1
    for element in reeks:
        element += verhoger
        lijst.append(element)
        verhoger += 1
    return lijst

print(verhogen([5, 3, 2, 7, 8, 1, 9]))

def complementaire_reeksen(reeks):

    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    lijst1 = verhogen(reeks)
    lijst2 = []
    maximum = ((sorted(lijst1))[-1]) + 1
    for i in range(1, maximum+1):
        if i not in lijst1:
            lijst2.append(i)
    return lijst1, lijst2

print(complementaire_reeksen([2, 3, 5, 7, 11, 13]))

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( subscript_expression ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( unary_expression ( number ) ) ) ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( subscript_expression ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( unary_expression ( number ) ) ) ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Sigrid Verhelst/complementaire-reeksen.py"",""fullName"":""Sigrid Verhelst"",""id"":""9346"",""status"":""correct"",""submissionID"":""6292076"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-05T16:12:33.000Z"",""labels"":""doct""}"
787,/home/maxiem/Downloads/files/Matteo Vereertbrugghen/complementaire-reeksen.py,"def stijgend(lijst):
    for i in range(1, len(lijst)):
        if lijst[i] != lijst[i - 1] and int(lijst[i]) < int(lijst[i - 1]):
            return False
    return True


def frequentiereeks(lijst):
    if not stijgend(lijst):
        raise AssertionError('gegeven reeks is niet stijgend')

    nieuwe_lijst = []
    # neem het hoogste getal en doe dit + 1
    for getal in range(1, lijst[-1] + 2):
        aantal_getallen_kleiner_dan = 0
        for i in range(len(lijst)):
            if lijst[i] < getal:
                aantal_getallen_kleiner_dan += 1
        nieuwe_lijst.append(aantal_getallen_kleiner_dan)
    return nieuwe_lijst


def verhogen(lijst):
    new_lijst = []
    for index in range(len(lijst)):
        new_lijst.append(lijst[index] + index + 1)
    return new_lijst

def complementaire_reeksen(lijst):
    return (verhogen(lijst), verhogen(frequentiereeks(lijst)))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( call_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Matteo Vereertbrugghen/complementaire-reeksen.py"",""fullName"":""Matteo Vereertbrugghen"",""id"":""12236"",""status"":""correct"",""submissionID"":""6366434"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T15:40:20.000Z"",""labels"":""fyss""}"
788,/home/maxiem/Downloads/files/Era-Alexandra Decuyper/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    found = True
    for i in range(1, len(sequence)):
        if sequence[i] < sequence[i - 1]:
            found = False
    return found

def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([1, 3, 3, 5, 5, 5, 7, 7, 7, 7])
    [0, 1, 1, 3, 3, 6, 6, 10]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence), ""given sequence is not increasing""

    list_int, count, index = [], 0, 0
    for i in range(1, max(sequence)+2):
        if i > sequence[index]:
            count = sum(e<i for e in sequence)
            list_int.append(count)
            index += 1
        else:
            list_int.append(count)
    return list_int

def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    >>> lift([0, 1, 1, 3, 3, 6, 6, 10])
    [1, 3, 4, 7, 8, 12, 13, 18]
    """"""
    return [(i + 1) + e for i, e in enumerate(sequence)]

def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    return lift(sequence), lift(frequency_sequence((sequence)))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Era-Alexandra Decuyper/complementaire-reeksen.py"",""fullName"":""Era-Alexandra Decuyper"",""id"":""12241"",""status"":""correct"",""submissionID"":""6371871"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:13:13.000Z"",""labels"":""biol""}"
789,/home/maxiem/Downloads/files/Morgan Vervoort/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    # to check if the numbers are increasing; create a new sequence which you will compare with the given one at the end
    new_sequence = []
    for index, element in enumerate(sequence):
        # if you are at the first element, just already add it to the new list
        if index == 0:
            new_sequence.append(element)
        # if the element is greater or equal to the previous one, also add it to the list
        elif element >= sequence[index - 1]:
            new_sequence.append(element)

    # if the new and old sequence are the same, you have an increasing list
    # set the sequence to a list, since the input can also be a tuple and the new sequence is a list
    return bool(new_sequence == list(sequence))


def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    # raise error when the sequence is not increasing
    assert increasing(sequence) is True, 'given sequence is not increasing'
    #set sequence to list,
    sequence = list(sequence)
    # the largest number m but add m + 1 to the sequence
    largest_number = sequence[-1] + 1
    sequence.append(largest_number)

    # count the number of times a number (= counter) is in the list and put it into a new list
    new_sequence = []
    counter = 1
    position = 0
    while len(new_sequence) != sequence[-1]:
        character = sequence[position]
        if counter >= character:
            new_sequence.append(sum(character < counter for character in sequence))
            position += 1
        else:
            if character > sequence[position - 1]:
                new_sequence.append(sum(character < counter for character in sequence))
            else:
                new_sequence.append(0)
        counter += 1

    return new_sequence


def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    new_sequence = []

    for index, character in enumerate(sequence):
        new_sequence.append(character + index + 1)
    return new_sequence


def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    increased_sequence = lift(sequence)

    assert increasing(increased_sequence) is True, 'given sequence is not increasing'

    frequency = lift(frequency_sequence(sequence))

    return (increased_sequence, frequency)


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( new_expression ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( new_expression ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( new_expression ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( new_expression ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Morgan Vervoort/complementaire-reeksen.py"",""fullName"":""Morgan Vervoort"",""id"":""5324"",""status"":""correct"",""submissionID"":""6410423"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T08:15:20.000Z"",""labels"":""geol""}"
790,/home/maxiem/Downloads/files/Polina Mironova/complementaire-reeksen.py,"def increasing(n):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    a_list = list(n)
    return bool(sorted(a_list) == a_list)

def frequency_sequence(n):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    a_list = list(n)
    assert increasing(a_list) is True, 'given sequence is not increasing'

    frequency_sequence_list = []

    for number in range(1, a_list[-1] + 2):
        # count how many characters are smaller than that number
        # add count to a list
        count = sum(map(lambda x: x < number, a_list))
        frequency_sequence_list.append(count)
    return frequency_sequence_list

def lift(n):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    a_list = list(n)
    # add a number according to the position
    for index in range(len(a_list)):
        a_list[index] += index + 1
    return a_list

def complementary_sequences(n):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    return lift(n), lift(frequency_sequence(n))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Polina Mironova/complementaire-reeksen.py"",""fullName"":""Polina Mironova"",""id"":""12248"",""status"":""correct"",""submissionID"":""6337998"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T13:05:27.000Z"",""labels"":""biol""}"
791,/home/maxiem/Downloads/files/Killian Cnudde/complementaire-reeksen.py,"def increasing(numbers):
    previous = 0
    for i in numbers:
        if i >= previous:
            previous = i
        else:
            return False
    return True


def frequency_sequence(numbers):
    assert increasing(numbers), ""given sequence is not increasing""
    m = numbers[-1]
    new_list = []
    for i in range(1, m + 2):
        count = 0
        for j in numbers:
            if j < i:
                count += 1
        new_list.append(count)
    return new_list


def lift(numbers):
    x = 1
    new_list = []
    for i in numbers:
        i += x
        new_list.append(i)
        x += 1
    return new_list


def complementary_sequences(numbers):
    assert increasing(numbers), ""given sequence is not increasing""
    x = lift(numbers)
    y = frequency_sequence(numbers)
    z = lift(y)
    return x, z
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Killian Cnudde/complementaire-reeksen.py"",""fullName"":""Killian Cnudde"",""id"":""12250"",""status"":""correct"",""submissionID"":""6340365"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:51:15.000Z"",""labels"":""biol""}"
792,/home/maxiem/Downloads/files/Emma de Meij/complementaire-reeksen.py,"def stijgend(reeks):
    for i in range(0, (len(reeks) - 1)):
        if reeks[i] <= reeks[i + 1]:
            stijgend = True
        else:
            stijgend = False
            break

    return stijgend

def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    frequentiereeks = []
    n = 1
    for i in range(0, reeks[-1]+1):
        count = len([i for i in reeks if i < n])
        frequentiereeks.append(count)
        n += 1

    return frequentiereeks

def verhogen(reeks):
    n = 1
    verhoogde_reeks = []
    for i in range(0, len(reeks)):
        verhoogd_element = int(reeks[i]) + n
        verhoogde_reeks.append(verhoogd_element)
        n += 1

    return verhoogde_reeks

def complementaire_reeksen(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    tuple = (verhogen(reeks), verhogen(frequentiereeks(reeks)))

    return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( break_statement ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Emma de Meij/complementaire-reeksen.py"",""fullName"":""Emma de Meij"",""id"":""12253"",""status"":""correct"",""submissionID"":""6400214"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T11:34:20.000Z"",""labels"":""keuz""}"
793,/home/maxiem/Downloads/files/Jana De Ruyter/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    x = 0
    for i in range(len(lijst) - 1):
        if lijst[i+1] >= lijst[i]:
            x += 1
    if x == len(lijst) - 1:
        return True
    return False


def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(lijst) is False:
        assert False, ""gegeven reeks is niet stijgend""
    else:
        frequentie = (lijst[-1] +1) * [0]
        a = 0
        if len(frequentie) < lijst[-1]:
            for i in range(len(frequentie)):
                if i < lijst[a]:
                    frequentie[i] += a
                else:
                    a += 1
                    frequentie[i] += a
        else:
            for i in range(lijst[-1] + 1):
                a = lijst.count(i)
                frequentie[i] = frequentie[i-1] + a
        return frequentie


def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = list(lijst)
    lijst_verhoogd = lijst
    for i in range(len(lijst)):
        lijst_verhoogd[i] = lijst[i] + (i + 1)
    return lijst_verhoogd


def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(lijst) is False:
        assert False, ""gegeven reeks is niet stijgend""
    else:
        reeks = [0, 1]
        reeks[0] = verhogen(lijst)
        reeks[1] = verhogen(frequentiereeks(lijst))
        reeks = tuple(reeks)
    return reeks",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Jana De Ruyter/complementaire-reeksen.py"",""fullName"":""Jana De Ruyter"",""id"":""12255"",""status"":""correct"",""submissionID"":""6422317"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T18:41:17.000Z"",""labels"":""chem""}"
794,/home/maxiem/Downloads/files/Florian Van Hecke/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
>>> stijgend([2, 3, 5, 7, 11, 13])
True
>>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
True
>>> stijgend([5, 3, 2, 7, 8, 1, 9])
False
    """"""
    vorige = 0
    for getal in reeks:  # ga elk getal in de reeks na
        if vorige > getal:
            return False
        vorige = getal
    return True

def frequentiereeks(reeks):
    """"""
>>> frequentiereeks([2, 3, 5, 7, 11, 13])
[0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
>>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[2, 3, 5, 7, 11, 13, 14]
>>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    newlist = []
    som = 0
    for getal in range(max(reeks) + 1):
        tel = reeks.count(getal)  # tel aantal keer een getal voorkomt in de reeks
        som += tel
        newlist.append(som)
    return newlist

def verhogen(reeks):
    """"""
>>> verhogen([2, 3, 5, 7, 11, 13])
[3, 5, 8, 11, 16, 19]
>>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
>>> verhogen([5, 3, 2, 7, 8, 1, 9])
[6, 5, 5, 11, 13, 7, 16]
    """"""
    newlist = []
    # tel bij eerste term (0) + 1, bij tweede term + 2 ((i+1)*1
    for index, getal in enumerate(reeks):
        newlist.append(getal + (index + 1) * 1)
    return newlist

def complementaire_reeksen(reeks):
    """"""
>>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
>>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
>>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend
    """"""
    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Florian Van Hecke/complementaire-reeksen.py"",""fullName"":""Florian Van Hecke"",""id"":""12259"",""status"":""correct"",""submissionID"":""6339700"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T15:46:19.000Z"",""labels"":""biol""}"
795,/home/maxiem/Downloads/files/Yue Zehui/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def increasing(a):
    for i in range(len(a) - 1):
        if not (a[i + 1] - a[i] >= 0):
            return False
    return True


def frequency_sequence(b):
    if increasing(b) is True:
        apple=[]
        for i in range (1,int(b[-1])+2):
            count = 0
            for k in range(0,len(b),1):
                if b[k] < i:
                    count += 1
            apple.append(count)
        return apple
    else:
            raise AssertionError(""given sequence is not increasing"")


def lift(c):
    sum = []
    for i in range(len(c)):
        sum.append(c[i] + i + 1)
    return (sum)


def complementary_sequences(d):
    if not increasing(d):
        raise AssertionError(""given sequence is not increasing"")
    else:
        return(lift(d),lift(frequency_sequence(d)))


",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ),"{""filename"":""Yue Zehui/complementaire-reeksen.py"",""fullName"":""Yue Zehui"",""id"":""11746"",""status"":""correct"",""submissionID"":""6386300"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T16:49:51.000Z"",""labels"":""stat""}"
796,/home/maxiem/Downloads/files/Maartje Cathelyn/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    Takes a sequence (list or tuple) and checks if integers are increasing (returns boolean value)

    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(len(sequence) - 1):
        if sequence[i] > sequence[i + 1]:
            return False

    return True


def frequency_sequence(sequence):
    """"""
    returns a new list containing the integers (int) in the frequency sequence of the given sequence.
    In case the given sequence is not increasing, the function must raise an AssertionError with the message
    given sequence is not increasing.

    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    freq_seq = []
    count = 0

    assert increasing(sequence), 'given sequence is not increasing'

    for i in range(sequence[-1] + 1):
        for number in sequence:
            if number < (i + 1):
                count += 1
        freq_seq.append(count)
        count = 0

    return freq_seq


def lift(sequence):
    """"""
    returns a new list containing the integers (int) of the given sequence that have been increased
    according to their position in the sequence

    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    return [sequence[index] + (index + 1) for index, number in enumerate(sequence)]


def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence), 'given sequence is not increasing'

    return lift(sequence), lift(frequency_sequence(sequence))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( new_expression ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( binary_expression ( binary_expression ( subscript_expression ( number ) ( ERROR ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( new_expression ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Maartje Cathelyn/complementaire-reeksen.py"",""fullName"":""Maartje Cathelyn"",""id"":""12261"",""status"":""correct"",""submissionID"":""6356645"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T20:33:39.000Z"",""labels"":""biol""}"
797,/home/maxiem/Downloads/files/Emma Nuyts/complementaire-reeksen.py,"def increasing(numbers):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    prev_number = -1
    for number in numbers:
        if number < prev_number:
            return False
        prev_number = number
    return True

def frequency_sequence(numbers):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    if not increasing(numbers):
        raise AssertionError('given sequence is not increasing')

    freq_seq = []
    sum = 0
    n = 1
    while len(freq_seq) < (numbers[-1] + 1):
        for number in numbers:
            if number < n:
                sum += 1
        freq_seq.append(sum)
        sum = 0
        n += 1

    return freq_seq

def lift(numbers):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    lift_seq = []
    n = 1
    for element in numbers:
        lift_seq.append(element + n)
        n += 1

    return lift_seq

def complementary_sequences(numbers):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    if not increasing(numbers):
        raise AssertionError('given sequence is not increasing')

    numbers = list(numbers)
    first_list = lift(numbers)
    freq_seq = frequency_sequence(numbers)
    compl_seq = lift(freq_seq)

    return (first_list, compl_seq)


if __name__ == '__main__':
    import doctest
    doctest.testmod(verbose=True)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Emma Nuyts/complementaire-reeksen.py"",""fullName"":""Emma Nuyts"",""id"":""12262"",""status"":""correct"",""submissionID"":""6354526"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T15:35:24.000Z"",""labels"":""keuz""}"
798,/home/maxiem/Downloads/files/Ada Coudenys/complementaire-reeksen.py,"def increasing(num):
    b = 0
    for i in range(1, len(num)):
        a = bool(num[i] >= num[i-1])
        if a is False:
            b += 1
    return bool(b == 0)

def frequency_sequence(num):
    li = []
    inc = increasing(num)
    for i in range(0, num[-1]+1):
        count = sum(map(lambda x: x <= i, num))
        li.append(count)
    assert inc is True, ""given sequence is not increasing""
    return li

def lift(num):
    numb = []
    for i in range(0, len(num)):
        numb.append(num[i] + (i+1))
    return(numb)

def complementary_sequences(num):
    a = lift(num)
    b = lift(frequency_sequence(num))
    return a, b",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( string ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Ada Coudenys/complementaire-reeksen.py"",""fullName"":""Ada Coudenys"",""id"":""12263"",""status"":""correct"",""submissionID"":""6338926"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T14:34:00.000Z"",""labels"":""biol""}"
799,/home/maxiem/Downloads/files/Brecht de Kezel/complementaire-reeksen.py,"def stijgend(p):
    vorig_getal = 0
    stijgend = True
    for getal in p:
        if getal < vorig_getal:
            stijgend = False
        vorig_getal = getal
    return stijgend

def frequentiereeks(p):
    assert stijgend(p) == True, 'gegeven reeks is niet stijgend'
    m = max(p)
    frequentie = 0
    freq_reeks = []
    for x in range(1, m+2):
        for getal in p:
            if getal < x:
                frequentie += 1
        freq_reeks += [frequentie]
        frequentie = 0
    return freq_reeks
    
def verhogen(p):
    verhoogde_reeks = []
    x = 1
    for getal in p:
        verhoogde_reeks += [getal + x]
        x += 1
    return verhoogde_reeks
    
def complementaire_reeksen(p):
    assert stijgend(p) == True, 'gegeven reeks is niet stijgend'
    lijst_1 = verhogen(p)
    lijst_2 = verhogen(frequentiereeks(p))
    return (lijst_1, lijst_2)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( array ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Brecht de Kezel/complementaire-reeksen.py"",""fullName"":""Brecht de Kezel"",""id"":""12264"",""status"":""correct"",""submissionID"":""6347802"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T16:09:12.000Z"",""labels"":""biol""}"
800,/home/maxiem/Downloads/files/Bram De Vilder/complementaire-reeksen.py,"def increasing(inlist):
    for index in range(0, len(inlist)-1):
        if inlist[index+1] < inlist[index]:
            return False
    else:
        return True

def frequency_sequence(inlist, outlist =[]):
    inc = increasing(inlist)
    assert inc == True, ""given sequence is not increasing""
    outlist = []
    for index in range(0, len(inlist)):
        if index == 0:
            diff = inlist[index]
        else:
            diff = inlist[index] - inlist[index-1]
        for i in range(0, diff):
            outlist.append(index)
    outlist.append(index+1)
    return outlist

def lift(inlist):
    outlist = []
    for index in range(0,len(inlist)):
        newnr = inlist[index] + (index+1)
        outlist.append(newnr)
    return outlist

def complementary_sequences(inlist):
    inc = increasing(inlist)
    assert inc == True, ""given sequence is not increasing""
    islift = lift(inlist)
    outlist = []
    x = 1
    while x != islift[-1] + 1:
        if x not in islift:
            outlist.append(x)
        x += 1
    outlist.append(islift[-1]+1)
    return islift, outlist




",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( array ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Bram De Vilder/complementaire-reeksen.py"",""fullName"":""Bram De Vilder"",""id"":""12260"",""status"":""correct"",""submissionID"":""6370765"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T08:56:48.000Z"",""labels"":""biol""}"
801,/home/maxiem/Downloads/files/Lennert Van Steendam/complementaire-reeksen.py,"def stijgend(reeks):
    if type(reeks) is tuple:
        reeks = list(reeks)
    reeks_sorted = reeks.copy()
    reeks_sorted.sort()
    return(bool( reeks_sorted == reeks))

def frequentiereeks(reeks):
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    new_reeks = []
    for i in range(reeks[-1]+1):
        teller = 0
        for getal in reeks:
            if getal < i+1:
                teller += 1
        new_reeks.append(teller)
    return new_reeks

def verhogen(reeks):
    verhoogde_reeks = []
    for i in range(len(reeks)):
        verhoogde_reeks.append(reeks[i]+i+1)
    return verhoogde_reeks

def complementaire_reeksen(reeks):
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    return(verhogen(reeks),verhogen(frequentiereeks(reeks)))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( return_statement ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Lennert Van Steendam/complementaire-reeksen.py"",""fullName"":""Lennert Van Steendam"",""id"":""7978"",""status"":""correct"",""submissionID"":""6411835"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T10:02:45.000Z"",""labels"":""chem""}"
802,/home/maxiem/Downloads/files/Robin De Wulf/complementaire-reeksen.py,"def increasing(a_list):
    for index in range(0, len(a_list)-1):
        check = a_list[index+1] - a_list[index]
        if check < 0:
            return False
    else:
        return True


def frequency_sequence(a_list):
    assert increasing(a_list), 'given sequence is not increasing'
    b_list = []

    for index in range(0, len(a_list)):
        if index == 0:
            difference = int(a_list[0])
        else:
            difference = int(a_list[index]) - int(a_list[index-1])
        if difference > 0:
            for i in range(0, difference):
                b_list.append(index)
    b_list.append(index+1)

    return b_list


def lift(a_list):
    b_list = []
    for index in range(0, len(a_list)):
        b_list.append(int(a_list[index])+index+1)

    return b_list


def complementary_sequences(a_list):
    assert increasing(a_list), 'given sequence is not increasing'
    lifted = lift(a_list)
    frequency = lift(frequency_sequence(a_list))

    return lifted, frequency
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Robin De Wulf/complementaire-reeksen.py"",""fullName"":""Robin De Wulf"",""id"":""11802"",""status"":""correct"",""submissionID"":""6340511"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T17:09:50.000Z"",""labels"":""biol""}"
803,/home/maxiem/Downloads/files/Myrthe De Puydt/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def increasing(pn):
    pn_list = list(pn)
    controle = sorted(pn_list)
    return pn_list == controle

def frequency_sequence(pn):
    x = increasing(pn)
    assert x == True, 'given sequence is not increasing'
    pn_list = list(pn)
    count = 0
    last_number = pn_list[-1] + 1
    freq_seq_list = []
    while count != last_number:
        amount_under_count = 0
        count += 1
        for element in pn_list:
            if element < count:
                amount_under_count += 1
        freq_seq_list.append(amount_under_count)
    return freq_seq_list

def lift(pn):
    pn_list = list(pn)
    count = 0
    for element in pn_list:
        pn_list[count] = element + 1 + count
        count += 1
    return pn_list

def complementary_sequences(pn):
    pn_list = list(pn)
    list1 = lift(pn_list)
    list2 = lift(frequency_sequence(pn_list))
    return list1, list2",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Myrthe De Puydt/complementaire-reeksen.py"",""fullName"":""Myrthe De Puydt"",""id"":""12265"",""status"":""correct"",""submissionID"":""6351339"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T09:44:15.000Z"",""labels"":""biol""}"
804,/home/maxiem/Downloads/files/Jessie Caignie/complementaire-reeksen.py,"def stijgend(nummers):
    for i in range(0, len(nummers)-1):
        if nummers[i] > nummers[i + 1]:
            return False
        
    return True
        
def frequentiereeks(nummers):
    if stijgend(nummers):
        list = []
        
        for i in range(0, nummers[-1] +1):    
            frequentie = 0
            for cijfer in nummers:
                if cijfer <= i:
                    frequentie += 1
            list.append(frequentie)
        return list
    
    assert False, ""gegeven reeks is niet stijgend""
        
def verhogen(nummers):
    list = []
    i = 1
    for cijfer in nummers:
        
        new = cijfer + i
        list.append(new)
        i += 1
    return list
      
def complementaire_reeksen(nummers):
    tupl1 = verhogen(nummers)
    frequentie = frequentiereeks(nummers)
    tupl2 = verhogen(frequentie)
    return tupl1, tupl2
            ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( new_expression ( ERROR ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( ERROR ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Jessie Caignie/complementaire-reeksen.py"",""fullName"":""Jessie Caignie"",""id"":""12266"",""status"":""correct"",""submissionID"":""6395052"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T17:51:37.000Z"",""labels"":""biol""}"
805,/home/maxiem/Downloads/files/Elke Roels/complementaire-reeksen.py,"def increasing(sequence):
    return list(sequence) == sorted(sequence)

def frequency_sequence(sequence):

    assert increasing(sequence) is True, 'given sequence is not increasing'

    m = sequence[-1]
    freq_seq = []
    for char in range(1, m+2):
        count = 0
        for number in sequence:
            if number < char:
                count += 1
        freq_seq.append(count)
    return freq_seq

def lift(sequence):

    pos = 0
    lifted_seq = []
    for number in sequence:
        pos += 1
        lifted_seq.append(number + pos)
    return lifted_seq
    
def complementary_sequences(sequence):

    return lift(sequence), lift(frequency_sequence(sequence))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Elke Roels/complementaire-reeksen.py"",""fullName"":""Elke Roels"",""id"":""12268"",""status"":""correct"",""submissionID"":""6387474"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T19:08:08.000Z"",""labels"":""biol""}"
806,/home/maxiem/Downloads/files/Arne Verdonck/complementaire-reeksen.py,"# function to check if the tuple/list consists of increasing int =>

def increasing(sequence):
    previous = 0
    for digit in sequence:
        if not digit >= previous:
            return False
        previous = digit
    return True


# function to return frequency sequence
# if not increasing: assertion error
def frequency_sequence(sequence):
    if not increasing(sequence):                                 # check increasing
        assert False, 'given sequence is not increasing'
    m, i, frequency, freq_seq = sequence[-1] + 2, 1, 0, []       # startwaarden
    while i != m:                                                # vergelijkt tov alle getallen tot en met m+1
        for digit in sequence:
            if digit < i:
                frequency += 1
        freq_seq.append(frequency)                               # frequentie toevoegen aan lijst met frequenties
        i += 1
        frequency = 0                                            # reset de frequentie voor nieuwe loop
    return freq_seq


def lift(sequence):                                              # voor elk cijfer in de sequentie voegen we de rang toe
    i = 1
    lifted = []
    for e in sequence:
        lifted_e = e + i
        lifted.append(lifted_e)
        i += 1
    return lifted


# now a function complementary_sequences combining the other functions
# start by checking whether increasing
# now for the return:
# first = a lifted version of the sequence
# second = lifted version of the frequency_sequence

def complementary_sequences(sequence):
    # increasing check
    if not increasing(sequence):
        assert False, 'given sequence is not increasing'
    # lift the sequence
    lifted_sequence = lift(sequence)
    # determine freq_seq and lift it
    freq_lifted = lift(frequency_sequence(sequence))
    return lifted_sequence, freq_lifted
",( program ( ERROR ( ERROR ) ( ERROR ( identifier ) ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arrow_function ( identifier ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ) ( return_statement ( ERROR ( identifier ) ) ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( ERROR ( array_pattern ) ( ERROR ) ) ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( ERROR ( ERROR ) ) ( assignment_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Arne Verdonck/complementaire-reeksen.py"",""fullName"":""Arne Verdonck"",""id"":""7583"",""status"":""correct"",""submissionID"":""6420324"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T16:32:24.000Z"",""labels"":""biol""}"
807,/home/maxiem/Downloads/files/Michiel Adams/complementaire-reeksen.py,"def stijgend(reeks):
    '''
    >>> stijgend([2, 3, 5, 11, 13])
    True
    >>> stijgend([0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6])
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    return all(reeks[element] <= reeks[element + 1] for element in range(len(reeks) - 1))

# 2de deel

def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks([0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6])
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    traceback( most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    frequentie_lijst = []
    frequentie_waarde = 0
    frequentie_aantal = 0

    for getal in reeks:
        while frequentie_waarde < getal:
            frequentie_lijst.append(frequentie_aantal)
            frequentie_waarde += 1
        frequentie_aantal += 1
    frequentie_lijst.append(frequentie_aantal)
    return frequentie_lijst

def verhogen(reeks):
    '''
    >>> verhogen ([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen([0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6])
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen ([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    verhogen_lijst = []
    for index, getal in enumerate(reeks):
        verhogen_lijst.append(getal + index + 1)
    return verhogen_lijst

def complementaire_reeksen(reeks):

    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen([1, 3, 3, 5, 5, 5, 7, 7, 7, 7])
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    return(verhogen(reeks), verhogen(frequentiereeks(reeks)))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( number ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Michiel Adams/complementaire-reeksen.py"",""fullName"":""Michiel Adams"",""id"":""12269"",""status"":""correct"",""submissionID"":""6423459"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T20:00:59.000Z"",""labels"":""biol""}"
808,/home/maxiem/Downloads/files/Yvana Van Kerckhove/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    lijst = [bool(i <= reeks[reeks.index(i) + 1]) for i in reeks[:-1]]
    return all(lijst)


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    freq = []
    for i in range(1, max(reeks) + 2):
        count = 0
        for c in reeks:
            if c < i:
                count += 1
        freq.append(count)

    return freq


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    positie = list(range(1, len(reeks) + 1))
    return [i + j for i, j in zip(reeks, positie)]


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))



if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( binary_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( ERROR ( identifier ) ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Yvana Van Kerckhove/complementaire-reeksen.py"",""fullName"":""Yvana Van Kerckhove"",""id"":""12270"",""status"":""correct"",""submissionID"":""6367622"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T17:45:50.000Z"",""labels"":""biol""}"
809,/home/maxiem/Downloads/files/Iris Tan/complementaire-reeksen.py,"def increasing(x):
    count = 0
    for i in range(len(x)-1):
        if x[i+1] >= x[i]:
            count += 1
    return bool(count == len(x)-1)

def checkincreasing(x):
    assert increasing(x), ""given sequence is not increasing""

def frequency_sequence(x):
    checkincreasing(x)
    n = max(x) + 1
    list = []
    for i in range(1, n + 1):
        sum = len([j for j in x if j < i])
        list.append(sum)
    return list

def lift(x):
    list = [i + j + 1 for i, j in enumerate(x)]
    return list

def complementary_sequences(x):
    checkincreasing(x)
    a = lift(x)
    b = lift(frequency_sequence(x))
    tup = (a, b)
    return tup",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Iris Tan/complementaire-reeksen.py"",""fullName"":""Iris Tan"",""id"":""12273"",""status"":""correct"",""submissionID"":""6396836"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T22:48:30.000Z"",""labels"":""stat""}"
810,/home/maxiem/Downloads/files/Renaud De Baets/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(getallen):
    '''
    De functie controleerd of de gegeven getallen stijgend zijn.

    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    Bool = True
    a = getallen[0]
    for i in range(len(getallen)):
        if getallen[i] < a:
            Bool = False
        a = getallen[i]
    return Bool


def frequentiereeks(getallen):
    '''
    De functie geeft een reeks terug waarin staat hoeveel getallen
    kleiner zijn dan 1, dan 2, dan 3, ..., tot het grootste getal + 1.
    Als de getallen niet stijgend zijn moet er een error terug gegeven
    worden

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks([0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6])
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    c = 0
    try:
        assert stijgend(getallen), ""gegeven reeks is niet stijgend""
        m = getallen[-1] + 1
        b = []
        for i in range(m):
            a = getallen.count(i)
            c += a
            b.append(c)
        return b
    except AssertionError:
        raise

def verhogen(getallen):
    '''
    Deze functie vermeerderd elk getal in de lijst met zijn positie.

    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    a = []
    for i in range(len(getallen)):
        c = getallen[i] + i + 1
        a.append(c)
    return a

def complementaire_reeksen(getallen):
    '''
    De functie geeft een tuple met als eerste element de lijst met de
    verhoogde getallen en als tweede element de frequentiereeks

    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''


    b = verhogen(getallen)
    c = verhogen(frequentiereeks(getallen))
    a = (b, c)
    return a
if __name__ == '__main__':
    import doctest

    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( number ) ) ( sequence_expression ( identifier ) ( ERROR ( number ) ) ( sequence_expression ( identifier ) ( ERROR ( number ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Renaud De Baets/complementaire-reeksen.py"",""fullName"":""Renaud De Baets"",""id"":""12101"",""status"":""correct"",""submissionID"":""6372320"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:38:42.000Z"",""labels"":""bcbt""}"
811,/home/maxiem/Downloads/files/Ward Van Cauwenberge/complementaire-reeksen.py,"def stijgend(reeks):
    juist = True
    for index, element in enumerate(reeks):
        if juist:
            if index == len(reeks)-1:
                return juist
            if element > reeks[index+1]:
                juist = False
        else:
            return juist
    return juist

def frequentiereeks(reeks):
    juist = stijgend(reeks)
    if not juist:
        raise AssertionError('gegeven reeks is niet stijgend')
    lijst = []
    a = max(reeks) + 1
    aantal = 0
    for element in range(a):
        for cijfer in reeks:
            if cijfer <= element:
                aantal += 1
        lijst.append(aantal)
        aantal = 0
    return lijst

def verhogen(reeks):
    lijst = []
    for index, element in enumerate(reeks):
        nieuw = element + index + 1
        lijst.append(nieuw)
    return lijst

def complementaire_reeksen(reeks):
    if not verhogen(frequentiereeks(reeks)):
        raise AssertionError('gegeven reeks is niet stijgend')
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Ward Van Cauwenberge/complementaire-reeksen.py"",""fullName"":""Ward Van Cauwenberge"",""id"":""8450"",""status"":""correct"",""submissionID"":""6340049"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:17:27.000Z"",""labels"":""geog""}"
812,/home/maxiem/Downloads/files/Ninke Fant/complementaire-reeksen.py,"def stijgend(getallen):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    x = True
    for index, getal in enumerate(getallen):
        index_min = index - 1
        getal_min = getallen[index_min]
        if x is True:
            if index == 0:
                x = True
            elif getal == getal_min:
                x = True
            elif getal <= getal_min:
                return False
            else:
                x = True
    return True


def frequentiereeks(getallen):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    klimmend = stijgend(getallen)
    lijst = []  # lege lijst waar we steeds elementen aan gaan toevoegen
    assert klimmend, 'gegeven reeks is niet stijgend'
    if klimmend is True:  # als het stijgend is moet de bewerking uitgevoerd worden anders niet
        for getal2 in range(max(getallen) + 1):  # elke getal afgaan van 0 tot het grootste getal dat aanwezig is
            optelling = 0
            for getal1 in getallen:
                if getal2 >= getal1 or getal1 == getal2:
                    optelling += 1
            lijst.append(optelling)  # de optelling wordt aan de lijst toegevoegd
    return lijst


def verhogen(getallen):
    """"""
    >> > verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >> > verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >> > verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = []
    klimmend = stijgend(getallen)

    for index, getal in enumerate(getallen):
        i = index + 1
        omhoog = getal + i
        lijst.append(omhoog)
    return lijst
def complementaire_reeksen(getallen):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    lijst = []
    omh = verhogen(getallen)
    freq = frequentiereeks(getallen)
    for index, getal in enumerate(freq):
        i = index + 1
        omhoog = getal + i
        lijst.append(omhoog)

    return (omh, lijst)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Ninke Fant/complementaire-reeksen.py"",""fullName"":""Ninke Fant"",""id"":""12284"",""status"":""correct"",""submissionID"":""6341435"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T19:37:05.000Z"",""labels"":""geog""}"
813,/home/maxiem/Downloads/files/Kamiel Spriet/complementaire-reeksen.py,"def stijgend(reeks):
    for index in range(len(reeks)-1):
        if not reeks[index] <= reeks[index + 1]:
            return False

    return True


def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    freq = []
    for i in range(0, reeks[-1]+1):
        bools = [j < i+1 for j in reeks]
        freq.append(bools.count(True))
    return freq


def verhogen(reeks):
    verhoogd = []
    for index, waarde in enumerate(reeks):
        verhoogd.append(waarde + index + 1)
    return verhoogd


def complementaire_reeksen(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    reeksen = (verhogen(reeks), verhogen(frequentiereeks(reeks)))
    return reeksen

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( array ( binary_expression ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Kamiel Spriet/complementaire-reeksen.py"",""fullName"":""Kamiel Spriet"",""id"":""12079"",""status"":""correct"",""submissionID"":""6418658"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T15:08:24.000Z"",""labels"":""bcbt""}"
814,/home/maxiem/Downloads/files/Thomas Driesen/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    lengte_lijst = len(lijst)
    index = 0
    referentie = lijst[0]
    while lengte_lijst != 0:
        if referentie <= lijst[index]:
            referentie = lijst[index]
            index += 1
            lengte_lijst -= 1
        else:
            return False

    return True

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(lijst):
        raise AssertionError('gegeven reeks is niet stijgend')
    # (andere mogelijheid) assert stijgend(lijst), 'gegeven reeks is niet stijgend'

    else:
        resultaat = []
        lengte_resultaat = int(lijst[-1]) + 1
        for i in range(lengte_resultaat):
            som = 0
            for m in range(i +1):
                som += lijst.count(m)
            resultaat.append(som)
        return resultaat


def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    resultaat = []
    optelling = 1
    for i in lijst:
        som = int(i) + optelling
        resultaat.append(som)
        optelling += 1
    return resultaat


def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'

    frequentie = frequentiereeks(lijst)

    return (verhogen(lijst), verhogen(frequentie))



if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Thomas Driesen/complementaire-reeksen.py"",""fullName"":""Thomas Driesen"",""id"":""12289"",""status"":""correct"",""submissionID"":""6376833"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:18:30.000Z"",""labels"":""chem""}"
815,/home/maxiem/Downloads/files/Lise Goossens/complementaire-reeksen.py,"def stijgend(getallen):

    positie = 0
    while positie < len(getallen) - 1:
        if getallen[positie] > getallen[positie + 1]:
            return False
        positie += 1
    return True

def frequentiereeks(getallen):
    assert stijgend(getallen) == True, 'gegeven reeks is niet stijgend'
    if stijgend(getallen):
        getallen2 = []
        opgetelde_waarde = 0
        for pos in range(max(getallen) + 1):
            opgetelde_waarde += getallen.count(pos)
            getallen2.append(opgetelde_waarde)
        return getallen2

def verhogen(getallen):

    getallen3 = []
    for pos in range(len(getallen)):
        getallen3.append((getallen[pos] + pos) + 1)

    return getallen3

def complementaire_reeksen(getallen):

    assert stijgend(getallen) == True, 'gegeven reeks is niet stijgend'
    if stijgend(getallen):
        getallen4 = []
        getallen4 = verhogen(getallen)
        #getallen4.append(frequentiereeks(getallen))
        return getallen4, verhogen(frequentiereeks(getallen))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Lise Goossens/complementaire-reeksen.py"",""fullName"":""Lise Goossens"",""id"":""12251"",""status"":""correct"",""submissionID"":""6341413"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T19:31:39.000Z"",""labels"":""geog""}"
816,/home/maxiem/Downloads/files/Nina Neutens/complementaire-reeksen.py,"def stijgend(lijst):
    stijgende_lijst = sorted(lijst)
    if list(stijgende_lijst) == list(lijst):
        return True
    return False

def frequentiereeks(lijst):
    resultaat = list()
    stijgende_lijst = list(sorted(lijst))
    assert stijgende_lijst == list(lijst), 'gegeven reeks is niet stijgend'
    for teller in range(1, lijst[-1] + 2):
        getal = 0
        for character in lijst:
            if teller > character:
                getal += 1
        resultaat.append(getal)
    return resultaat

def verhogen(reeks):
    lijst = list()
    teller = 1
    for cijfer in reeks:
        cijfer += teller
        lijst.append(cijfer)
        teller += 1
    return list(lijst)

def complementaire_reeksen(reeks):
    stijgende_lijst = list(sorted(reeks))
    assert stijgende_lijst == list(reeks), 'gegeven reeks is niet stijgend'
    verhoogde_lijst = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    verhoogde_frequentie = verhogen(frequentie)
    return verhoogde_lijst, verhoogde_frequentie",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Nina Neutens/complementaire-reeksen.py"",""fullName"":""Nina Neutens"",""id"":""12200"",""status"":""correct"",""submissionID"":""6273875"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-04T20:40:38.000Z"",""labels"":""geog""}"
817,/home/maxiem/Downloads/files/Rune Van Severen/complementaire-reeksen.py,"def stijgend(reeks):
    if all(i <= j for i, j in zip(reeks, reeks[1:])):
        return True
    return False
    
def frequentiereeks(reeks):
    assert stijgend(reeks) is True, ""gegeven reeks is niet stijgend""
    hoogste = max(reeks)
    frequenties = list()
    for i in range(hoogste + 1):
        aantal = 0
        for a in reeks:
            if a <= i:
                aantal += 1
        frequenties.append(aantal)
    return frequenties

def verhogen(reeks):
    verhoogde_reeks = list()
    for index, getal in enumerate(reeks):
        verhoogde_reeks.append(getal+index + 1)
    return verhoogde_reeks

def complementaire_reeksen(reeks):
    assert stijgend(reeks) is True, 'gegeven reeks is niet stijgend'
    
    verhoogde_frequentiereeks = list()
    for index, getal in enumerate(frequentiereeks(reeks)):
        verhoogde_frequentiereeks.append(getal + index + 1)
    
    return verhogen(reeks), verhoogde_frequentiereeks",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ),"{""filename"":""Rune Van Severen/complementaire-reeksen.py"",""fullName"":""Rune Van Severen"",""id"":""12283"",""status"":""correct"",""submissionID"":""6353086"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T13:12:58.000Z"",""labels"":""geog""}"
818,/home/maxiem/Downloads/files/Anne Vleminckx/complementaire-reeksen.py,"def stijgend(lijst):
    lengte = len(lijst)
    pos = 0
    stijgen = True
    while pos < (lengte-1) and stijgen is True:
        if lijst[pos] > lijst[pos+1]:
            stijgen = False
        pos += 1
    return stijgen

def frequentiereeks(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    einde = len(lijst)
    lengte = lijst[einde-1]
    getal = 1
    output = []
    while getal <= lengte:
        b = 0
        for a in lijst:
            if a < getal:
                b += 1
        output.append(b)
        getal += 1
    output.append(einde)
    return output

def verhogen(lijst):
    lengte = len(lijst)
    pos = 0
    output = []
    while pos < lengte:
        a = lijst[pos] + pos + 1
        output.append(a)
        pos += 1

    return output

def complementaire_reeksen(lijst):
    #assertion
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    #eerste element tuple: verhoogde getallen
    a = verhogen(lijst)
    #tweede element tuple: frequentiereeks + verhogen
    frequentiereekslijst = frequentiereeks(lijst)
    b = verhogen(frequentiereekslijst)

    return(a,b)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( identifier ) ( jsx_namespace_name ( identifier ) ( identifier ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( array ( identifier ) ) ( identifier ) ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Anne Vleminckx/complementaire-reeksen.py"",""fullName"":""Anne Vleminckx"",""id"":""12294"",""status"":""correct"",""submissionID"":""6377581"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:00:42.000Z"",""labels"":""keuz""}"
819,/home/maxiem/Downloads/files/Simon Stael/complementaire-reeksen.py,"def stijgend(reeks):
    vorige = reeks[0]
    for i in reeks[1:]:
        if i < vorige:
            return False
        vorige = i
    return True

def frequentiereeks(reeks):
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    index = 0
    lijst = []
    for i in range(reeks[-1] + 1):
        if i in reeks:
            index += reeks.count(i)
        lijst.append(index)
    return lijst

def verhogen(lijst):
    lijst = list(lijst)
    for a in range(len(lijst)):
        lijst[a] += a + 1
    return lijst

def complementaire_reeksen(lijst):
    return verhogen(lijst), verhogen(frequentiereeks(lijst))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Simon Stael/complementaire-reeksen.py"",""fullName"":""Simon Stael"",""id"":""12295"",""status"":""correct"",""submissionID"":""6406441"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T17:43:56.000Z"",""labels"":""geog""}"
820,/home/maxiem/Downloads/files/Peter Thys/complementaire-reeksen.py,"def stijgend(reeks_getallen):
    """"""
    Een functie stijgend die een Booleaanse waarde (bool) teruggeeft die aangeeft of de getallen in de gegeven reeks al dan niet stijgend zijn.
    Daarbij is het dus wel toegelaten dat er dubbels voorkomen (met andere woorden: je moet niet nagaan of de reeks strikt stijgend is).
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    positie = 0

    for _ in enumerate(reeks_getallen):
        while positie != (len(reeks_getallen) - 1):
            if reeks_getallen[positie+1] - reeks_getallen[positie] < 0:
                return False
            positie += 1

    return True

def frequentiereeks(reeks_getallen):
    """"""
    Een functie frequentiereeks die een nieuwe lijst (list)  teruggeeft met de getallen (int) van de frequentiereeks van de gegeven reeks.
    Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen met de boodschap gegeven reeks is niet stijgend.
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks_getallen) == True , ""gegeven reeks is niet stijgend""


    lijst = []
    aantal = reeks_getallen[-1] + 1
    kleiner_dan_getal = 1
    while aantal != 0:
        teller = 0
        for cijfer in reeks_getallen:
            if cijfer < kleiner_dan_getal:
                teller += 1
        lijst.append(teller)
        teller = 0
        kleiner_dan_getal += 1
        aantal -= 1

    return lijst

def verhogen(reeks_getallen):
    """"""
    Een functie verhogen die een nieuwe lijst (list) teruggeeft die de getallen (int) van de gegeven reeks bevat,
    maar telkens verhoogd overeenkomstig hun positie in de gegeven reeks —
    dat is 1 opgeteld bij het eerste getal van de gegeven reeks, 2 bij het tweede getal, enzoverder.
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    lijst = []
    positie = 1
    for getal in reeks_getallen:
        getal += positie
        lijst.append(getal)
        positie += 1
    return lijst

def complementaire_reeksen(reeks_getallen):
    """"""
    Een functie complementaire_reeksen die een tuple teruggeeft.
    Het eerste element van dit tuple is een nieuwe lijst (list) met de getallen (int) van de gegeven reeks
    die verhoogd werden overeenkomstig hun positie in de reeks.
    Het tweede element van het tuple is een nieuwe lijst (list) met de frequentiereeks van de gegeven reeks,
    waarvan de getallen (int) verhoogd werden overeenkomstig hun positie in de reeks.
    Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen
    met de boodschap gegeven reeks is niet stijgend.
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    lijst = []
    lijst.append(verhogen(reeks_getallen))
    lijst.append(verhogen(frequentiereeks(reeks_getallen)))
    return tuple(lijst)


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( member_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( property_identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Peter Thys/complementaire-reeksen.py"",""fullName"":""Peter Thys"",""id"":""12297"",""status"":""correct"",""submissionID"":""6408761"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T20:57:20.000Z"",""labels"":""keuz""}"
821,/home/maxiem/Downloads/files/Damian van Kranen/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):

    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    var = 0
    check = 0

    for index in range(1, len(reeks)):
        getal = reeks[var]
        if reeks[index] < getal:
            check = 1
        var += 1

    return bool(check == 0)


def frequentiereeks(lijst):

    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    assert stijgend(lijst), 'gegeven reeks is niet stijgend'

    freeks = []
    index = 0
    f = 0

    for getal in range(1, lijst[-1]+2):
        while index < len(lijst) and lijst[index] < getal:
            f += 1
            index += 1
        freeks.append(f)
        f = 0
        index = 0

    return freeks


def verhogen(lijst):

    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    verhoogd = []

    for index, cijfer in enumerate(lijst):
        verhoogd.append(cijfer + index +1)

    return verhoogd


def complementaire_reeksen(lijst):

    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    verhoogd = verhogen(lijst)
    frequentie_verhoogd = verhogen(frequentiereeks(lijst))

    return (verhoogd, frequentie_verhoogd)


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( variable_declaration ( ERROR ( number ) ) ( variable_declarator ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( number ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Damian van Kranen/complementaire-reeksen.py"",""fullName"":""Damian van Kranen"",""id"":""12298"",""status"":""correct"",""submissionID"":""6372486"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:49:42.000Z"",""labels"":""keuz""}"
822,/home/maxiem/Downloads/files/Bavo Danneels/complementaire-reeksen.py,"def stijgend(reeks):
    res = all(i<=j for i,j in zip(reeks,reeks[1:]))
    return res


def frequentiereeks(reeks):
    assert stijgend(reeks) == True, ""gegeven reeks is niet stijgend""
    c = [0 for k in range(reeks[-1]+1)]
    
    for element in reeks:
        c[element]+=1
        
    
    som = 0
    for i, l in enumerate(c):
        c[i] += som
        som += l
    return c

def verhogen(reeks):
    res = list(reeks)
    for i, e in enumerate(res):
        res[i] += i+1
    return res

def complementaire_reeksen(reeks):
    assert stijgend(reeks) == True, ""gegeven reeks is niet stijgend""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))



",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( ERROR ( number ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Bavo Danneels/complementaire-reeksen.py"",""fullName"":""Bavo Danneels"",""id"":""12296"",""status"":""correct"",""submissionID"":""6412493"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T10:29:32.000Z"",""labels"":""geog""}"
823,/home/maxiem/Downloads/files/Iris Dumolein/complementaire-reeksen.py,"def stijgend(lijst):
    lengte = len(lijst)
    m = 0
    for i in lijst:
        if m < lengte-1:
            volgend = lijst[lijst.index(i)+1]
            vorig = i
            if vorig <= volgend:
                m += 1
            else:
                return False
    return True
def frequentiereeks(lijst):
    
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    
    aantal = 0
    lijstF = []  
    for i in range(lijst[-1] + 1):
        aantal += lijst.count(i)
        lijstF.append(aantal)
        
    return lijstF
    
    
def verhogen(lijst):
    index = 1
    lijstV = []
    for i in lijst:
        nieuw = i + index
        index += 1
        lijstV.append(nieuw)
    return lijstV

def complementaire_reeksen(lijst):
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    return verhogen(lijst), verhogen(frequentiereeks(lijst))
    
    
    
    ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Iris Dumolein/complementaire-reeksen.py"",""fullName"":""Iris Dumolein"",""id"":""8460"",""status"":""correct"",""submissionID"":""6413906"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T12:04:02.000Z"",""labels"":""biol""}"
824,/home/maxiem/Downloads/files/Cynthia De Wilde/complementaire-reeksen.py,"def increasing(thelist):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for x in range(len(thelist)-1):
        if thelist[x] <= thelist[x+1]:
            continue
        return False
    return True

def frequency_sequence(thelist):
    """"""
    >>> frequency_sequence((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    [0, 1, 1, 3, 3, 6, 6, 10]
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(thelist), ""given sequence is not increasing""
    frequency = []
    counter = 0
    placeinlist = 0
    for x in range(1, thelist[-1]+2):
        while thelist[placeinlist] < x:
            counter += 1
            placeinlist += 1
            if placeinlist >= len(thelist):
                break
        frequency.append(counter)
    return frequency

def lift(thelist):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    liftedlist = []
    for x in range(len(thelist)):
        liftedlist.append(thelist[x]+x+1)
    return liftedlist

def complementary_sequences(thelist):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(thelist), ""given sequence is not increasing""
    firstpart = (lift(thelist))
    frequency = frequency_sequence(thelist)
    secondpart = (lift(frequency))
    return (firstpart, secondpart)

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( continue_statement ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Cynthia De Wilde/complementaire-reeksen.py"",""fullName"":""Cynthia De Wilde"",""id"":""12272"",""status"":""correct"",""submissionID"":""6390266"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T10:49:14.000Z"",""labels"":""biol""}"
825,/home/maxiem/Downloads/files/Emma Van Kerckhove/complementaire-reeksen.py,"def stijgend(lijst):
    aantal = 0
    for i in range(0, len(lijst)):
        if lijst[i] >= lijst[i - 1]:
            aantal += 1
    if aantal == len(lijst) - 1:
        return True
    else:
        return False

def frequentiereeks(lijst):
    antwoord = []
    counter = 0
    max = 0
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'

    antwoord = []
    counter = 0
    getal = 1
    while getal <= (int(lijst[-1]) + 1):
        for i in range(0,len(lijst)):
            if lijst[i] < getal:
                counter += 1
        antwoord += [counter]
        getal += 1
        counter = 0
    return antwoord

def verhogen(lijst):
    antwoord = []
    getal = 1
    for i in range(0,len(lijst)):
        cijfer = int(lijst[i] + getal)
        antwoord += [cijfer]
        getal += 1
    return antwoord

def complementaire_reeksen(lijst):
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'
    eersteElement = verhogen(lijst)
    tweedeElement = frequentiereeks(lijst)
    tweedeElement = verhogen(tweedeElement)
    return(eersteElement, tweedeElement)

            ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Emma Van Kerckhove/complementaire-reeksen.py"",""fullName"":""Emma Van Kerckhove"",""id"":""12085"",""status"":""correct"",""submissionID"":""6344976"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T13:24:37.000Z"",""labels"":""bcbt""}"
826,/home/maxiem/Downloads/files/Fre Van Daele/complementaire-reeksen.py,"def stijgend(reeks):
    x = -1
    y = 0
    z = 0
    for element in reeks[:-1]:
        x += 1
        y += 1
        if reeks[x] > reeks[y]:
            return False
        else:
            z += 1
    if z == len(reeks) - 1:
        return True

def frequentiereeks(reeks):
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    lijst = []
    for i in range(reeks[-1] + 1):
        totaal = 0
        for element in reeks:
            if element < i + 1:
                totaal += 1
        lijst.append(totaal)
    return lijst

def verhogen(reeks):
    reeks = list(reeks)
    x = 1
    y = 0
    for element in reeks:
        reeks[y] = reeks[y] + x
        y += 1
        x += 1
    return reeks

def complementaire_reeksen(reeks):
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    deel1 = verhogen(reeks)
    deel2 = frequentiereeks(reeks)
    deel2 = verhogen(deel2)
    complement = (deel1, deel2)
    return complement",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Fre Van Daele/complementaire-reeksen.py"",""fullName"":""Fre Van Daele"",""id"":""12300"",""status"":""correct"",""submissionID"":""6374165"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T13:06:31.000Z"",""labels"":""chem""}"
827,/home/maxiem/Downloads/files/Zhengze Li/complementaire-reeksen.py,"def increasing(x):
    tr = True
    for i in range(len(x)-1):
        if x[i] <= x[i+1]:
            pass
        else:
            tr = False
    return tr


import numpy as np
def frequency_sequence(x):
    assert increasing(x), ""given sequence is not increasing""
    list1 = [0]*(1+x[-1])
    for i in range(len(x)):
        list1 = np.array(list1) + np.array([0]*x[i] + [1]*(1+x[-1]-x[i]))
    list1 = map(int, list1)
    return list(list1)


def lift(x):
    list1 = list((np.array(x) + np.array(range(len(x))) + 1))
    list1 = map(int, list1)
    return list(list1)


def complementary_sequences(x):
    assert increasing(x), ""given sequence is not increasing""
    a = list(lift(x))
    b = list(lift(frequency_sequence(x)))
    return (a, b)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( import ) ( ERROR ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( array ( number ) ) ( parenthesized_expression ( binary_expression ( number ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( array ( number ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( binary_expression ( array ( number ) ) ( parenthesized_expression ( binary_expression ( binary_expression ( number ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Zhengze Li/complementaire-reeksen.py"",""fullName"":""Zhengze Li"",""id"":""12302"",""status"":""correct"",""submissionID"":""6393128"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T15:04:26.000Z"",""labels"":""stat""}"
828,/home/maxiem/Downloads/files/Shengmin Zhang/complementaire-reeksen.py,"def increasing(seq):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    """"""
    return check(seq, len(seq) - 1)


def check(seq, length):
    if length < 1:
        return True
    return check(seq, length - 1) and seq[length] >= seq[length - 1]


def frequency_sequence(seqs):
    assert increasing(seqs), 'given sequence is not increasing'
    return frequency(seqs)

def frequency(seqs):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    """"""
    seqs = list(seqs)
    seqs.reverse()
    seqs.append(0)
    seqs.reverse()
    seqs.append(seqs[-1] + 1)
    lst = []

    for i in range(len(seqs) - 1):
        seqs.append([i] * (seqs[i + 1] - seqs[i]))

    return [i for item in lst for i in item]

def sequence(seqs):

    """"""
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    """"""
    frequency = {}
    for i in set(seqs):
        frequency[i] = seqs.count(i)
    new_list = list(frequency.values())
    lst = []
    s= new_list[0]
    for n in new_list[1:]:
        lst.append(s)
        s += n
    lst.append(s)
    return lst

def lift(z):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    """"""
    return [z[i] + i + 1 for i in range(len(z))]


def complementary_sequences(z):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    """"""
    assert increasing(z), 'given sequence is not increasing'
    left = lift(z)
    right = []
    for i in range(1, left[-1] + 2):
        i if i in left else right.append(i)
    return left, right",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( return_statement ( binary_expression ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Shengmin Zhang/complementaire-reeksen.py"",""fullName"":""Shengmin Zhang"",""id"":""12299"",""status"":""wrong"",""submissionID"":""6423439"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:59:14.000Z"",""labels"":""stat""}"
829,/home/maxiem/Downloads/files/Sofie De Boe/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(getallenreeks):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    # controleren of de cijfers in stijgende volgorde staan
    return True if list(getallenreeks) == sorted(getallenreeks) else False


if __name__ == '__main__':
    import doctest
    doctest.testmod()


def frequentiereeks(getallenreeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    getallenreeks = list(getallenreeks)
    if stijgend(getallenreeks) is True:
        nieuwe_lijst = [0 * i for i in range(0, (getallenreeks[-1] + 1))]
        for i in getallenreeks:
            nieuwe_lijst[i] += 1
        for i in range(1, len(nieuwe_lijst)):
            nieuwe_lijst[i] += nieuwe_lijst[i - 1]
        return nieuwe_lijst
    # error laten verschijnen als de getallenreeks niet stijgend is
    else:
        raise AssertionError('gegeven reeks is niet stijgend')


if __name__ == '__main__':
    import doctest
    doctest.testmod()


def verhogen(getallenreeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    eerste_term_van_som = list(getallenreeks)
    tweede_term_van_som = [i for i in range(1, (len(getallenreeks) + 1))]
    nieuwe_lijst = [a + b for (a, b) in zip(eerste_term_van_som, tweede_term_van_som)]
    return nieuwe_lijst


if __name__ == '__main__':
    import doctest
    doctest.testmod()


def complementaire_reeksen(getallenreeks):
    return verhogen(getallenreeks), verhogen(frequentiereeks(getallenreeks))",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( return_statement ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Sofie De Boe/complementaire-reeksen.py"",""fullName"":""Sofie De Boe"",""id"":""12305"",""status"":""correct"",""submissionID"":""6372174"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:28:10.000Z"",""labels"":""chem""}"
830,/home/maxiem/Downloads/files/Rick Seifert/complementaire-reeksen.py,"# check if the integers in a sequence are increasing or not

def increasing(sequence):
    increasing = all(a <= b for a, b in zip(sequence, sequence[1:])) 
    return increasing




# check if a sequence is increasing
# count how much integers are bigger then 0, 1, 2 ..... and return a list

def frequency_sequence(sequence):
    assert increasing(sequence), 'given sequence is not increasing'
    
    # calculate last value
    last_value = sequence[-1] + 1
    freq_sequence = []
    
    # count how often a number is in the sequence
    for number in range(last_value):
        freq_sequence += [sequence.count(number)] 
        if number != 0:
            freq_sequence[number] += freq_sequence[number - 1]
    return freq_sequence



# add 1 to the first position in the list 2 to the seconde, 3 to the third ...

def lift(sequence):
    # proove that sequence is a list
    sequence = list(sequence)
    
    sequence_length = len(sequence)
    
    # add to all numbers in sequence x+1
    for x in range(sequence_length):
        sequence[x] += (x + 1)
        
    return sequence



# create tuple with increasing sequence and increased values

def complementary_sequences(sequence):
    
    # check if sequence is increasing
    assert increasing(sequence), 'given sequence is not increasing'
    
    increasing_sequence = lift(sequence)
    
    incr_value = [value for value in range(1, (increasing_sequence[-1] + 2))]
    incr_value = list(set(incr_value) - set(increasing_sequence))
    
    return (increasing_sequence, incr_value)   
    ",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( number ) ) ( sequence_expression ( number ) ( member_expression ( number ) ( ERROR ) ( property_identifier ) ) ) ) ) ( return_statement ( ERROR ( identifier ) ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( number ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( call_expression ( member_expression ( identifier ) ( ERROR ) ( property_identifier ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Rick Seifert/complementaire-reeksen.py"",""fullName"":""Rick Seifert"",""id"":""11550"",""status"":""correct"",""submissionID"":""6416259"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T13:57:57.000Z"",""labels"":""keuz""}"
831,/home/maxiem/Downloads/files/Wolf Landuyt/complementaire-reeksen.py,"def stijgend (reeks):
    getal = 0
    for x in reeks:
        if not x >= getal:
            return False
        getal = x
    return True
def geef_aantal_kleiner(lijst,getal):
    nummer = 0
    for x in lijst:
        if x <= getal:
            nummer += 1
        if x > getal:
            return nummer
    return nummer

def frequentiereeks(reeks):
    if stijgend(reeks) == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    laatste_getal = reeks[-1]
    laatste_getal += 1
    lijst = []
    for x in range(laatste_getal):
        lijst.append(geef_aantal_kleiner(reeks, x))
    return lijst
def verhogen(reeks):
    getal = 1
    lijst = []
    for x in reeks:
        lijst.append(x + getal)
        getal += 1
    return lijst
def complementaire_reeksen(reeks):
    p = verhogen(reeks)
    z = frequentiereeks(reeks)
    z = verhogen(z)
    return p,z


",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Wolf Landuyt/complementaire-reeksen.py"",""fullName"":""Wolf Landuyt"",""id"":""12309"",""status"":""correct"",""submissionID"":""6400345"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T11:50:30.000Z"",""labels"":""chem""}"
832,/home/maxiem/Downloads/files/Hanne Schokkelé/complementaire-reeksen.py,"def stijgend(getallen):
    getal = getallen[0]
    for i in range(1, len(getallen)):
        if getallen[i] >= getal:
            getal = getallen[i]
        else:
            return False
    return True

def aantalkleinerdan(getallen, kleinerdan):
    aantal = 0
    for getal in getallen:
        if getal < kleinerdan:
            aantal += 1
    return aantal

def frequentiereeks(getallen):
    if not stijgend(getallen):
        raise AssertionError(""gegeven reeks is niet stijgend"")
    frequenties = []
    for i in range(1, max(getallen)+2):
        frequenties.append(aantalkleinerdan(getallen, i))
    return frequenties

def verhogen(getallen):
    lijst = []
    for i in range(0, len(getallen)):
        lijst.append(getallen[i] + i + 1)
    return lijst

def complementaire_reeksen(getallen):
    if not stijgend(getallen):
        raise AssertionError(""gegeven reeks is niet stijgend"")
    return (verhogen(getallen),verhogen(frequentiereeks(getallen)))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Hanne Schokkelé/complementaire-reeksen.py"",""fullName"":""Hanne Schokkelé"",""id"":""12311"",""status"":""correct"",""submissionID"":""6367839"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T18:14:57.000Z"",""labels"":""chem""}"
833,/home/maxiem/Downloads/files/Jitse Dossche/complementaire-reeksen.py,"def stijgend(p):
    p = list(p)
    import itertools
    import operator
    res = all(itertools.starmap(operator.le,zip(p, p[1:])))
    return res

def geef_kleiner(lijst,getal):
    nummer = 0
    for x in lijst:
        if x <= getal:
            nummer += 1
        if x > getal:
            return nummer
    return nummer

def frequentiereeks(p):
 if stijgend(p) == False:
     raise AssertionError('gegeven reeks is niet stijgend')
 laatste_getal = p[-1]
 laatste_getal += 1
 lijst = []
 for x in range(laatste_getal):
     lijst.append(geef_kleiner(p,x))
 return lijst



def verhogen(p):
    p = list(p)
    v = []
    for inx, elements in enumerate(p, start = 1):
        v.append(inx + elements)

    return (v)

def complementaire_reeksen(p):
  a = verhogen(p)
  b = frequentiereeks(p)
  c = verhogen(b)
  return (a,c)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( import ) ( ERROR ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Jitse Dossche/complementaire-reeksen.py"",""fullName"":""Jitse Dossche"",""id"":""12312"",""status"":""correct"",""submissionID"":""6413822"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T11:57:19.000Z"",""labels"":""chem""}"
834,/home/maxiem/Downloads/files/Saskia Bartholomäus/complementaire-reeksen.py,"def increasing(list):

    '''
        >>> increasing([2, 3, 5, 7, 11, 13])
        True
        >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
        True
        >>> increasing([5, 3, 2, 7, 8, 1, 9])
        False
    '''

    index = 0

    for i in list:

        if i >= index:
            incr = True
            index = i
        else:
            incr = False
            break

    return incr

def frequency_sequence(list):

    '''
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    '''

    incr = increasing(list)
    assert incr, ""given sequence is not increasing""

    seq = []
    number = 0

    while len(seq) < (list[-1]+1):

        number += 1
        sum = 0

        for i in list:
            if i < number:
                sum += 1

        seq.append(sum)

    return seq

def lift(list):

    '''
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    seq = []
    index = 0

    for i in list:
        index += 1
        sum = i + index
        seq.append(sum)

    return seq

def complementary_sequences(list):

    '''
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >> > complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >> > complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: given sequence is not increasing
    '''

    incr = increasing(list)
    assert incr, ""given sequence is not increasing""

    seq1 = lift(list)
    freq = frequency_sequence(list)
    seq2 = lift(freq)

    return (seq1, seq2)

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( break_statement ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Saskia Bartholomäus/complementaire-reeksen.py"",""fullName"":""Saskia Bartholomäus"",""id"":""12301"",""status"":""correct"",""submissionID"":""6348551"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T17:41:23.000Z"",""labels"":""keuz""}"
835,/home/maxiem/Downloads/files/Marjolijn Vanlangenakker/complementaire-reeksen.py,"#functie1: stijgend
#kijken of alle elementen in lijst stijgende volgorde hebben
import operator
import itertools
def stijgend(lijst):
    if all(itertools.starmap(operator.le, zip(lijst, lijst[1:]))):
        return True
    return False

#functie 2: frequentiereeks
def frequentiereeks(reeks):
    if not stijgend(reeks):
        assert False, ""gegeven reeks is niet stijgend""
    nieuwe_lijst = []
    for i in range(1, int(reeks[-1] + 2)):
        x = 0
        for a in reeks:
            if a < i:
                x += 1
        nieuwe_lijst.append(x)
    return nieuwe_lijst

#functie 3: verhogen
def verhogen(reeks): #positie optellen bij reeks
    #zeker maken dat reeks een lijst is en geen tuple
    reeks = list(reeks)
    #nieuwe variabele maken om getallen aan toe te voegen
    nieuwe_lijst = []
    for index, waarde in enumerate(reeks):
        nieuwe = waarde + index + 1 #+1 want index start vanaf 0
        nieuwe_lijst.append(nieuwe)

    return nieuwe_lijst

#functie 4: complementaire reeksen
def complementaire_reeksen(reeks):
    # eerst controleren of reeksen wel stijgend zijn
    if not stijgend(reeks):
        assert False, ""gegeven reeks is niet stijgend""
    nieuwe_lijst_1 = verhogen(reeks)
    lijst_2 = frequentiereeks(reeks)
    nieuwe_lijst_2 = []
    for index, waarde in enumerate(lijst_2):
        nieuwe = waarde + index + 1
        nieuwe_lijst_2.append(nieuwe)
    #beide tuples converteren naar lijsten
    nieuwe_lijst_1 = list(nieuwe_lijst_1)
    nieuwe_lijst_2 = list(nieuwe_lijst_2)

    return (nieuwe_lijst_1, nieuwe_lijst_2)

























































",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( call_expression ( import ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( number ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( number ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( ERROR ( ERROR ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( number ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Marjolijn Vanlangenakker/complementaire-reeksen.py"",""fullName"":""Marjolijn Vanlangenakker"",""id"":""8293"",""status"":""correct"",""submissionID"":""6404253"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T15:42:06.000Z"",""labels"":""chem""}"
836,/home/maxiem/Downloads/files/Nicole Banholzer/complementaire-reeksen.py,"
def increasing(numbers):

    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    
    length = len(numbers) - 1
    
    for x in range(length):
        if numbers[x] > numbers[x+1]:
            return False
       
    
    return True
    
    
def frequency_sequence(numbers):
    
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
       
    if increasing(numbers):
        m = numbers[-1] + 1
        Liste2 = []
    
        for x in range(m):
            
            Liste2 += [numbers.count(x)]
            if x == 0:
                Liste2[x] = Liste2[x]
            else:
                Liste2[x] += Liste2[x - 1]
    
        return Liste2
    
    else:
        assert increasing(numbers) == True, ""given sequence is not increasing""
        


def lift(numbers):
    
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    
    if type(numbers) == tuple:
        numbers = list(numbers)
    
    length = len(numbers)
    for x in range(length):
        numbers[x] += (x + 1)
    
    return numbers
    
    
def complementary_sequences(numbers):
    
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    
    
    if increasing(numbers):
        numbers1 = lift(numbers)
        m = numbers1[-1] + 1
     
        list2 = [n for n in range(1, (m + 1))]
        #import numpy as np
        #list3 = np.setdiff(list2,numbers1)
        list3 = set(list2) - set (numbers1)
        list3 = list(list3)
        return (numbers1, list3)
       
  
   
    else:
        assert increasing(numbers) == True, ""given sequence is not increasing""
        


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Nicole Banholzer/complementaire-reeksen.py"",""fullName"":""Nicole Banholzer"",""id"":""12317"",""status"":""correct"",""submissionID"":""6344236"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T11:59:51.000Z"",""labels"":""keuz""}"
837,/home/maxiem/Downloads/files/Jolien De Moor/complementaire-reeksen.py,"# stijgend
def stijgend(getallen):
    if tuple(getallen) != tuple(sorted(getallen)):
        return False
    return True

# frequentiereeks
def frequentiereeks(reeks):
    # functie AssertionError
    assert stijgend(reeks) is True, 'gegeven reeks is niet stijgend'
    
    aantal = int(reeks[-1]) + 1
    lijst = []

    for i in range(aantal):
        x = 0
        for j in range(len(reeks)):
            if reeks[j] < i + 1:
                x += 1
        lijst.append(x)
        x = 0
    return lijst

# verhogen
def verhogen(getallen):
    getallen = list(getallen)
    x = []
    positie = 1

    for i in getallen:
        term = i + positie
        x.append(term)
        positie += 1
    return x

# complementaire reeksen
def complementaire_reeksen(getallen):
    # functie AssertionError
    assert stijgend(getallen) is True, 'gegeven reeks is niet stijgend'

    verhoging = verhogen(getallen)
    lijst = []
    for i in range(1, verhoging[-1] + 2):
        if i not in verhoging:
            lijst.append(i)

    return verhoging, lijst
",( program ( ERROR ( ERROR ) ( expression_statement ( identifier ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Jolien De Moor/complementaire-reeksen.py"",""fullName"":""Jolien De Moor"",""id"":""11544"",""status"":""correct"",""submissionID"":""6423900"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T20:37:18.000Z"",""labels"":""bcbt""}"
838,/home/maxiem/Downloads/files/Branko De Baets/complementaire-reeksen.py,"def stijgend(reeks):
    x = 0
    for i in range(len(reeks) - 1):
        if reeks[i] <= reeks[i + 1]:
            x += 1
    if x == len(reeks) - 1:
        return True
    else:
        return False

def frequentiereeks(reeks):
    if stijgend(reeks) is True:
        lijst = (reeks[-1] + 1) * [0]
        x = 0
        if len(lijst) < reeks[-1]:
            for i in range(len(lijst)):
                if i < reeks[x]:
                    lijst[i] += x

                else:
                    x += 1
                    lijst[i] += x
        else:
            for i in range(reeks[-1] + 1):
                x = reeks.count(i)
                lijst[i] = lijst[i-1] + x

        return lijst

    else:
        raise AssertionError('gegeven reeks is niet stijgend')

def verhogen(reeks):
    lijst = list(reeks)
    for i in range(len(reeks)):
        lijst[i] += i + 1
    return lijst

def complementaire_reeksen(reeks):
    if stijgend(reeks) is True:
        lijst1 = verhogen(reeks)
        lijst2 = verhogen(frequentiereeks(reeks))
        
        return lijst1, lijst2

    else:
        raise AssertionError('gegeven reeks is niet stijgend')",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ( array ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ),"{""filename"":""Branko De Baets/complementaire-reeksen.py"",""fullName"":""Branko De Baets"",""id"":""12320"",""status"":""correct"",""submissionID"":""6339759"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T15:51:02.000Z"",""labels"":""chem""}"
839,/home/maxiem/Downloads/files/Emma Van De Steene/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    """"""Deze functie bepaald of de reeks stijgend is.
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    resultaat = True
    vorig_getal = 0
    for getal in reeks:
        if getal < vorig_getal:
            resultaat = False
        vorig_getal = getal
    return resultaat


def frequentiereeks(reeks):
    """"""Deze functie zet een gegeven reeks om in een frequentiereeks indien het een stijgende reeks is.
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks):
        assert False, ""gegeven reeks is niet stijgend""
    else:
        frequentie_list = []
        reeks_list = list(reeks)
        reeks_list.append(reeks[-1]+1)
        for cijfer in range(1, (reeks[-1]+2)):
            aantal = 0
            i = 0
            while cijfer > reeks_list[i]:
                aantal += 1
                i += 1
            frequentie_list.append(aantal)
    return frequentie_list


def verhogen(reeks):
    """"""Deze functie indexeert alle getallen in de reeks met zijn positie
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    i = 0
    indexering = 1
    reeks_list = list(reeks)
    for getal in reeks_list:
        reeks_list[i] = getal + indexering
        i += 1
        indexering += 1
    return reeks_list


def complementaire_reeksen(reeks):
    """"""Deze functie geeft de verhoogde reeks en de verhoogde frequentiereeks van 
    een gegeven reeks.
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    verhoogde_reeks = verhogen(reeks)
    frequentie_reeks = verhogen(frequentiereeks(reeks))
    return verhoogde_reeks, frequentie_reeks


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Emma Van De Steene/complementaire-reeksen.py"",""fullName"":""Emma Van De Steene"",""id"":""12322"",""status"":""correct"",""submissionID"":""6348510"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T17:33:11.000Z"",""labels"":""keuz""}"
840,/home/maxiem/Downloads/files/Matthias Wittouck/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    n = 1
    for _ in lijst[1:len(lijst)]:
        if _ < lijst[n-1]:
            return False
        n += 1
    return True

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    n_lijst = stijgend(lijst)
    assert n_lijst is True, ""gegeven reeks is niet stijgend""
    n = 0
    m = 0
    freq = []
    while n != len(lijst):
        k = 0
        for karakter in lijst:
            if m >= karakter:
                k += 1
        freq.append(k)
        n = freq[-1]
        m += 1
    return freq

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    n_lijst = []
    n = 1
    for karakter in lijst:
        n_lijst.append(karakter+n)
        n += 1
    return n_lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    m_lijst = verhogen(lijst)
    n_lijst = frequentiereeks(lijst)
    o_lijst = verhogen(n_lijst)
    return m_lijst, o_lijst

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Matthias Wittouck/complementaire-reeksen.py"",""fullName"":""Matthias Wittouck"",""id"":""8215"",""status"":""correct"",""submissionID"":""6414020"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T12:14:58.000Z"",""labels"":""bcbt""}"
841,/home/maxiem/Downloads/files/Nicolien van Bellen/complementaire-reeksen.py,"#functie voor controleren van getallen
def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    bool = True
    getal = reeks[0]
    for i in reeks:
        if getal > i:
            bool = False
        getal = i
    return bool

#functie voor frequentiereeks
def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    try:
        assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
        aantal = 0
        frequentie = []
        for getal in range(reeks[-1] + 1):
            getal += 1
            for i in reeks:
                if i < getal:
                    aantal += 1
            frequentie += [aantal]
            aantal = 0
        return frequentie
    except AssertionError:
        raise

#functie voor verhogen van de getallen in de lijst
def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = []
    for i in enumerate(reeks):
        nieuw_getal = i[0] + 1 + i[1]
        lijst += [nieuw_getal]
    return lijst

#functie die de verhoogde reeks en de frequentie reeks hiervan weergeeft
def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    verhoogd = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    frequentie_verhoogd = verhogen(frequentie)
    tuple = (verhoogd, frequentie_verhoogd)
    return tuple
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( expression_statement ( identifier ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Nicolien van Bellen/complementaire-reeksen.py"",""fullName"":""Nicolien van Bellen"",""id"":""12076"",""status"":""correct"",""submissionID"":""6371663"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:02:25.000Z"",""labels"":""bcbt""}"
842,/home/maxiem/Downloads/files/Mirte De Temmerman/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(getallen):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    output = True
    for i in range(1, len(getallen)):
        if getallen[i] >= getallen[i-1]:
            output = True
        else:
            output = False
            break

    return output


def frequentiereeks(getallen):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    st = stijgend(getallen)
    assert st is True, ""gegeven reeks is niet stijgend""
    lijst = []
    m = getallen[-1]
    tel = 0
    for i in range(1, m+2):
        for j in getallen:
            if j < i:
                tel += 1
        lijst.append(tel)
        tel = 0

    return lijst


def verhogen(getallen):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = []
    index = 1
    for i in getallen:
        nieuw = i + index
        lijst.append(nieuw)
        index += 1

    return lijst


def complementaire_reeksen(getallen):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    vh = verhogen(getallen)
    fr = frequentiereeks(getallen)
    fr_vh = verhogen(fr)
    return vh, fr_vh


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( break_statement ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Mirte De Temmerman/complementaire-reeksen.py"",""fullName"":""Mirte De Temmerman"",""id"":""12029"",""status"":""correct"",""submissionID"":""6359210"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T11:39:46.000Z"",""labels"":""bcbt""}"
843,/home/maxiem/Downloads/files/Bas Vanheste/complementaire-reeksen.py,"def increasing(list):
    teller = 0
    for i in range(len(list) - 1):
        if list[i] <= list[i + 1]:
            teller += 1
        else:
            return False
    return True

def frequency_sequence(list):
    number = int(list[-1]) + 1
    list_freq = []
    for i in range(0, number):
        teller = 0
        for a in range(len(list)):
            if list[a] < i + 1:
                teller += 1
        list_freq.append(teller)
        teller = 0
    assert increasing(list), ""given sequence is not increasing""
    return list_freq

def lift(list):
    list_lift = []
    teller = 0
    for a in range(0, len(list)):
        teller += ((a + 1) + list[a])
        list_lift.append(teller)
        teller = 0
    return list_lift

def complementary_sequences(list):
    list_freq = frequency_sequence(list)
    number = int(list[-1]) + 1
    list_freq_2 = []
    for a in range(0, number):
        list_freq_2.append(list_freq[a] + (a + 1))
    tuple = (lift(list), list_freq_2)
    assert increasing(list), ""given sequence is not increasing""
    return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Bas Vanheste/complementaire-reeksen.py"",""fullName"":""Bas Vanheste"",""id"":""12064"",""status"":""correct"",""submissionID"":""6412089"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T10:11:10.000Z"",""labels"":""bcbt""}"
844,/home/maxiem/Downloads/files/Feihong Du/complementaire-reeksen.py,"def increasing(arrs):
    '''
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    :param arrs: list
    :return: bool
    '''
    return check_increasing(arrs, len(arrs) - 1)


def check_increasing(arrs, length):
    if length < 1:
        return True
    return check_increasing(arrs, length - 1) and arrs[length] >= arrs[length - 1]


def frequency_sequence(arr):
    '''
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    :param arr: tuple / list
    :return: list / error
    '''
    assert increasing(arr), 'given sequence is not increasing'

    return frequency(arr)
    # print([val for val in arr for i in range(2)])


def frequency(arr):
    '''
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    :param arr: list
    :return: list
    '''
    arr = list(arr)
    arr.reverse()
    arr.append(0)
    arr.reverse()
    arr.append(arr[-1] + 1)
    ans = []

    for i in range(len(arr) - 1):
        ans.append([i] * (arr[i + 1] - arr[i]))

    return [i for item in ans for i in item]
    # return list(tkinter._flatten(ans))


def sequence(arr):
    '''
    :param arr: tuple
    :return: list
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    '''
    frequency = {}

    for i in set(arr):
        frequency[i] = arr.count(i)

    fibo = list(frequency.values())

    ans = []
    sum = fibo[0]

    for num in fibo[1:]:
        ans.append(sum)
        sum += num

    ans.append(sum)

    return ans


def lift(arr):
    '''
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    :param arr:
    :return:
    '''
    return [arr[i] + i + 1 for i in range(len(arr))]


def complementary_sequences(arr):
    '''
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    :param arr: list
    :return: list / error
    '''
    assert increasing(arr), 'given sequence is not increasing'
    left = lift(arr)
    right = []

    for i in range(1, left[-1] + 2):
        i if i in left else right.append(i)

    return left, right",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ( ERROR ( identifier ) ) ( number ) ) ) ( return_statement ( identifier ) ) ( return_statement ( binary_expression ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( labeled_statement ( statement_identifier ) ( return_statement ( ERROR ) ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( ERROR ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Feihong Du/complementaire-reeksen.py"",""fullName"":""Feihong Du"",""id"":""12162"",""status"":""correct"",""submissionID"":""6398670"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T09:23:27.000Z"",""labels"":""stat""}"
845,/home/maxiem/Downloads/files/Estela Dos Santos/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
# ref: https://www.geeksforgeeks.org/python-check-if-list-is-sorted-or-not/?ref=lbp


def increasing(list_seq):
    sol = 0
    i = 1
    while i < len(list_seq):
        if list_seq[i] < list_seq[i - 1]:
            sol = 1
        i += 1
    if not sol:
        return True
    else:
        return False


def frequency_sequence(list_seq):
    assert increasing(list_seq), 'given sequence is not increasing'
    i = 1
    output = []

    while i <= max(list_seq) + 1:
        output.append(sum(map(lambda x: x<i, list_seq)))
        i += 1
    return output



def lift(list_seq):
    list_new = []
    for index, numb in enumerate(list_seq, start=1):
        l_n = index + numb
        list_new.append(l_n)
    return list_new

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( return_statement ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Estela Dos Santos/complementaire-reeksen.py"",""fullName"":""Estela Dos Santos"",""id"":""12360"",""status"":""runtime error"",""submissionID"":""6424127"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T20:56:07.000Z"",""labels"":""chem""}"
846,/home/maxiem/Downloads/files/Sander De Ruyter/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(rij):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    ref = 0
    for number in rij:
        if int(number) < ref:
            return False
        ref = int(number)
    return True


def frequentiereeks(rij):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(rij):
        raise AssertionError(""gegeven reeks is niet stijgend"")
    freq_list = []
    tel = 0
    for grens in range(1, rij[-1] + 2):
        for int, num in enumerate(rij):
            if num < grens:
                tel += 1
        grens += 1
        freq_list.append(tel)
        tel = 0

    return freq_list

def verhogen(rij):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogdelist = []
    for i in range(0, len(rij)):
        verhoogdelist.append(int(rij[i]) + i + 1)

    return verhoogdelist

def complementaire_reeksen(rij):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(rij):
        raise AssertionError(""gegeven reeks is niet stijgend"")
    rijverhoogd = []
    freqrij = frequentiereeks(rij)
    freqrijverhoogd = []
    for int, num in enumerate(rij):
        rijverhoogd.append(int + num + 1)

    for int, num in enumerate(freqrij):
        freqrijverhoogd.append(int + num + 1)


    return rijverhoogd, freqrijverhoogd

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Sander De Ruyter/complementaire-reeksen.py"",""fullName"":""Sander De Ruyter"",""id"":""12013"",""status"":""correct"",""submissionID"":""6386700"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T17:31:19.000Z"",""labels"":""stat""}"
847,/home/maxiem/Downloads/files/Nick Batens/complementaire-reeksen.py,"def stijgend(reeks):
    k = 0
    for n in range(len(reeks) - 1):
        if (reeks[n + 1] - reeks[n]) >= 0:
            k += 0
        else:
            k += 1
    if k == 0:
        return True
    else: 
        return False
def frequentiereeks(reeks):
    assert stijgend(reeks) == True, ""gegeven reeks is niet stijgend""
    frequentie = 0
    oplossing = []
    for getal in range(max(reeks)+ 1):
      for i in range(len(reeks)):
        if getal == reeks[i]:
          frequentie += 1
      oplossing.append(frequentie)
    return oplossing

def verhogen(reeks):
    n = 0
    nieuwe_reeks = []
    for n in range(len(reeks)):
        nieuw_getal = reeks[n] + (n + 1)
        nieuwe_reeks.append(nieuw_getal)
    return(nieuwe_reeks)
def complementaire_reeksen(reeks):
    assert stijgend(reeks) == True, ""gegeven reeks is niet stijgend""
    complementaire_reeks = []
    complementaire_reeks.append(verhogen(reeks))
    verhoogd_2 = verhogen(frequentiereeks(reeks))
    complementaire_reeks.append(verhoogd_2)
    return tuple(complementaire_reeks)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( number ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( else_clause ( ERROR ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Nick Batens/complementaire-reeksen.py"",""fullName"":""Nick Batens"",""id"":""7767"",""status"":""correct"",""submissionID"":""6380838"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T20:47:59.000Z"",""labels"":""chem""}"
848,/home/maxiem/Downloads/files/Kato De Coster/complementaire-reeksen.py,"def stijgend(lijst):
    vorig_getal = 0
    for element in lijst:
        if vorig_getal <= element:
            vorig_getal = element
        else:
            return False
    return True


def frequentiereeks(lijst):
    stijgen = stijgend(lijst)


    aantal= int(lijst[-1])+1
    nieuwelijst = []
    for i in range(aantal):
        totaal = 0
        for element in lijst:
            if int(element)<(i+1):
                totaal +=1
        nieuwelijst.extend([totaal])
    if stijgen is False:
        assert False, ""gegeven reeks is niet stijgend""

    else:
        return nieuwelijst

def verhogen(lijst):
    lengte = len(lijst)
    nieuwelijst = []
    for i in range(lengte):
        nieuw = lijst[i]+i+1
        nieuwelijst.extend([nieuw])
    return nieuwelijst


def complementaire_reeksen(lijst):
    stijgen = stijgend(lijst)
    verhoogd=verhogen(lijst)

    if stijgen is False:
        assert False, ""gegeven reeks is niet stijgend""
    laatst = verhoogd[-1]+2
    nieuw = []
    for i in range(laatst):
        if i != 0:
            if i not in verhoogd:
                nieuw.extend([i])
    return verhoogd,nieuw

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( array ( identifier ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( array ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( array ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Kato De Coster/complementaire-reeksen.py"",""fullName"":""Kato De Coster"",""id"":""12602"",""status"":""correct"",""submissionID"":""6340927"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T18:09:20.000Z"",""labels"":""chem""}"
849,/home/maxiem/Downloads/files/Elena Bandini/complementaire-reeksen.py,"def increasing(sequence):

    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    increase = 0
    for i in range(len(sequence) - 1):
        if sequence[i + 1] >= sequence[i]:
            increase += 1
    if increase == (len(sequence) - 1):
        return True
    else:
        return False


def frequency_sequence(sequence):

    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    if not increasing(sequence):
        raise AssertionError('given sequence is not increasing')

    frequency = []
    m = sequence[-1]
    for i in range(1, (m + 2)):
        s = sum(x < i for x in sequence)
        frequency.append(s)

    return frequency


def lift(sequence):

    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    increase = []
    for i in range(len(sequence)):
        element = i + 1 + sequence[i]
        increase.append(element)

    return increase

def complementary_sequences(sequence):

    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    if not increasing(sequence):
        raise AssertionError('given sequence is not increasing')
    part_1 = lift(sequence)
    frequency = frequency_sequence(sequence)
    part_2 = lift(frequency)

    return part_1, part_2


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Elena Bandini/complementaire-reeksen.py"",""fullName"":""Elena Bandini"",""id"":""12622"",""status"":""correct"",""submissionID"":""6351669"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T10:26:50.000Z"",""labels"":""doct""}"
850,/home/maxiem/Downloads/files/Pieter Laureys/complementaire-reeksen.py,"def stijgend(reeks):
    i = 0
    klaar = True
    while klaar:
        if reeks[i] > reeks[i + 1]:
            klaar = False
            return False
        elif i == len(reeks) - 2:
            klaar = False
            return True
        else:
            i += 1

def frequentiereeks(lijst):
    if not stijgend(lijst) == True:
        assert False, 'gegeven reeks is niet stijgend'
    f = []
    for i in range(1, int(lijst[-1] + 2)):
        x = 0
        for a in lijst:
            if a < i:
                x += 1
        f.append(x)
    return f

def verhogen(lijst):
    lijst = list(lijst)
    for i in range(len(lijst)):
        lijst[i] += i + 1
    return lijst

def complementaire_reeksen(lijst):
    if not stijgend(lijst) == True:
        assert False, 'gegeven reeks is niet stijgend'
    x = verhogen(lijst)
    y = verhogen(frequentiereeks(lijst))
    return (x, y)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Pieter Laureys/complementaire-reeksen.py"",""fullName"":""Pieter Laureys"",""id"":""12151"",""status"":""correct"",""submissionID"":""6339754"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T15:50:17.000Z"",""labels"":""bcbt""}"
851,/home/maxiem/Downloads/files/Jolien Ferbuyt/complementaire-reeksen.py,"def stijgend(reeks):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    #controleren of de reeks stijgend is --> eerste getal kleiner dan volgende getal
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) -1))


def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    #als reeks niet stijgend --> gegeven reeks is niet stijgend
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    #als reeks stijgend dan:
    frequentie, waarde, aantal = [], 0, 0
    for getal in reeks:
        #aantal geeft weer hoeveel getallen in reeks kleiner of gelijk aan huidig getal in reeks
        while waarde < getal:
            frequentie.append(aantal)
            waarde += 1

        aantal += 1
    #aangeven hoeveel getallen in reeks kleiner of gelijk aan laatste getal (alle getallen dus)
    frequentie.append(aantal)

    return frequentie

def verhogen(reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    #nieuwe lijst elk getal uit reeks verhogen met positie
    return [element + positie + 1 for positie, element in enumerate(reeks)]

def complementaire_reeksen(reeks):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( update_expression ( identifier ) ( ERROR ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jolien Ferbuyt/complementaire-reeksen.py"",""fullName"":""Jolien Ferbuyt"",""id"":""11800"",""status"":""correct"",""submissionID"":""6384250"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T13:14:59.000Z"",""labels"":""bcbt""}"
852,/home/maxiem/Downloads/files/Jakob Robbe Vermeulen/complementaire-reeksen.py,"def stijgend(lijst):
    vorige = lijst[0]
    for nummer in lijst:
        if nummer < vorige:
            return False
        vorige = nummer
    return True


def frequentiereeks(lijst):
    z = 0
    aantal = []

    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    for i in range(1, lijst[-1] + 2):
        for nummer in lijst:
            if nummer < i:
                z += 1
        aantal.append(z)
        z = 0
    return aantal


def verhogen(lijst):
    lijst2 = []
    for [i, j] in enumerate(lijst):
        lijst2.append(j + i + 1)
    return lijst2


def complementaire_reeksen(lijst):

    return verhogen(lijst), verhogen(frequentiereeks(lijst))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( array ( identifier ) ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Jakob Robbe Vermeulen/complementaire-reeksen.py"",""fullName"":""Jakob Robbe Vermeulen"",""id"":""12655"",""status"":""correct"",""submissionID"":""6357543"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T07:53:09.000Z"",""labels"":""fyss""}"
853,/home/maxiem/Downloads/files/Eray Dalkilic/complementaire-reeksen.py,"def stijgend(reeksen):

    return all(reeksen[i] <= reeksen[i + 1] for i in range(len(reeksen) - 1))

def frequentiereeks(reeksen):
    assert stijgend(reeksen), 'gegeven reeks is niet stijgend'
    frequentie, waarde, aantal = [], 0, 0
    for getal in reeksen:
        while waarde < getal:
            frequentie.append(aantal)
            waarde += 1
        aantal += 1

    frequentie.append(aantal)
    return frequentie
    
    
def verhogen(reeksen):
    return [element + positie + 1 for positie, element in enumerate(reeksen)]
    
def complementaire_reeksen(reeksen):
    assert stijgend(reeksen), 'gegeven reeks is niet stijgend'
    return verhogen(reeksen), verhogen(frequentiereeks(reeksen))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Eray Dalkilic/complementaire-reeksen.py"",""fullName"":""Eray Dalkilic"",""id"":""12721"",""status"":""correct"",""submissionID"":""6420070"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T16:18:55.000Z"",""labels"":""chem""}"
854,/home/maxiem/Downloads/files/Sjoerd Govaert/complementaire-reeksen.py,"
def stijgend(reeks):
    stijgend = True
    vorige = 0
    for e in reeks:
        if e < vorige:
            stijgend = False
            break
        else:
            vorige = e
    return stijgend

try:
    def frequentiereeks(reeks):
        assert stijgend(reeks), 'gegeven reeks is niet stijgend'
        reeks = list(reeks)
        reeks.append(max(reeks) + 1)
        lijst = []
        hoogste = max(reeks)
        for e in range(1, hoogste + 1):
            teller = 0
            for el in reeks:
                if el < e:
                    teller += 1
            lijst.append(teller)
        return lijst
except AssertionError as e:
    print(e)

def verhogen(reeks):
    lijst = []
    teller = 1
    for e in reeks:
        e += teller
        lijst.append(e)
        teller += 1
    return lijst

def complementaire_reeksen(reeks):
    x = verhogen(reeks)
    y = verhogen(frequentiereeks(reeks))
    return x, y
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( break_statement ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Sjoerd Govaert/complementaire-reeksen.py"",""fullName"":""Sjoerd Govaert"",""id"":""12722"",""status"":""correct"",""submissionID"":""6373655"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T12:28:41.000Z"",""labels"":""keuz""}"
855,/home/maxiem/Downloads/files/Matisse de Vreugd/complementaire-reeksen.py,"def stijgend(getallen):
    """"""
    Gaat na of een gegeven lijst of tuple van getallen in stijgende
    volgorde staat of niet.

    >>> stijgend([2, 3, 5, 7, 11, 13])
    True

    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False

    >>> stijgend((2, 3, 5, 7, 11, 13, 12))
    False

    """"""
    for i in range(len(getallen) - 1):
        if getallen[i] > getallen[i + 1]:
            return False

    return True


def frequentiereeks(getallen):
    """"""
    Geeft van een gegeven lijst van een getallen een frequentiereeks terug.
    Indien de getallen niet in stijgende volgorde staan, wordt een AssertionError
    teruggegeven.

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]

    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]

    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend

    """"""
    assert stijgend(getallen), 'gegeven reeks is niet stijgend'
    controlegetal = 1
    som = 0
    reeks = []
    getallen = list(getallen)
    getallen.append(getallen[-1] + 1)
    for i in getallen:
        while i >= controlegetal:
            reeks.append(som)
            controlegetal += 1

        som += 1

    return reeks

def verhogen(getallen):
    """"""
    Geeft van een gegeven lijst of tuple een nieuwe lijst waarbij elk getal van
    de oorspronkelijke lijst wordt vermeerderd met zijn positie.

    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]

    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]

    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]

    """"""

    getallen = list(getallen)
    for i in range(len(getallen)):
        getallen[i] += i + 1

    return getallen


def complementaire_reeksen(getallen):
    """"""
    Geeft van een gegeven lijst of tuple van getallen een tuple terug die twee
    lijsten bevat. Lijst 1 is de verhoogde reeks van die getallen, lijst 2 is de
    verhoogde frequentiereeks. Een niet-stijgende reeks geeft een AssertionError
    terug.

    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend

    """"""
    return verhogen(getallen), verhogen(frequentiereeks(getallen))


if __name__ == '__main__':
    import doctest

    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( ERROR ( identifier ) ) ( property_identifier ) ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( member_expression ( identifier ) ( property_identifier ) ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( number ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( member_expression ( identifier ) ( property_identifier ) ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Matisse de Vreugd/complementaire-reeksen.py"",""fullName"":""Matisse de Vreugd"",""id"":""12714"",""status"":""correct"",""submissionID"":""6366166"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T15:10:23.000Z"",""labels"":""chem""}"
856,/home/maxiem/Downloads/files/Bazil Van de Walle/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(p):
    p = list(p)
    import itertools
    import operator
    res = all(itertools.starmap(operator.le,zip(p, p[1:])))
    return res

def geef_kleiner(lijst,getal):
    nummer = 0
    for x in lijst:
        if x <= getal:
            nummer += 1
        if x > getal:
            return nummer
    return nummer

def frequentiereeks(p):
 if stijgend(p) == False:
     raise AssertionError('gegeven reeks is niet stijgend')
 laatste_getal = p[-1]
 laatste_getal += 1
 lijst = []
 for x in range(laatste_getal):
     lijst.append(geef_kleiner(p,x))
 return lijst



def verhogen(p):
    p = list(p)
    v = []
    for inx, elements in enumerate(p, start = 1):
        v.append(inx + elements)

    return (v)

def complementaire_reeksen(p):
  a = verhogen(p)
  b = frequentiereeks(p)
  c = verhogen(b)
  return (a,c)",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( import ) ( ERROR ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Bazil Van de Walle/complementaire-reeksen.py"",""fullName"":""Bazil Van de Walle"",""id"":""12741"",""status"":""correct"",""submissionID"":""6418774"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T15:14:41.000Z"",""labels"":""chem""}"
857,/home/maxiem/Downloads/files/Matthias Van Belle/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    controleert of een lijst in stijgende lijn gaat
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    LIJST = list(lijst)
    return bool(sorted(LIJST) == LIJST)

def frequentiereeks(getallen):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    teller = 1
    aantal = 0
    nieuw = []
    assert stijgend(getallen), 'gegeven reeks is niet stijgend'
    for _ in range(getallen[-1] + 1):
        for i in getallen:
            if i < teller:
                aantal += 1
        teller += 1
        nieuw.append(aantal)
        aantal = 0
    return nieuw


def verhogen(getallen):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    nieuw = []
    positie = 1
    for element in getallen:
        verhoogd = element + positie
        nieuw.append(verhoogd)
        positie += 1
    return nieuw

def complementaire_reeksen(getallen):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(getallen), 'gegeven reeks is niet stijgend'
    verhoogd = verhogen(getallen)
    frq = verhogen(frequentiereeks(getallen))
    return verhoogd, frq",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Matthias Van Belle/complementaire-reeksen.py"",""fullName"":""Matthias Van Belle"",""id"":""12753"",""status"":""correct"",""submissionID"":""6383544"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T11:50:55.000Z"",""labels"":""keuz""}"
858,/home/maxiem/Downloads/files/Gery Pollet/complementaire-reeksen.py,"def increasing(nummers):
    for i in range(len(nummers)-1):
        if nummers[i] > nummers[i+1]:
            return False 
    return True 
        
def frequency_sequence(nummers):
    assert increasing(nummers) != False, ""given sequence is not increasing""
    x = []
    count = 1
    for i in range(nummers[-1]+1):
        
        kleiner = 0 
        for a in range(len(nummers)):
            if nummers[a] < count:
                kleiner += 1
        x.append(kleiner)
        count += 1 
    return x

def lift(nummers):
    x = []
    for i in range(1,len(nummers)+1):
        x.append(nummers[i-1]+i)
    return x 
        
def complementary_sequences(nummers):
    assert increasing(nummers) != False, ""given sequence is not increasing""
    x= lift(nummers)
    y = []
    for i in range(1, x[-1]+2):
        if i not in x:
            y.append(i)
    return(x, y)
        
        
        
        ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Gery Pollet/complementaire-reeksen.py"",""fullName"":""Gery Pollet"",""id"":""5394"",""status"":""correct"",""submissionID"":""6373440"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T12:09:09.000Z"",""labels"":""bcbt""}"
859,/home/maxiem/Downloads/files/Ewaut Pauwels/complementaire-reeksen.py,"def stijgend(reeks):

    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    cijfer = 0
    leeg = ''

    for karakter in reeks:
        if karakter >= cijfer:
            cijfer = karakter
        else:
            leeg += str(karakter)

    return bool(leeg == '')

def frequentiereeks(reeks):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    #geeft error terug als de reeks niet sijgt
    assert bool(stijgend(reeks)), 'gegeven reeks is niet stijgend'

    frequentie = []
    aantal = 0

    for i in range(1, reeks[-1] + 2, 1):
        for karakter in reeks:
            if int(karakter) < i:
                aantal += 1
        frequentie.append(aantal)
        aantal = 0

    return frequentie

def verhogen(reeks):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    nieuw = []

    for pos, kar in enumerate(reeks):
        nieuw.append(kar + pos + 1)
    return nieuw

def complementaire_reeksen(reeks):

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    nieuw = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    frequentie_verhoogd = verhogen(frequentie)
    
    return nieuw, frequentie_verhoogd

if __name__ == '__main__':
    import doctest

    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ( number ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Ewaut Pauwels/complementaire-reeksen.py"",""fullName"":""Ewaut Pauwels"",""id"":""8343"",""status"":""correct"",""submissionID"":""6310908"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-06T13:42:28.000Z"",""labels"":""bcbt""}"
860,/home/maxiem/Downloads/files/Tibo Van Eeckhoorn/complementaire-reeksen.py,"def stijgend(reeks):
    reekstest = list(reeks[:])
    reeks = list(reeks[:])
    reekstest.sort()
    if reeks == reekstest:
        return True
    else:
        return False

def frequentiereeks(reeks):
    assert (stijgend(reeks) == True),'gegeven reeks is niet stijgend'
    reeks = list(reeks)
    maximum = max(reeks) + 1
    reeksreeks = list([reeks] * maximum)
    check = 1
    frequentiereeks = []
    k = 0
    for element in reeksreeks:
        for e in reeks:
            if e < check:
                k += 1
        frequentiereeks.append(k)
        k = 0
        check += 1
    return frequentiereeks

def verhogen(reeks):
    bijtellen = 1
    index = 0
    nieuwereeks = []
    for getal in reeks:
        getal = reeks[index] + bijtellen
        nieuwereeks.append(getal)
        index += 1
        bijtellen += 1
    return nieuwereeks

def complementaire_reeksen(reeks):
    assert (stijgend(reeks) == True), 'gegeven reeks is niet stijgend'
    verhoogd = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    verhoogdfrequentie = verhogen(frequentie)

    return (verhoogd, verhoogdfrequentie)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( array ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Tibo Van Eeckhoorn/complementaire-reeksen.py"",""fullName"":""Tibo Van Eeckhoorn"",""id"":""8108"",""status"":""correct"",""submissionID"":""6371860"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:12:42.000Z"",""labels"":""chem""}"
861,/home/maxiem/Downloads/files/Maxime Calemyn/complementaire-reeksen.py,"def stijgend(getallen):
    x = list(getallen)
    l = sorted(getallen)
    return bool(x == l)
    
def verhogen(getallen):
    x = list(getallen)
    y = []
    for i in range(len(x)):
        z = int(x[i]) + int(i) + 1
        y.append(z)
    return y
    
def frequentiereeks(getallen):
    x = list(getallen)
    l = []
    waarde = 1
    if stijgend(getallen) == True:
        for _ in range(0, int(x[-1]) + 1):
            count = 0
            for i in x:
                if i < waarde:
                    count += 1
            l.append(count)
            waarde += 1
    else:
        assert False, ""gegeven reeks is niet stijgend""
    return l
    
def complementaire_reeksen(getallen):
    x = tuple(getallen)
    y = ()
    eerste = verhogen(x)
    tweede = frequentiereeks(x)
    tweede = verhogen(tweede)
    y = eerste, tweede
    return y",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( formal_parameters ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Maxime Calemyn/complementaire-reeksen.py"",""fullName"":""Maxime Calemyn"",""id"":""2735"",""status"":""correct"",""submissionID"":""6412196"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T10:14:45.000Z"",""labels"":""chem""}"
862,/home/maxiem/Downloads/files/Rune Burggraeve/complementaire-reeksen.py,"def stijgend(reeks):
    n = len(reeks)
    for i in reeks:
        referentie = reeks.index(i)
        getal1 = reeks[referentie]
        if referentie == n - 1:
            return True
        getal2 = reeks[referentie + 1]
        if getal1 > getal2:
            return False
    return True

def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    hoogste = max(reeks)
    frequenties = []
    for i in range(0, hoogste + 1):
        aantal = 0
        for a in reeks:
            if a <= i:
                aantal += 1
        frequenties.append(aantal)
    return frequenties

def verhogen(reeks):
    verhoogde_reeks = []
    for index, getal in enumerate(reeks):
        verhoogde_reeks.append(index + getal + 1)
    return verhoogde_reeks

def complementaire_reeksen(reeks):
    verhoogde_reeks = verhogen(reeks)
    verhoogde_frequentiereeks = []
    for index, getal in enumerate(frequentiereeks(reeks)):
        verhoogde_frequentiereeks.append(index + getal + 1)
    return verhoogde_reeks, verhoogde_frequentiereeks",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Rune Burggraeve/complementaire-reeksen.py"",""fullName"":""Rune Burggraeve"",""id"":""7936"",""status"":""correct"",""submissionID"":""6353252"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T13:28:32.000Z"",""labels"":""geog""}"
863,/home/maxiem/Downloads/files/Elise Malfait/complementaire-reeksen.py,"# A function increasing that returns a Boolean value (bool) that indicates
# if the integers in the given sequence are increasing.
# Duplicates are allowed (in other words: you don't have to check if the sequence is strictly increasing).

def increasing(sequence):

    '''
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    if sorted(list(sequence)) == list(sequence):
        increasing = True
    else:
        increasing = False
    return increasing

# A function frequency_sequence that returns a new list containing the integers (int)
# in the frequency sequence of the given sequence.
# In case the given sequence is not increasing,
# the function must raise an AssertionError with the message given sequence is not increasing.

def frequency_sequence(sequence):

    '''
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    '''

    assert increasing(sequence), ""given sequence is not increasing""
    frequency_sequence = []
    max = 1
    count = 0
    while len(frequency_sequence) < sequence[-1] + 1:       # eigenlijk met for loop moeten werken
        for number in sequence:
            if number < max:
                count += 1
        frequency_sequence.append(count)
        count = 0
        max += 1
    return frequency_sequence

# A function lift that returns a new list containing the integers (int) of the given sequence that have been increased
# according to their position in the sequence —
# that is, 1 added to the first integer in the given sequence, 2 to the second integer, and so on.

def lift(sequence):

    '''
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    increased_sequence = []
    increase = 1
    for number in sequence:
        increased_sequence.append(number + increase)
        increase += 1
    return increased_sequence

# A function complementary_sequences that returns a tuple.
# The first element of the tuple is a new list containing the integers (int) of the given sequence
# that have been increased according to their position in the sequence.
# The second element of the tuple is a new list containing the integers (int) in the frequency sequence
# of the given sequence that have been increased according to their position in the sequence.
# In case the given sequence is not increasing,
# the function must raise an AssertionError with the message given sequence is not increasing.

def complementary_sequences(sequence):

    '''
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    '''

    assert increasing(sequence), ""given sequence is not increasing""
    return (lift(sequence), lift(frequency_sequence(sequence)))",( program ( ERROR ( ERROR ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( formal_parameters ( identifier ) ) ( identifier ) ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( ERROR ( ERROR ) ) ( property_identifier ) ) ( identifier ) ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( string ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( identifier ) ( string ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( new_expression ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( ERROR ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( ERROR ( ERROR ) ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( formal_parameters ( identifier ) ) ( string ) ) ( call_expression ( string ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( string ) ( assignment_expression ( identifier ) ( ERROR ( array_pattern ) ( assignment_expression ( identifier ) ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( ERROR ( number ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( identifier ) ( ERROR ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( new_expression ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ( ERROR ( call_expression ( member_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( property_identifier ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( string ) ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ) ),"{""filename"":""Elise Malfait/complementaire-reeksen.py"",""fullName"":""Elise Malfait"",""id"":""8342"",""status"":""correct"",""submissionID"":""6393993"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T16:13:38.000Z"",""labels"":""bcbt""}"
864,/home/maxiem/Downloads/files/Lin Tang/complementaire-reeksen.py,"def increasing(seq):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    seq = list(seq)
    org = seq.copy()
    seq.sort()
    return org == seq

def frequency_sequence(seq):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    n, feq = 0, []
    assert increasing(seq), 'given sequence is not increasing'
    for i in range(seq[-1]+1):
        n += seq.count(i)
        feq.append(n)
    return feq

def lift(seq):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return list(map(lambda x, y: x + y, seq, list(range(1, len(seq)+1))))

def complementary_sequences(seq):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(seq), 'given sequence is not increasing'
    return (lift(seq), lift(frequency_sequence(seq)))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( return_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Lin Tang/complementaire-reeksen.py"",""fullName"":""Lin Tang"",""id"":""7972"",""status"":""correct"",""submissionID"":""6336189"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T21:36:29.000Z"",""labels"":""stat""}"
865,/home/maxiem/Downloads/files/Jeroen Goosens/complementaire-reeksen.py,"def stijgend(r):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    i = 1
    while i < len(r) and r[i] >= r[i-1]:
        i += 1
    return i == len(r)


def frequentiereeks(r):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(r), 'gegeven reeks is niet stijgend'
    freq = [0 for _ in range(r[-1]+1)]
    j = 0
    for i, _ in enumerate(freq):
        while j < len(r) and r[j] <= i:
            j += 1
        freq[i] = j
    return freq


def verhogen(r):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return [el+i+1 for i, el in enumerate(r)]


def complementaireReeksen(r):
    """"""
    >>> complementaireReeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaireReeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaireReeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(r), verhogen(frequentiereeks(r))


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( ERROR ( number ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jeroen Goosens/complementaire-reeksen.py"",""fullName"":""Jeroen Goosens"",""id"":""1107"",""status"":""correct"",""submissionID"":""6186197"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-30T10:32:18.000Z"",""labels"":""admin""}"
866,/home/maxiem/Downloads/files/Daan Devos/complementaire-reeksen.py,"def stijgend(serie):
    '''
>>> stijgend([2, 3, 5, 7, 11, 13])
True
>>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
True
>>> stijgend([5, 3, 2, 7, 8, 1, 9])
False
    '''
    #serie=list(serie)
    lengte=len(serie)
    for t in range(lengte-1):
        if serie[t]>serie[t+1]:
            return False
    return True
def frequentiereeks(serie):
    '''
>>> frequentiereeks([2, 3, 5, 7, 11, 13])
[0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
>>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[2, 3, 5, 7, 11, 13, 14]
>>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend
    '''
    assert stijgend(serie)== True,""gegeven reeks is niet stijgend""
    reeks=[]
    loop = 0
    freq = 0
    for getal in range(serie[-1]+1):
        while getal in serie[loop:]:
            freq+=1
            loop+=1
        reeks.append(freq)

    return reeks
def verhogen(serie):
    '''
>>> verhogen([2, 3, 5, 7, 11, 13])
[3, 5, 8, 11, 16, 19]
>>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
>>> verhogen([5, 3, 2, 7, 8, 1, 9])
[6, 5, 5, 11, 13, 7, 16]
    '''
    loop=1
    reeks= []
    for getal in serie:
        reeks.append(getal+loop)
        loop+=1
    return reeks
def complementaire_reeksen(serie):
    assert stijgend(serie)== True,""gegeven reeks is niet stijgend""
    reeks1=verhogen(serie)
    fr=frequentiereeks(serie)
    reeks2=verhogen(fr)
    tuple=(reeks1,reeks2,)
    return tuple
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Daan Devos/complementaire-reeksen.py"",""fullName"":""Daan Devos"",""id"":""12895"",""status"":""correct"",""submissionID"":""6353480"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T13:49:52.000Z"",""labels"":""geol""}"
867,/home/maxiem/Downloads/files/Jules Vandendriessche/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(lijst):
    b = True
    for e in range(len(lijst) - 1):
        if lijst[e] > lijst[e + 1]:
            return False
    return True

def frequentiereeks(reeks):
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    x = []
    reekss = [0] + list(reeks) + [reeks[-1]+1]
    ugh = 0
    for e in range(len(reekss)-1):
        y = reekss[e+1]-reekss[e]
        for i in range(y):
            x += [ugh]
        ugh += 1
    return x


def verhogen(reeks):
    x = []
    for e in range(len(reeks)):
        x += [e + 1 + reeks[e]]
    return x



def complementaire_reeksen(reeks):
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( array ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( array ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Jules Vandendriessche/complementaire-reeksen.py"",""fullName"":""Jules Vandendriessche"",""id"":""12899"",""status"":""correct"",""submissionID"":""6385725"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T15:54:08.000Z"",""labels"":""fyss""}"
868,/home/maxiem/Downloads/files/Pieter Van Rompaey/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(lijst):
    lijst = list(lijst)
    list_sorted = sorted(lijst)
    if list_sorted == lijst:
        value = True
    else:
        value = False
    return value

def frequentiereeks(lijst):
    assert stijgend(lijst) == True,""gegeven reeks is niet stijgend""
    antwoord = []
    plaats = 0
    aantal = 0
    for _ in lijst:
        while plaats < _:
            antwoord.append(aantal)
            plaats += 1
        aantal += 1
    antwoord.append(aantal)
    return antwoord

def verhogen(lijst):
    lijst = list(lijst)
    plaats = 1
    nieuwe_lijst = []
    for _ in lijst:
        nieuwe_lijst += [_+plaats]
        plaats += 1

    return nieuwe_lijst

def complementaire_reeksen(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    lijst2 = frequentiereeks(lijst)
    lijst2 = list(lijst2)
    plaats = 1
    nieuwe_lijst = []
    for _ in lijst2:
        nieuwe_lijst += [_ + plaats]
        plaats += 1
    return (verhogen(lijst), nieuwe_lijst)





",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( array ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( array ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ),"{""filename"":""Pieter Van Rompaey/complementaire-reeksen.py"",""fullName"":""Pieter Van Rompaey"",""id"":""11815"",""status"":""correct"",""submissionID"":""6376650"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:09:45.000Z"",""labels"":""geol""}"
869,/home/maxiem/Downloads/files/Yari De Backer/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(lijst):
   """"""
   >>> stijgend([2, 3, 5, 7, 11, 13])
   True
   >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
   True
   >>> stijgend([5, 3, 2, 7, 8, 1, 9])
   False
   """"""
   lengte = len(lijst)
   for i in range(1, lengte):
       if lijst[i] >= lijst[i-1]:
           juist = True
       else:
           return False

   return juist




def frequentiereeks(lijst):
    """"""
    >> > frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >> > frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >> > frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    """"""

    lengte = len(lijst)
    n_lengte = lijst[lengte-1]
    aantal = 0
    leeg = []
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'
    for i in range(1, n_lengte+2):
        for k in lijst:
            if k < i:
                aantal += 1
            else:
                aantal += 0
        leeg.append(aantal)
        aantal = 0
    return leeg

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = list(lijst)
    lengte = len(lijst)
    for i in range(0,lengte):
        lijst[i] = lijst[i] +i +1
    return lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    """"""
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'
    if stijgend(lijst) == True:
        verhoogde1 = verhogen(lijst)
        fr = frequentiereeks(lijst)
        verhoogde2 = verhogen(fr)
        lijst = (verhoogde1, verhoogde2)
    return lijst

if __name__ == '__main__':
    import doctest

    doctest.testmod()",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Yari De Backer/complementaire-reeksen.py"",""fullName"":""Yari De Backer"",""id"":""12916"",""status"":""correct"",""submissionID"":""6390808"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T11:46:16.000Z"",""labels"":""fyss""}"
870,/home/maxiem/Downloads/files/Justine Dejaegher/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    Deze functie gaat na of de element in de lijst gesorteerd zijn van klein naar groot. Hierbij mogen er dubbele elementen in voorkomen.
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    lijst = list(reeks)
    return lijst == sorted(lijst)

def frequentiereeks(reeks):
    """"""
    Een functie frequentiereeks die een nieuwe lijst (list) teruggeeft met de getallen (int) van de frequentiereeks van
    de gegeven reeks. Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen met de
    boodschap gegeven reeks is niet stijgend.
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    nieuwelijst = []
    lijst = list(reeks)
    for i, k in enumerate(lijst):
        ran = k - lijst[i -1] if k >= lijst[i - 1] else k
        for l in range(ran):
            nieuwelijst.append(i)
    teller = 0
    for i in lijst:
        if i <= lijst[-1]:
            teller += 1
    nieuwelijst.append(teller)
    return nieuwelijst

def verhogen(reeks):
    """"""
    Een functie verhogen die een nieuwe lijst (list) teruggeeft die de getallen (int) van de gegeven reeks bevat,
    maar telkens verhoogd overeenkomstig hun positie in de gegeven reeks — dat is 1 opgeteld bij het eerste getal van
    de gegeven reeks, 2 bij het tweede getal, enzoverder.
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    lijst = list(reeks)
    teller = 1
    lijst2 = []
    plaats = 0
    while teller <= len(lijst):
        nieuw_cijfer = int(lijst[plaats]) + teller
        lijst2.append(nieuw_cijfer)
        plaats += 1
        teller += 1
    return lijst2

def complementaire_reeksen(reeks):
    """"""
    Geeft een tuple weer. Het eerste element van de tuple is een nieuwe lijst met de getallen van de gegeven reeks die
    verhoogd werden met hun overeenkomstige positie in de reeks. Het tweede element van het tuple is een nieuwe lijst
    met de frequentiereeks van de gegeven reeks, waarvan de getallen verhoogd werden met hun
    overeenkomstige positie in de reeks. Indien de gegeven reeks niet stijgend is, dan moet de functi eeen AssertionError
    opwerpen met de boodschap gegeven reeks is niet stijgend.
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    lijst = list(reeks)
    nieuwelijst1 = []
    nieuwelijst2 = []
    nieuwelijst1 = verhogen(lijst)
    nieuwelijst2 = frequentiereeks(lijst)
    nieuwelijst2 = verhogen(nieuwelijst2)
    return (nieuwelijst1, nieuwelijst2)

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( member_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( property_identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Justine Dejaegher/complementaire-reeksen.py"",""fullName"":""Justine Dejaegher"",""id"":""12917"",""status"":""correct"",""submissionID"":""6395765"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T19:23:06.000Z"",""labels"":""fyss""}"
871,/home/maxiem/Downloads/files/Mauro Van de Veire/complementaire-reeksen.py,"def stijgend(lijst):
    h = 0
    for i in range(len(lijst) - 1):
        if lijst[i] <= lijst[i + 1]:
            h += 1
    if h == len(lijst) - 1:
        return True
    else:
        return False



def frequentiereeks(lijst):
    if stijgend(lijst) is True:
        lijst_2 = (lijst[-1] + 1) * [0]
        x = 0
        if len(lijst_2) < lijst[-1]:
            for i in range(len(lijst_2)):
                if i < lijst[x]:
                    lijst_2[i] += x
                else:
                    x += 1 
                    lijst_2[i] += x
        else:
            for i in range(lijst[-1] + 1):
                x = lijst.count(i)
                lijst_2[i] = lijst_2[i - 1] + x
            
        return lijst_2
        
    else:
        raise AssertionError('gegeven reeks is niet stijgend')

def verhogen(lijst):
    lijst_2 = list(lijst)
    for i in range(len(lijst)):
        lijst_2[i] += i + 1
        
    return lijst_2

def complementaire_reeksen(lijst):
    if stijgend(lijst) is True:
        lijst_a = verhogen(lijst)
        lijst_b = verhogen(frequentiereeks(lijst))
        
        return lijst_a, lijst_b
    
    else:
        raise AssertionError('gegeven reeks is niet stijgend')
        
        
        

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ( array ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ),"{""filename"":""Mauro Van de Veire/complementaire-reeksen.py"",""fullName"":""Mauro Van de Veire"",""id"":""12919"",""status"":""correct"",""submissionID"":""6414674"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T13:07:49.000Z"",""labels"":""chem""}"
872,/home/maxiem/Downloads/files/Xiebe Stiers/complementaire-reeksen.py,"def stijgend(reeks):
    s = True
    for i in range(len(reeks) - 1):
        if reeks[i] > reeks[i + 1]:
            s = False
    return s
def frequentiereeks(reeks):
    lijst = []
    c = 0
    if stijgend(reeks) == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        v = 0
        while c < len(reeks):
            for i in range(reeks[c] - v):
                lijst.append(c)
            v = reeks[c]
            c += 1
        lijst.append(c)
        return lijst
def verhogen(reeks):
    i = 1
    lijst = []
    for aantal in range(len(reeks)):
        lijst.append(reeks[i - 1] + i)
        i += 1
    return lijst
def complementaire_reeksen(reeks):
    if stijgend(reeks) != True:
        raise AssertionError('gegeven reeks is niet stijgend')
    cr = ()
    verhoogd = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    frequentie = verhogen(frequentie)
    cr += verhoogd, frequentie
    return cr",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( formal_parameters ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( augmented_assignment_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Xiebe Stiers/complementaire-reeksen.py"",""fullName"":""Xiebe Stiers"",""id"":""12923"",""status"":""correct"",""submissionID"":""6383237"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T11:15:19.000Z"",""labels"":""chem""}"
873,/home/maxiem/Downloads/files/Yoran Vanwalleghem/complementaire-reeksen.py,"def stijgend(reeks):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    #tuple omzetten naar list
    if isinstance(reeks, tuple):
        reeks = list(reeks)
    #elementen ordenen van klein naar groot, daarna vergelijken
    reeks_orde = sorted(reeks)
    if reeks == reeks_orde:
        return True
    else:
        return False
#OK


def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    #controleren of reeks stijgend is
    assert stijgend(reeks) != False, 'gegeven reeks is niet stijgend'

    #lege lijst definiëren
    lijst = []
    # tuple omzetten naar list
    if isinstance(reeks, tuple):
        reeks = list(reeks)
    for i in range(int(reeks[-1])+1):
        #lege int waarde definiëren
        x = 0
        for e in range(len(reeks)):
            if int(reeks[e]) <= i:
                x += 1
        lijst += [x]
    return lijst
#OK

def verhogen(reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    # tuple omzetten naar list
    if isinstance(reeks, tuple):
        reeks = list(reeks)
    #lege lijst
    lijst = []
    #vervangen van het element met element + reeks[element] + 1
    for i in range(len(reeks)):
        lijst.append(reeks[i] + 1 + i)
    return lijst
#OK
def complementaire_reeksen(reeks):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Yoran Vanwalleghem/complementaire-reeksen.py"",""fullName"":""Yoran Vanwalleghem"",""id"":""12926"",""status"":""correct"",""submissionID"":""6378021"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:28:02.000Z"",""labels"":""fyss""}"
874,/home/maxiem/Downloads/files/Simon Van Caenegem/complementaire-reeksen.py,"def stijgend(x):
    goedgekeurd = True
    for n in range(len(x)-1):
        if x[n] > x[n+1]:
            goedgekeurd = False

    return goedgekeurd

def frequentiereeks(x):
    assert stijgend(x) == True, ""gegeven reeks is niet stijgend""
    resultaat = []
    index = 0
    while len(resultaat) < max(x)+1:
        som = 0
        for i in x:
            if index >= i:
                som += 1
        resultaat.append(som)
        index += 1
    
    return resultaat

def verhogen(x):
    resultaat = []
    index = 1
    for i, cijfer in enumerate(x):
        resultaat.append(cijfer+(i+1))
    
    return resultaat

def complementaire_reeksen(x):
    assert stijgend(x) == True, ""gegeven reeks is niet stijgend""
    return (verhogen(x), verhogen(frequentiereeks(x)))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Simon Van Caenegem/complementaire-reeksen.py"",""fullName"":""Simon Van Caenegem"",""id"":""8375"",""status"":""correct"",""submissionID"":""6223140"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-01T18:45:58.000Z"",""labels"":""chem""}"
875,/home/maxiem/Downloads/files/Maxime Byttebier/complementaire-reeksen.py,"# Functie die een boolean waarde teruggeeft of de rij al dan of niet stijgend is (dubbele mogen voorkomen)
def stijgend(list):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    controle = list[0]
    for getal in range(len(list)):
        if list[getal] >= controle and getal != len(list) - 1:
            controle = list[getal]
        elif list[getal] >= controle and getal == len(list) - 1:
            return True
        else:
            return False

# Functie die een nieuwe lijst teruggeeft of een assertion error
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
def frequentiereeks(list):
    totaal = 0
    reeks = []
    assert stijgend(list) == True, 'gegeven reeks is niet stijgend'
    for getal in range(int(list[-1]) + 1):
        for i in list:
            if i < getal + 1:
                totaal += 1
        reeks.append(totaal)
        totaal = 0
    return reeks

#Functie die een nieuwe lijst teruggeeft maar telkens verhoogt overeenkomstig met hun positie in de frequentiereeks
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
def verhogen(list):
    nieuwelist = []
    for i in range(len(list)):
        getal = int(list[i])
        nieuwelist.append(getal + i + 1)
    return nieuwelist

#Functie die een tuple teruggeeft + assertion error
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
def complementaire_reeksen(list):
    reeks = []
    assert stijgend(list) == True, 'gegeven reeks is niet stijgend'
    reeks.append(verhogen(list))
    tweede_reeks = verhogen(frequentiereeks(list))
    reeks.append(tweede_reeks)
    reeks = tuple(reeks)
    return reeks

#doctest einde
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Maxime Byttebier/complementaire-reeksen.py"",""fullName"":""Maxime Byttebier"",""id"":""12932"",""status"":""correct"",""submissionID"":""6408960"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T21:24:22.000Z"",""labels"":""fyss""}"
876,/home/maxiem/Downloads/files/Kian Simoens/complementaire-reeksen.py,"def stijgend(reeks):
    for i in range(len(reeks) -1):
        if reeks[i] > reeks[i+1]:
            return False

    return True

def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    assert (stijgend(reeks) == True),""gegeven reeks is niet stijgend""
    aantal = 0
    nieuwe_reeks = []
    m = max(reeks)
    for i in range(m+1):
        for j in reeks:
            if i+1 > j:
                aantal += 1
        nieuwe_reeks.append(aantal)
        aantal = 0
    return nieuwe_reeks


if __name__ == '__main__':
    import doctest
    doctest.testmod()


def verhogen(reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    lijst = [reeks[i] + (i+1) for i in range(len(reeks))]
    return lijst


if __name__ == '__main__':
    import doctest
    doctest.testmod()

def complementaire_reeksen(reeks):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    assert (stijgend(reeks) == True), ""gegeven reeks is niet stijgend""
    deel_1 = verhogen(reeks)
    deel_2 = verhogen(frequentiereeks(reeks))
    return (deel_1,deel_2)


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Kian Simoens/complementaire-reeksen.py"",""fullName"":""Kian Simoens"",""id"":""12933"",""status"":""correct"",""submissionID"":""6366732"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T16:09:27.000Z"",""labels"":""fyss""}"
877,/home/maxiem/Downloads/files/Wout Iterbeke/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    reeks = list(reeks)
    if reeks == sorted(reeks):
        return True
    else:
        return False


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    positie = 0
    a = 0
    check = 1
    out = []
    while positie < len(reeks):
        if reeks[positie] < check:
            a += 1
            positie += 1
        else:
            out.append(a)
            check += 1
    out.append(a)
    return out


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    i = 0
    out = []
    while i < len(reeks):
        a = reeks[i] + i + 1
        out.append(a)
        i += 1
    return out

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    a1 = verhogen(reeks)
    a2 = verhogen(frequentiereeks(reeks))
    r = [a1, a2]
    r = tuple(r)
    return r

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Wout Iterbeke/complementaire-reeksen.py"",""fullName"":""Wout Iterbeke"",""id"":""12935"",""status"":""correct"",""submissionID"":""6377713"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:07:50.000Z"",""labels"":""fyss""}"
878,/home/maxiem/Downloads/files/Quentin Staelens/complementaire-reeksen.py,"def stijgend(list):
    controle = list[0]
    for cijfer in range(len(list)):
        if list[cijfer] >= controle and cijfer != len(list)-1:
            controle = list[cijfer]
        elif list[cijfer] >= controle and cijfer == len(list)-1:
            return True
        else:
            return False
def frequentiereeks(list):
    totaal = 0
    reeks = []
    assert stijgend(list) == True, 'gegeven reeks is niet stijgend'
    for cijfer in range(int(list[-1]) + 1):
        for karakter in list:
            if karakter < cijfer + 1:
                totaal += 1
        reeks.append(totaal)
        totaal = 0
    return reeks
def verhogen(list):
    nieuwelist = []
    for karakter in range(len(list)):
        getal = int(list[karakter])
        nieuwelist.append(getal + karakter +1)
    return nieuwelist
    
def complementaire_reeksen(list):
    reeks = []
    assert stijgend(list) == True, 'gegeven reeks is niet stijgend'
    reeks.append(verhogen(list))
    tweededeel = verhogen(frequentiereeks(list))
    reeks.append(tweededeel)
    reeks = tuple(reeks)
    return reeks
        ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( ERROR ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Quentin Staelens/complementaire-reeksen.py"",""fullName"":""Quentin Staelens"",""id"":""12222"",""status"":""correct"",""submissionID"":""6356889"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T21:31:27.000Z"",""labels"":""fyss""}"
879,/home/maxiem/Downloads/files/Niels Carlier/complementaire-reeksen.py,"def stijgend(reeks):
    """"""""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    reeks_sort = list(reeks)
    reeks_sort.sort()
    if list(reeks) == reeks_sort:
        return True
    return False


def frequentiereeks(reeks):
    """"""""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    lijst = []
    m = reeks[-1]
    for i in range(1, (m+1) + 1):
        som = 0
        for x in range(i):
            som += reeks.count(x)
        lijst.append(som)
    return lijst


def verhogen(reeks):
    """"""""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    res = list(reeks[index] + (index+1) for index in range(len(reeks)))
    return res


def complementaire_reeksen(reeks):
    """"""""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    l1 = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    l2 = verhogen(frequentie)
    return l1, l2


if __name__ == '__main__':
    import doctest
    print(doctest.testmod())",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ) ),"{""filename"":""Niels Carlier/complementaire-reeksen.py"",""fullName"":""Niels Carlier"",""id"":""12936"",""status"":""correct"",""submissionID"":""6340036"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T16:16:05.000Z"",""labels"":""fyss""}"
880,/home/maxiem/Downloads/files/Sven Vercauteren/complementaire-reeksen.py,"def stijgend(reeks):
    uitvoer= True
    for index in range(len(reeks)-1):
        if reeks[index]>reeks[index+1]:
            uitvoer=False
    return uitvoer
def frequentiereeks(reeks):
    if stijgend(reeks)==False:
        assert(),'gegeven reeks is niet stijgend'

    freq= list()
    getal =1
    while len(freq)!= reeks[-1]+1:
        aantal=0
        for cijfer in reeks:
            if cijfer< getal:
                aantal+=1
        getal+=1
        freq.append(aantal)
    return freq
def verhogen(reeks):
    p= list()
    for index, waarde in enumerate(reeks):
        p.append(waarde+index+1)
    return p
def complementaire_reeksen(reeks):
    if stijgend(reeks)==False:
        assert(),'gegeven reeks is niet stijgend'
    return(verhogen(reeks), verhogen(frequentiereeks(reeks)))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ) ) ) ( string ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Sven Vercauteren/complementaire-reeksen.py"",""fullName"":""Sven Vercauteren"",""id"":""7925"",""status"":""correct"",""submissionID"":""6336255"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T22:51:57.000Z"",""labels"":""geog""}"
881,/home/maxiem/Downloads/files/Mortada Benayad/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    :param lijst:
    :return:
    """"""
    lijst = list(lijst)
    if sorted(lijst) == lijst:
        return True
    else:
        return False
def frequentiereeks(crawl):
    """"""
    >>> frequentiereeks([4,8,7,7,9,12])
    :param crawl:
    :return:
    """"""
    assert stijgend(crawl) is True,""gegeven reeks is niet stijgend""
    maximum = max(crawl)
    n = -1
    f = []
    for i in range(1,maximum + 2):
        f += [0,]
        n += 1
        for char in crawl:
            if int(char) < i :
                f[n] += 1
    return f

def verhogen(a):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    :param a:
    :return:
    """"""
    f = []
    for i in range(len(a)):
        f += [0,]
        f[i] = a[i] + (i + 1)
    return f
def complementaire_reeksen(a):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    :param a:
    :return:
    """"""

    assert stijgend(a) is True,""gegeven reeks is niet stijgend""
    open1 = verhogen(a)
    open2 = verhogen(frequentiereeks(a))
    return open1,open2

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( identifier ) ( identifier ) ) ( return_statement ( ERROR ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( identifier ) ( identifier ) ( string ) ) ( string ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( identifier ) ( identifier ) ( string ) ) ( string ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Mortada Benayad/complementaire-reeksen.py"",""fullName"":""Mortada Benayad"",""id"":""12937"",""status"":""correct"",""submissionID"":""6409276"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T22:12:26.000Z"",""labels"":""fyss""}"
882,/home/maxiem/Downloads/files/Maarten Minnaert/complementaire-reeksen.py,"def stijgend(lijst):
    waarde1 = lijst[0]
    for waarde in lijst:
        if waarde < waarde1: return False
        waarde1 = waarde
    return True

def frequentiereeks(lijst):
    assert (stijgend(lijst)==True) , 'gegeven reeks is niet stijgend'
    lijstnieuw = list()
    for waarde in range(1,lijst[-1]+2):
        n=0
        for getal in lijst:
            if waarde > getal: n+=1
        lijstnieuw.append(n)
    return lijstnieuw

def verhogen(lijst):
    n=1
    lijstnieuw = list()
    for getal in lijst:
        lijstnieuw.append(getal + n)
        n+=1
    return lijstnieuw
    
def complementaire_reeksen(lijst):
    lijst1 = verhogen(lijst)
    lijst2 = verhogen(frequentiereeks(lijst))
    reeks = lijst1,lijst2
    return reeks",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( augmented_assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Maarten Minnaert/complementaire-reeksen.py"",""fullName"":""Maarten Minnaert"",""id"":""12939"",""status"":""correct"",""submissionID"":""6345252"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T13:42:39.000Z"",""labels"":""geol""}"
883,/home/maxiem/Downloads/files/Ferre Despierre/complementaire-reeksen.py,"def stijgend(u):
    res = all(i <= j for i, j in zip(u, u[1:]))
    return res

def frequentiereeks(u):
    n = 0
    res = []
    g = 0

    if stijgend(u) == True:
        while n <= u[-1]:
            for char in u:
                if char <= n:
                    g += 1
            res.append(g)
            g = 0
            n += 1
        return res
    else:
        assert stijgend(u) == True, ""gegeven reeks is niet stijgend""

def verhogen(u):
    u = list(u)
    a = 1
    for char in u:
        u[a - 1] += a
        a += 1
    return u

def complementaire_reeksen(u):
    e1 = verhogen(u)
    e2 = verhogen(frequentiereeks(u))
    res = (e1, e2)
    return res",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Ferre Despierre/complementaire-reeksen.py"",""fullName"":""Ferre Despierre"",""id"":""12940"",""status"":""correct"",""submissionID"":""6399840"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T10:56:36.000Z"",""labels"":""fyss""}"
884,/home/maxiem/Downloads/files/Arthur Vanhaverbeke/complementaire-reeksen.py,"def stijgend(lijst):
    a = len(lijst)
    for i in range(a - 1):
        if lijst[i] <= lijst[i+1]:
            if i + 1 == a - 1:
                return True
        else:
            return False

def frequentiereeks(lijst):
    assert stijgend(lijst) is True, 'gegeven reeks is niet stijgend'
    maximum = max(lijst) + 2
    tel = -1
    freqreeks = []
    for i in range(1, maximum):
        freqreeks += [0,]
        tel += 1
        for letter in lijst:
            if int(letter) < i:
                freqreeks[tel] += 1
    return freqreeks

def verhogen(lijst):
    plaats = 1
    optel = []
    for i in lijst:
        som = i + plaats
        plaats += 1
        optel.append(som)
    return optel

def complementaire_reeksen(lijst):
    assert stijgend(lijst) is True, 'gegeven reeks is niet stijgend'
    a = verhogen(lijst)
    b = frequentiereeks(lijst)
    c = verhogen(b)
    
    return a,c",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Arthur Vanhaverbeke/complementaire-reeksen.py"",""fullName"":""Arthur Vanhaverbeke"",""id"":""12941"",""status"":""correct"",""submissionID"":""6404098"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T15:34:35.000Z"",""labels"":""fyss""}"
885,/home/maxiem/Downloads/files/Hannelore Van Haelst/complementaire-reeksen.py,"def stijgend(reeks):
    '''
    Geeft in een booleaanse waarde weer of de getallen stijgend zijn.
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    getal = 0
    stijgend = 0
    for cijfer in reeks:
        stijgend += 1 if cijfer < getal else stijgend
        getal = cijfer
    return True if stijgend == 0 else False
def frequentiereeks(reeks):
    '''
    Geeft de frequentiereeks weer van de gegeven reeks. Als de reeks niet stijgend is krijg je error.
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    #return AssertionError if stijgend(reeks)
    assert stijgend(reeks) is True, 'gegeven reeks is niet stijgend'
    m = reeks[-1]
    n = 1
    nieuwe_reeks = []
    # lengte is m + 1
    for i in range(m + 1):
        count = 0
        # tellen hoeveel getallen er onder n zitten
        for cijfer in reeks:
            if cijfer < n:
                count += 1
        nieuwe_reeks.append(count)
        n +=1
    return nieuwe_reeks
def verhogen(reeks):
    '''
    Verhoogt de getallen van de gegeven reeks.
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    nieuwe_reeks = []
    for positie, getal in enumerate(reeks):
        getal += positie + 1
        nieuwe_reeks.append(getal)
    return nieuwe_reeks
def complementaire_reeksen(reeks):
    assert stijgend(reeks) is True, 'gegeven reeks is niet stijgend'
    element1 = verhogen(reeks)
    element2x = frequentiereeks(reeks)
    element2 = verhogen(element2x)
    return (element1, element2)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( ERROR ( identifier ) ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Hannelore Van Haelst/complementaire-reeksen.py"",""fullName"":""Hannelore Van Haelst"",""id"":""12944"",""status"":""correct"",""submissionID"":""6377314"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:43:10.000Z"",""labels"":""fyss""}"
886,/home/maxiem/Downloads/files/Ewout Lemmens/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    if sorted(reeks) == list(reeks):
        return True
    return False


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    new_reeks = []
    for n in range(reeks[-1] + 1):
        count = len([i for i in reeks if i - 1 < n])
        new_reeks.append(count)
    return new_reeks


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    new_reeks = []
    for i in range(len(reeks)):
        new_reeks += [reeks[i] + (i + 1)]
    return new_reeks


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    new_reeks = verhogen(reeks)
    frequentie = verhogen(frequentiereeks(reeks))
    return new_reeks, frequentie


if __name__ == ""__main__"":
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Ewout Lemmens/complementaire-reeksen.py"",""fullName"":""Ewout Lemmens"",""id"":""12945"",""status"":""correct"",""submissionID"":""6341475"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T19:48:15.000Z"",""labels"":""fyss""}"
887,/home/maxiem/Downloads/files/Lucas Claus/complementaire-reeksen.py,"def stijgend(list):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    k = 0
    for i in range(len(list)-1):
        if list[i] <= list[i+1]:
            k += 1

    if (k+1) == len(list):
        return True
    else:
        return False


def frequentiereeks(list):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(list) == True, 'gegeven reeks is niet stijgend'
    l = []
    for i in range(1, list[-1] + 2):
        count = 0
        bool = False
        if i <= list[0]:
            count += 0
        else:
            for x in list:
                if x < i:
                    count += 1
        l.append(count)
    return l

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = list(lijst)
    som = []
    n = 1
    for i in range(len(lijst)):
        som.append(lijst[0] + n)
        n += 1
        del lijst[0]
    return som

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'
    return (verhogen(lijst), verhogen(frequentiereeks(lijst)))
    

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( else_clause ( ERROR ) ( return_statement ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Lucas Claus/complementaire-reeksen.py"",""fullName"":""Lucas Claus"",""id"":""12947"",""status"":""correct"",""submissionID"":""6199922"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-31T09:44:10.000Z"",""labels"":""fyss""}"
888,/home/maxiem/Downloads/files/Tom Burgelman/complementaire-reeksen.py,"def increasing(list):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(len(list) - 1):
        if i != len(list) - 1:
            if list[i] > list[i + 1]:
                return False
    return True

def frequency_sequence(l):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    k = []
    l = list(l)
    x = 0
    z = 0
    if not increasing(l):
        raise AssertionError(""given sequence is not increasing"")
    for i in range(len(l)):
        while l[i] > z:
            k.append(x)
            z += 1
        x += 1
    k.append(x)
    return k

def lift(l):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    l = list(l)
    for i in range(len(l)):
        l[i] += i + 1
    return l

def complementary_sequences(l):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    if not increasing(l):
        raise AssertionError(""given sequence is not increasing"")
    k = lift(l)
    m = []
    i = len(l) - 1
    for p in range(1, k[i] + 2):
        if p not in k:
            m.append(p)
    return (k, m)
if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Tom Burgelman/complementaire-reeksen.py"",""fullName"":""Tom Burgelman"",""id"":""12948"",""status"":""correct"",""submissionID"":""6336222"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T22:05:48.000Z"",""labels"":""fyss""}"
889,/home/maxiem/Downloads/files/Maxim Ketels/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    is_increasing = True
    for i in range(0, len(sequence) - 1):
        if sequence[i] > sequence[i + 1]:
            is_increasing = False

    return is_increasing

def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    assert increasing(sequence), 'given sequence is not increasing'

    largest_integer = sequence[-1]
    final_sequence = []

    for border_integer in range(1, largest_integer + 2):
        amount_below_border = 0
        for i in range(0, len(sequence)):
            if sequence[i] < border_integer:
                amount_below_border += 1
        final_sequence.append(amount_below_border)

    return final_sequence


def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    lifted_sequence = [number + index + 1 for number, index in enumerate(sequence)]

    return lifted_sequence

def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""

    final_sequence = (lift(sequence), lift(frequency_sequence(sequence)))

    return final_sequence


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Maxim Ketels/complementaire-reeksen.py"",""fullName"":""Maxim Ketels"",""id"":""12949"",""status"":""correct"",""submissionID"":""6377866"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:15:45.000Z"",""labels"":""fyss""}"
890,/home/maxiem/Downloads/files/Luka Berquin/complementaire-reeksen.py,"def stijgend(input):
    n = 0
    error = True
    for _ in range(len(input)-1):
        if input[n] > input[n+1]:
            error = False
        n += 1
    return error

def frequentiereeks(reeks):
    assert stijgend(reeks) is not False, ""gegeven reeks is niet stijgend""
    lijst = []
    m = reeks[-1]
    for nummer in range(1, m+2):
        hoeveel = 0
        for element in reeks:
            if element < nummer:
                hoeveel +=1
        lijst.append(hoeveel)
    return lijst

def verhogen(reeks):
    lijst = []
    plaats = 0
    for elementen in reeks:
        plaats += 1
        Newelement = elementen + plaats
        lijst.append(Newelement)
    return lijst

def complementaire_reeksen(reeks):
    assert stijgend(reeks) is not False, 'gegeven reeks is niet stijgend'
    endtuple = verhogen(reeks), verhogen(frequentiereeks(reeks))
    return endtuple
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Luka Berquin/complementaire-reeksen.py"",""fullName"":""Luka Berquin"",""id"":""12950"",""status"":""correct"",""submissionID"":""6395589"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T19:02:07.000Z"",""labels"":""fyss""}"
891,/home/maxiem/Downloads/files/Nico Seghers/complementaire-reeksen.py,"def stijgend(lijst):

    """"""
    Geeft een booleaanse waarde terug die aangeeft of de rij stijgend is.

    >> > stijgend([2, 3, 5, 7, 11, 13])
    True
    >> > stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >> > stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    lijst = list(lijst)

    if lijst == sorted(lijst):
        return True
    else:
        return False

def frequentiereeks(lijst):

    """"""
    Geeft de frequentiereeks van een gegeven lijst.

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(lijst), 'gegeven reeks is niet stijgend'

    teller = 0
    plaatsnummer = 0
    frequentielijst = []

    for i in range(1, max(lijst) + 2):
        bool = True
        while bool:
            if lijst[plaatsnummer] < i:
                teller += 1
                plaatsnummer += 1
            else:
                bool = False
            if teller == len(lijst):
                bool = False
        frequentielijst += [teller]

    return frequentielijst

def verhogen(lijst):

    """"""
    >> > verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >> > verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >> > verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    verhoogde_lijst = []

    for i in range(len(lijst)):
        toevoegen = [lijst[i] + i + 1]
        verhoogde_lijst += toevoegen

    return verhoogde_lijst

def complementaire_reeksen(lijst):

    """"""
    >> > complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >> > complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >> > complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(lijst), 'gegeven reeks is niet stijgend'

    frequentielijst = frequentiereeks(lijst)

    verhoogde_lijst = verhogen(lijst)
    verhoogde_frequentielijst = verhogen(frequentielijst)

    tuple = verhoogde_lijst, verhoogde_frequentielijst

    return tuple








if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( array ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Nico Seghers/complementaire-reeksen.py"",""fullName"":""Nico Seghers"",""id"":""12951"",""status"":""correct"",""submissionID"":""6407204"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T18:42:35.000Z"",""labels"":""fyss""}"
892,/home/maxiem/Downloads/files/Kasper De Vyt/complementaire-reeksen.py,"# -*- coding: utf-8 -*-
""""""
Created on Sun Nov 15 14:22:38 2020

@author: Trigg
""""""

def stijgend (a):
    
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    counter = 0
    yep = False
    
    for i in range(len(a)-1):
        
        if int(a[i]) <= int(a[i+1]):
            counter +=  1
           
        else:
            counter = 0
            
    if counter == len(a)-1:
        yep = True
    else:
        yep = False
            
    return yep

def frequentiereeks (a):  
    '''
    
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    
    '''
    b = stijgend (a)
    assert b is True, 'gegeven reeks is niet stijgend'
    c = -1
    lijst = []
    for I in range( 1, max(a)+2):
        lijst += [0,]    
        c += 1
            
        for d in a:
            if int(d) < I:
                lijst[c] += 1
           
                       
    return lijst
      
def verhogen (a): 
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    
    '''
    a = list(a)
    b = 1
    for char in a:
        a[b - 1] += b
        b += 1
    return a
                
def complementaire_reeksen (a):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    
    '''
    
    assert stijgend(a) is True, 'gegeven reeks is niet stijgend'
    totaal = ()
    lijst1 = []
    lijst2 = []      
    
    b = verhogen(a)
    c = frequentiereeks(a)
    d = verhogen(c)
    
    lijst1 = list(b)
    lijst2 = list(d)
                
    totaal = (lijst1,  lijst2)
    
    
    
    return totaal

        
    
    
    
    #doctest
if __name__ == ""__main__"":
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( binary_expression ( unary_expression ( ERROR ( unary_expression ( identifier ) ) ) ( identifier ) ) ( number ) ) ( ERROR ) ( unary_expression ( ERROR ( string ) ) ( string ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Kasper De Vyt/complementaire-reeksen.py"",""fullName"":""Kasper De Vyt"",""id"":""12952"",""status"":""correct"",""submissionID"":""6403069"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T14:49:53.000Z"",""labels"":""fyss""}"
893,/home/maxiem/Downloads/files/Mendel Debrabandere/complementaire-reeksen.py,"def stijgend(lijst):
    uitvoerwaarde = True
    laatste_waarde = 0
    for i in lijst:
        if i < laatste_waarde:
            return False
        laatste_waarde = i
    return uitvoerwaarde

def frequentiereeks(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    list = []
    aantal_getallen = 0
    for kleinerdanwaarde in range(1, lijst[len(lijst) - 1] + 2):
        for i in lijst:
            if i < kleinerdanwaarde:
                aantal_getallen += 1
        list.append(aantal_getallen)
        aantal_getallen = 0
    return list

def verhogen(lijst):
    list = []
    for number, index in enumerate(lijst):
        list.append(number + index + 1)
    return list

def complementaire_reeksen(lijst):
    return_waarde1 = verhogen(lijst)
    return_waarde2 = verhogen(frequentiereeks(lijst))
    return_waarde = (return_waarde1, return_waarde2)
    return return_waarde

        ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Mendel Debrabandere/complementaire-reeksen.py"",""fullName"":""Mendel Debrabandere"",""id"":""12953"",""status"":""correct"",""submissionID"":""6377907"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:18:02.000Z"",""labels"":""fyss""}"
894,/home/maxiem/Downloads/files/Arne Dhont/complementaire-reeksen.py,"def stijgend(reeks):
    for i in range(len(reeks)-1):
        if reeks[i] > reeks[i+1]:
            return False
    return True

def frequentiereeks(reeks):
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    reeks = list(reeks)
    reeks.append(10000000)
    reeks2 = list(i-i for i in range(reeks[-2]+1))
    k = 0
    for i in range(len(reeks2)):

        while reeks[k] <= i:
            k += 1
        reeks2[i] = k
        k = 0
    return reeks2
def verhogen(reeks):
    reeks2 = list(i-i for i in range(len(reeks)))
    for i in range(len(reeks)):
        reeks2[i] = reeks[i]+i+1
    return reeks2
def complementaire_reeksen(reeks):
    jaja = (verhogen(reeks), verhogen(frequentiereeks(reeks)))
    return jaja",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Arne Dhont/complementaire-reeksen.py"",""fullName"":""Arne Dhont"",""id"":""12955"",""status"":""correct"",""submissionID"":""6340884"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-09T18:02:19.000Z"",""labels"":""fyss""}"
895,/home/maxiem/Downloads/files/Fedra Moeykens/complementaire-reeksen.py,"def stijgend(lijst):

    for element in range(0, len(lijst)-1):
        if lijst[element] > lijst[element+1]:
            return False
    return True
    


def frequentiereeks(lijst):
    if stijgend(lijst) != True:
       raise AssertionError('gegeven reeks is niet stijgend')
    else:
        getal = 1
        laatstegetal = int(lijst[-1])
        frequentiereeksje = []
        while getal != laatstegetal + 2:
            getallenkleiner = 0
            for element in range (0, len(lijst)):                
                if int(lijst[element]) < getal:
                    getallenkleiner += 1
            getal +=1
            frequentiereeksje.append(getallenkleiner)
        return frequentiereeksje
        
def verhogen(lijst):
    lijst = list(lijst)
    getal = 1
    for element in range(0, len(lijst)):
        nieuwelement = lijst[element] + getal
        lijst[element] = nieuwelement
        getal+= 1
    return(lijst)
    
def complementaire_reeksen(lijst):
    if stijgend(lijst) != True:
       raise AssertionError('gegeven reeks is niet stijgend')
    lijst = list(lijst)
    eerste = verhogen(lijst)
    complement = []
    for element in range (1, eerste[-1]+2):
        if element not in eerste:
            complement.append(element)
    return(eerste, complement)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Fedra Moeykens/complementaire-reeksen.py"",""fullName"":""Fedra Moeykens"",""id"":""12956"",""status"":""correct"",""submissionID"":""6344718"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T13:03:51.000Z"",""labels"":""fyss""}"
896,/home/maxiem/Downloads/files/Simon Lambrecht/complementaire-reeksen.py,"def stijgend(reeks):
    n = reeks[0]
    bool = True
    for i in reeks:
        if i < n:
            bool = False
        n = i
    return bool

def frequentiereeks(reeks):
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    i = 1
    freq_reeks = []
    while i <= reeks[-1] + 1:
        n = 0
        for j in reeks:
            if j < i:
                n += 1
        i += 1
        freq_reeks.append(n)
    return freq_reeks

def verhogen(reeks):
    verh_reeks = []
    for i in range(len(reeks)):
        verh_reeks.append(reeks[i] + 1 + i)
    return verh_reeks

def complementaire_reeksen(reeks):
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    verh_reeks = verhogen(reeks)
    verh_freq_reeks = verhogen(frequentiereeks(reeks)) 
    return (verh_reeks, verh_freq_reeks)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Simon Lambrecht/complementaire-reeksen.py"",""fullName"":""Simon Lambrecht"",""id"":""12957"",""status"":""correct"",""submissionID"":""6417241"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T14:23:05.000Z"",""labels"":""fyss""}"
897,/home/maxiem/Downloads/files/Ahmed Karakaçi/complementaire-reeksen.py,"def increasing(lista):
    for k in range(len(lista) - 1):
        if lista[k]> lista[k + 1]:
            return False
    return True

def frequency_sequence(lista): # frequency_sequence([2, 3, 5, 7, 11, 13]) # [1,2,3,4,5,6,7,8,9,10,11,12,13]
    assert increasing(lista), 'given sequence is not increasing'
    l = []
    m = lista[-1] + 1          # [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    for k in range(m):
        s = 0
        for j in range(len(lista)):
            if lista[j] <= k:
                s += 1
        l.append(s)
    return l

def lift(lista):
    l = []
    for k in range(len(lista)):
        n = lista[k] + k + 1
        l.append(n)
    return l

def complementary_sequences(lista):
    assert increasing(lista), 'given sequence is not increasing'
    return lift(lista), lift(frequency_sequence(lista))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( subscript_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( subscript_expression ( number ) ( ERROR ( ERROR ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Ahmed Karakaçi/complementaire-reeksen.py"",""fullName"":""Ahmed Karakaçi"",""id"":""12946"",""status"":""correct"",""submissionID"":""6222976"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-01T18:34:06.000Z"",""labels"":""fyss""}"
898,/home/maxiem/Downloads/files/Arno De Pauw/complementaire-reeksen.py,"def stijgend(reeks):
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))
    
def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    freq_reeks = []
    waarde = 0
    aantal = 0
    for number in reeks:
        while waarde < number:
            freq_reeks.append(aantal)
            waarde += 1
        aantal += 1
    freq_reeks.append(aantal)
    return freq_reeks
    
def verhogen(reeks):
    return [element + positie + 1 for positie, element in enumerate(reeks)]
    
def complementaire_reeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
    
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Arno De Pauw/complementaire-reeksen.py"",""fullName"":""Arno De Pauw"",""id"":""12958"",""status"":""correct"",""submissionID"":""6423080"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:31:12.000Z"",""labels"":""fyss""}"
899,/home/maxiem/Downloads/files/Youp Tulpin/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    >>> stijgend([2, 18, 19, 2, 15, 16, 19])
    False
    """"""
    reekslist = list(reeks)
    tester = 0
    for i in range(0,len(reekslist) - 1):
        if reekslist[i+1] < reekslist[i]:
            tester =+ 1
    if tester > 0:
        return False
    else:
        return True


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks):
        assert (stijgend(reeks) == True), 'gegeven reeks is niet stijgend'
    else:
        newlist = []
        b = 0
        for i in range(reeks[-1] + 1):
            for a in range(len(reeks)):
                if int(reeks[a]) < i + 1:
                    b += 1
            newlist.append(b)
            b = 0
    return newlist


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    listreeks = list(reeks)
    newlist = []
    for i in range(len(listreeks)):
        newlist.append(listreeks[i] + (i + 1))
    return newlist

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if not stijgend(reeks):
        assert (stijgend(reeks) == True), 'gegeven reeks is niet stijgend'
    else:
        listreeks = verhogen(reeks)
        newlist = []
        for i in range(1, listreeks[-1] + 2):
            if i not in listreeks:
                newlist.append(i)
    return verhogen(reeks), newlist",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Youp Tulpin/complementaire-reeksen.py"",""fullName"":""Youp Tulpin"",""id"":""12959"",""status"":""correct"",""submissionID"":""6387485"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T19:10:15.000Z"",""labels"":""fyss""}"
900,/home/maxiem/Downloads/files/Caroline Withofs/complementaire-reeksen.py,"def stijgend(lijst_getallen):
    for i in range(0, len(lijst_getallen)-1):
        if lijst_getallen[i] > lijst_getallen[i + 1]:
            return False
    return True

def frequentiereeks(lijst_getallen):
    if stijgend(lijst_getallen) != True:
        assert False, 'gegeven reeks is niet stijgend'

    frequentie_getal = []
    waarde = 0
    aantal = 0
    for getal in lijst_getallen:
        while waarde < getal:
            frequentie_getal.append(aantal)
            waarde += 1
        aantal += 1
    frequentie_getal.append(aantal)
    return frequentie_getal

def verhogen(lijst_getallen):
    lijst_getallen = list(lijst_getallen)
    for i in range(len(lijst_getallen)):
        lijst_getallen[i] = lijst_getallen[i] + (1*(i+1))
    return lijst_getallen

def complementaire_reeksen(lijst_getallen):
    if stijgend(lijst_getallen) != True:
        assert False, 'gegeven reeks is niet stijgend'

    lijst1 = verhogen(lijst_getallen)
    lijst2 = frequentiereeks(lijst_getallen)
    lijst2 = verhogen(lijst2)

    return lijst1, lijst2

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( number ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Caroline Withofs/complementaire-reeksen.py"",""fullName"":""Caroline Withofs"",""id"":""12102"",""status"":""correct"",""submissionID"":""6370529"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T08:28:09.000Z"",""labels"":""bcbt""}"
901,/home/maxiem/Downloads/files/Fangio De Caluwe/complementaire-reeksen.py,"def stijgend(lijst):
    pos = 0
    boel = True
    for i in range(len(lijst) - 1):
        if lijst[pos + 1] < lijst[pos]:
            boel = False
        pos += 1
    if not boel:
        return False
    else:
        return True


def frequentiereeks(lijst):
    assert stijgend(lijst) == True, 'gegeven reeks is niet stijgend'
    pos = 0
    var = 1
    x = 0
    lijst1 = []
    for i in range(lijst[-1] + 1):
        for i in range(len(lijst)):
            if var > lijst[pos]:
                x += 1
            pos += 1
        lijst1.append(x)
        pos = 0
        x = 0
        var += 1
    return lijst1


def verhogen(lijst):
    pos = 1
    x = 0
    lijst1 = []
    for i in range(len(lijst)):
        y = lijst[x] + pos
        lijst1.append(y)
        x += 1
        pos += 1
    return lijst1


def complementaire_reeksen(lijst):
    lijst1 = verhogen(lijst)
    lijst2 = verhogen(frequentiereeks(lijst))
    tup = (lijst1, lijst2)
    return tup",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( return_statement ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( variable_declaration ( ERROR ( number ) ) ( variable_declarator ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( identifier ) ( array_pattern ( identifier ) ) ) ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( number ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Fangio De Caluwe/complementaire-reeksen.py"",""fullName"":""Fangio De Caluwe"",""id"":""12963"",""status"":""correct"",""submissionID"":""6383335"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T11:26:41.000Z"",""labels"":""fyss""}"
902,/home/maxiem/Downloads/files/Jelle Provost/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks, u=0):
    for i in reeks:
        if i >= u:
            u = i
        else:
            return False
    return True


def frequentiereeks(reeks, y=0):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    verschil = []
    freeks = []
    for i in range(len(reeks)):
        if i == 0:
            verschil.append(reeks[i])
        else:
            verschil.append(reeks[i] - reeks[i-1])
    verschil.append(1)
    for x in verschil:
        for z in range(x):
            freeks.append(y)
        y += 1
    return freeks


def verhogen(reeks, x=1):
    verhoogde = []
    for i in reeks:
        verhoogde.append(i + x)
        x += 1
    return verhoogde

def complementaire_reeksen(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    y = frequentiereeks(reeks)
    x = verhogen(y)
    return verhogen(reeks), x

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ),"{""filename"":""Jelle Provost/complementaire-reeksen.py"",""fullName"":""Jelle Provost"",""id"":""12964"",""status"":""correct"",""submissionID"":""6403997"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T15:28:55.000Z"",""labels"":""fyss""}"
903,/home/maxiem/Downloads/files/Stefan Vulpe/complementaire-reeksen.py,"def stijgend(reeks):
    controle = 0
    for i in range(len(reeks) - 1):
        if reeks[i] <= reeks[i + 1]:
            controle += 1
    return bool(controle == len(reeks) - 1)


def frequentiereeks(reeks):
    nieuwe_reeks = []
    element = 0
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    for i in range(1, reeks[-1] + 2):
        for j in range(len(reeks)):
            if reeks[j] < i:
                element += 1
        nieuwe_reeks += [element]
        element = 0
    return nieuwe_reeks


def verhogen(reeks):
    nieuwe_reeks = []
    for i in range(len(reeks)):
        nieuwe_reeks += [int(reeks[i]) + i + 1]
    return nieuwe_reeks
    
    
def complementaire_reeksen(reeks):
    nieuwe_reeks1 = verhogen(reeks)
    nieuwe_reeks2 = frequentiereeks(reeks)
    nieuwe_reeks2 = verhogen(nieuwe_reeks2)
    return nieuwe_reeks1, nieuwe_reeks2",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Stefan Vulpe/complementaire-reeksen.py"",""fullName"":""Stefan Vulpe"",""id"":""12965"",""status"":""correct"",""submissionID"":""6390440"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T11:05:54.000Z"",""labels"":""fyss""}"
904,/home/maxiem/Downloads/files/Brando Alabodi/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
True
>>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
True
>>> stijgend([5, 3, 2, 7, 8, 1, 9])
False
    
    """"""
    for element in range(len(lijst)-1):
        
        if lijst[element] > lijst[element+1]:
            return False
    return True
    
if __name__ == '__main__':
    import doctest
    doctest.testmod()
#------------------------------------------------------------------------------------------code-2------------
def frequentiereeks(lijst):
    """"""
 >>> frequentiereeks([2, 3, 5, 7, 11, 13])
[0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
>>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[2, 3, 5, 7, 11, 13, 14]
>>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend

    """"""
    if stijgend(lijst) == False:
        raise AssertionError('gegeven reeks is niet stijgend')

    aantal = 0
    pos = 0
    nummer = 1
    nieuwe_lijst = []
    grootste = max(lijst)
    while pos <= grootste:
        for element in lijst:
            if element < nummer:
                aantal += 1
        nieuwe_lijst.append(aantal)
        aantal = 0
        nummer += 1
        pos += 1    
        
    return list(nieuwe_lijst)

if __name__ == '__main__':
    import doctest
    doctest.testmod()
    
#------------------------------------------------------------------------code-3-------
def verhogen(lijst):
    """"""
>>> verhogen([2, 3, 5, 7, 11, 13])
[3, 5, 8, 11, 16, 19]
>>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
[1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
>>> verhogen([5, 3, 2, 7, 8, 1, 9])
[6, 5, 5, 11, 13, 7, 16]

    """"""
    if isinstance(lijst, tuple):
        x = 'OK'
    else:
        x = 'GEEN'
    pos = 1
    #nieuw = []
    lijst = list(lijst)
    for element in range(0, len(lijst)):
        lijst[element] += pos
        pos += 1
    
  
    return list(lijst)


if __name__ == '__main__':
    import doctest
    doctest.testmod()
    
#--------------------------------------------code-4--------------
def complementaire_reeksen(lijst):
    """"""
>>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
>>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
>>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
Traceback (most recent call last):
AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(lijst) == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    
    var_1 = verhogen(lijst)
    var_2 = verhogen(frequentiereeks(lijst))
    uitvoer = (var_1, var_2)
    return tuple(uitvoer)


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( identifier ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( update_expression ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Brando Alabodi/complementaire-reeksen.py"",""fullName"":""Brando Alabodi"",""id"":""12966"",""status"":""correct"",""submissionID"":""6376865"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:20:09.000Z"",""labels"":""fyss""}"
905,/home/maxiem/Downloads/files/Robbe Bilteryst/complementaire-reeksen.py,"def stijgend(lijst):
    limiet = 0
    for i in range(len(lijst)):
        if lijst[i] < limiet:
            return False
        else: limiet = lijst[i]
    return True

def frequentiereeks(lijst):
    reeks =[]
    assert (stijgend(lijst)), ""gegeven reeks is niet stijgend""
    for i in range(1,lijst[-1]+2):
        teller = 0
        i2 = 0
        while i2 < len(lijst) and lijst[i2] < i:
            teller +=1
            i2 += 1
        reeks.append(teller)
    return reeks

def verhogen(lijst):
    verhoging = []
    for i in range(len(lijst)):
        verhoging.append(lijst[i] + i + 1)
    return verhoging

def complementaire_reeksen(lijst):
    assert (stijgend(lijst)), ""gegeven reeks is niet stijgend""
    lijst1 = verhogen(lijst)
    lijst2 = []
    for i in range(1,lijst1[-1]+2):
        if lijst1.count(i) == 0:
            lijst2.append(i)
    return lijst1, lijst2",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Robbe Bilteryst/complementaire-reeksen.py"",""fullName"":""Robbe Bilteryst"",""id"":""12967"",""status"":""correct"",""submissionID"":""6386686"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T17:29:55.000Z"",""labels"":""fyss""}"
906,/home/maxiem/Downloads/files/Wout Voet/complementaire-reeksen.py,"#Deze functie heeft als doel om na te gaan of de reeks stijgende is of er soms dezelfde getallen naast elkaar staan, zolang dit het geval is zal de functie een TRUE teruggeven
#De lengte staat logischerwijs voor de lengte van de reeks,
#De grenzen staan voor de positie in een lijst, vb: lijst=(1,2,3) de grenzen van het getal 1 zijn 0 en 1
#We gebruiken een variable om na te gaan hoeveel keer de voorwaarde van de if reeks is voldaan => als er één of meerdere keren niet voldaan is aan deze voorwaarde dan returnen we een FALSE
def stijgend(reeks):
    Lengte = 0; grens1 = 0 ; grens2 = 1 ; Controle = 0
    while Lengte < len(reeks):
        if reeks[grens1:grens2] <= reeks[(grens2):(int(grens2+1))]:
           Controle += 1
        grens1 += 1 ; grens2 += 1; Lengte += 1
    return bool(Controle == (len(reeks)-1))
#Noem deze stijgende reeks van natuurlijke getallen P_{n} en noem het grootste natuurlijk getal van de reeks m.
# We definiëren nu de frequentiereeks van P_{n} als de reeks van m+1 natuurlijke getallen die aangeven hoeveel getallen van  kleiner zijn dan 1,
#hoeveel er kleiner zijn dan 2, enzoverder. De frequentiereeks van reeks (2, 3, 5, 7, 11, 13)
# (0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6) = 0 getallen van de reeks zijn kleiner dan 1, 0 getallen zijn kleiner dan 2...etc

def frequentiereeks(reeks):
    assert stijgend(reeks) is True, 'gegeven reeks is niet stijgend'
    m = max(reeks)
    num = -1
    nieuwe_reeks = []
    for i in range(1, m + 2):
        nieuwe_reeks += [0,]
        num += 1
        for char in reeks:
            if int(char) < i:
                nieuwe_reeks[num] += 1
    return nieuwe_reeks


def verhogen(reeks):
    a = 0
    b = 1
    lijst = []
    for char in reeks:
        lijst += [((reeks[a]) + b)]
        a += 1
        b += 1
    return lijst

def complementaire_reeksen(reeks):
    verhoogt = verhogen(reeks)
    verhoogde_frequentiereeks = verhogen(frequentiereeks(reeks))
    lijst = [verhoogt, verhoogde_frequentiereeks]
    lijst_tuple = tuple(lijst)
    return lijst_tuple",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( ERROR ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( number ) ( identifier ) ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( arrow_function ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ( ERROR ( identifier ) ) ) ( ERROR ( subscript_expression ( identifier ) ( call_expression ( parenthesized_expression ( identifier ) ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( statement_block ( expression_statement ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( member_expression ( identifier ) ( ERROR ( ERROR ) ) ( property_identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( statement_block ( expression_statement ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( number ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( number ) ( member_expression ( identifier ) ( property_identifier ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( sequence_expression ( assignment_expression ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( number ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( member_expression ( number ) ( ERROR ) ( property_identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( array ( parenthesized_expression ( binary_expression ( parenthesized_expression ( subscript_expression ( identifier ) ( identifier ) ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Wout Voet/complementaire-reeksen.py"",""fullName"":""Wout Voet"",""id"":""12968"",""status"":""correct"",""submissionID"":""6419955"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T16:13:10.000Z"",""labels"":""fyss""}"
907,/home/maxiem/Downloads/files/Matisse Van Den Berghe/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    antwoord = True
    for x in range(len(reeks)-1):
        if reeks[x] > reeks[x+1]:
            antwoord = False
    return antwoord


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    m = int(reeks[-1])
    frequentie = []
    for x in range(m+1):
        count = 0
        for n in range(len(reeks)):
            if reeks[n] < x+1:
                count += 1
        frequentie.append(count)
    return frequentie


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogde_lijst = []
    for n in range(len(reeks)):
        getal = int(reeks[n])
        index = n + 1
        new = getal + index
        verhoogde_lijst.append(new)
    return verhoogde_lijst


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend""""""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    verhoogde_reeks = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    verhoogde_freq = verhogen(frequentie)
    tuple = (verhoogde_reeks, verhoogde_freq)
    return tuple

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( string ) ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ) ),"{""filename"":""Matisse Van Den Berghe/complementaire-reeksen.py"",""fullName"":""Matisse Van Den Berghe"",""id"":""12074"",""status"":""correct"",""submissionID"":""6372325"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:38:56.000Z"",""labels"":""bcbt""}"
908,/home/maxiem/Downloads/files/Senne Roels/complementaire-reeksen.py,"def stijgend(reeks):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    if isinstance(reeks, tuple):
        reeks = list(reeks)
    i = 0
    for i in range(len(reeks) - 1):
        if reeks[i] <= reeks[i + 1]:
            i += 1
        else:
            return False

    return True

def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    if isinstance(reeks, tuple):
        reeks = list(reeks)

    if stijgend(reeks) == False:
        assert stijgend(reeks) is True, ""gegeven reeks is niet stijgend""
    m = max(reeks)

    reeks2 = []

    x = -1
    for getal in range(1, m + 2):
        reeks2 += [0,]
        x += 1
        for i in reeks:
            if int(i) < getal:
                reeks2[x] += 1
    return reeks2

def verhogen(reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    >>> verhogen([0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6])
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    '''
    if isinstance(reeks, tuple):
        reeks = list(reeks)
    i = 0
    x = 1
    for i in range(len(reeks)):
        reeks[i] += x
        i += 1
        x += 1
    return reeks

def complementaire_reeksen(reeks):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend

    '''
    reeks2 = verhogen(frequentiereeks(reeks))
    reeks1 = verhogen(reeks)


    return (reeks1, reeks2)
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Senne Roels/complementaire-reeksen.py"",""fullName"":""Senne Roels"",""id"":""12971"",""status"":""correct"",""submissionID"":""6403146"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T14:52:49.000Z"",""labels"":""fyss""}"
909,/home/maxiem/Downloads/files/Jef Philippé/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    k = -1
    for i in lijst:
        if i < k:
            return False
        k = i
    return True

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    f = []
    for i, k in enumerate(lijst):
        ran = k - lijst[i -1] if k >= lijst[i - 1] else k
        for l in range(ran):
            f.append(i)
    teller = 0
    for i in lijst:
        if i <= lijst[-1]:
            teller += 1
    f.append(teller)
    return f



def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    f = []
    for i, k in enumerate(lijst):
        f.append(k + i + 1)
    return f
def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    return verhogen(lijst), verhogen(frequentiereeks(lijst))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jef Philippé/complementaire-reeksen.py"",""fullName"":""Jef Philippé"",""id"":""12972"",""status"":""correct"",""submissionID"":""6332226"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T10:52:35.000Z"",""labels"":""fyss""}"
910,/home/maxiem/Downloads/files/Berend Hens/complementaire-reeksen.py,"def stijgend(rij):
    for i in range(1, len(rij)):
        if int(rij[i]) >= int(rij[i - 1]):
            voorwaarde = True
        else:
            return False
    return voorwaarde
def frequentiereeks(rij):
    assert stijgend(rij) is True, 'gegeven reeks is niet stijgend'
    nieuwelijst = []
    for i in range(1, int(rij[-1]) + 2):
        count = 0
        for _ in range(0, len(rij)):
            if rij[_] < i:
                count += 1
        nieuwelijst.append(count)
    return nieuwelijst
def verhogen(rij):
    nieuwerij = []
    for i in range(1, len(rij) + 1):
        nieuwerij.append(i + rij[i - 1])
    return nieuwerij
def complementaire_reeksen(rij):
    assert stijgend(rij) is True, 'gegeven reeks is niet stijgend'
    return verhogen(rij), verhogen(frequentiereeks(rij))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Berend Hens/complementaire-reeksen.py"",""fullName"":""Berend Hens"",""id"":""12973"",""status"":""correct"",""submissionID"":""6346542"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T14:31:53.000Z"",""labels"":""fyss""}"
911,/home/maxiem/Downloads/files/Molly Staelens/complementaire-reeksen.py,"def stijgend(reeks):
    '''
    >>> stijgend((2, 3, 5, 7, 11, 13, 12))
    False
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    getal_1 = reeks[0]

    for i in reeks[1::]:
        if not i >= getal_1:
            return False
        getal_1 = i
    return True

def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    resultaat = stijgend(reeks)
    assert resultaat == True, 'gegeven reeks is niet stijgend'

    maximum = max(reeks)
    list = []
    for i in range(maximum + 2)[1::]:
        counter = 0
        for getal in reeks:
            if getal < i:
                counter += 1
        list.append(counter)
    return list

def verhogen (reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    lijst = []
    for i in range(1, len(reeks) +1 ):
        lijst.append(int(reeks[i-1])+i)
    return lijst

def complementaire_reeksen(reeks):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''
    resultaat = stijgend(reeks)
    assert resultaat == True, 'gegeven reeks is niet stijgend'

    lijst_1 = verhogen(reeks)
    lijst_2 = verhogen(frequentiereeks(reeks))

    return lijst_1, lijst_2

x = stijgend((2, 3, 5, 7, 11, 13, 12))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Molly Staelens/complementaire-reeksen.py"",""fullName"":""Molly Staelens"",""id"":""12098"",""status"":""correct"",""submissionID"":""6353030"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T13:04:11.000Z"",""labels"":""bcbt""}"
912,/home/maxiem/Downloads/files/Zoltan Mertens/complementaire-reeksen.py,"def stijgend(reeks):
    n = len(reeks)
    for i in reeks:
        referentie = reeks.index(i)
        getal1 = reeks[referentie]
        if referentie == n - 1:
            return True
        getal2 = reeks[referentie + 1]
        if getal1 > getal2:
            return False
    return True
def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    hoogste = max(reeks)
    frequenties = []
    for i in range(0, hoogste + 1):
        aantal = 0
        for a in reeks:
            if a <= i:
                aantal += 1
        frequenties.append(aantal)
    return frequenties
def verhogen(reeks):
    verhoogde_reeks = []
    for index, getal in enumerate(reeks):
        verhoogde_reeks.append(index + getal + 1)
    return verhoogde_reeks
def complementaire_reeksen(reeks):
    verhoogde_reeks = verhogen(reeks)
    verhoogde_frequentiereeks = []
    for index, getal in enumerate(frequentiereeks(reeks)):
        verhoogde_frequentiereeks.append(index + getal + 1)
    return verhoogde_reeks, verhoogde_frequentiereeks",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Zoltan Mertens/complementaire-reeksen.py"",""fullName"":""Zoltan Mertens"",""id"":""12976"",""status"":""correct"",""submissionID"":""6423704"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T20:20:13.000Z"",""labels"":""geog""}"
913,/home/maxiem/Downloads/files/Christopher Boateng/complementaire-reeksen.py,"def stijgend(list_):
    voorgaande = list_[0] #we nemen de eerste element van de list
    for i in list_[1:]:
        if bool(voorgaande <= i): #bekijk of iederen i in list kleiner is of gelijk aan de voorgaande
            bool_ = bool(1)
            voorgaande = i  
        else:
            bool_ = bool(0)
            break
    return bool_

def frequentiereeks(list_):
    assert (stijgend(list_)) is True, ""gegeven reeks is niet stijgend""
    m = max(list_) + 1
    frq_list = []
    for s in range(m):
        s += 1
        i = 0
        for w in list_:
            if w < s:
                i += 1
            else:
                pass
        frq_list.append(i)
        i = 0        
    return frq_list


def verhogen(list_): #[0,1,2,3,4]
    v_list = [] #maak een lege list
    n = 1
    for w in list_: # 0 bijvoorbeeld
        v_list.append(w + n)
        n += 1
    return v_list

def complementaire_reeksen(list_):
    assert (stijgend(list_)) is True, ""gegeven reeks is niet stijgend""
    a = verhogen (list_)
    b = verhogen(frequentiereeks(list_)) # frequentie reeks van verhoogde versie
    return (a,b)
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( number ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ) ( break_statement ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( ERROR ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( array_pattern ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( number ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Christopher Boateng/complementaire-reeksen.py"",""fullName"":""Christopher Boateng"",""id"":""12977"",""status"":""correct"",""submissionID"":""6378417"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:52:04.000Z"",""labels"":""fyss""}"
914,/home/maxiem/Downloads/files/Chloe De Noble/complementaire-reeksen.py,"
def stijgend(reeks_getallen):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    reeks_getallen = list(reeks_getallen)
    Bool = True
    i = 1
    while i < len(reeks_getallen):
        if reeks_getallen[i-1] <= reeks_getallen[i]:
            i += 1
        else:
            Bool = False
            i += 1
    return Bool

def frequentiereeks(reeks_int):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend

    """"""
    assert stijgend(reeks_int), ""gegeven reeks is niet stijgend""
    tellen = 0
    lijst = []
    n = 0
    i = reeks_int[n]
    for t in range(1, reeks_int[-1] + 2):
        while i < t and n < (len(reeks_int) - 1):
            tellen += 1
            n += 1
            i = reeks_int[n]
        lijst.append(tellen)
        tellen = 0
        n = 0
        i = reeks_int[n]
    lijst[-1] += 1

    return lijst

def verhogen(reeks_int):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    reeks_int = list(reeks_int)
    for index, cijfer in enumerate(reeks_int):
        reeks_int[index] = index + 1 + cijfer
    return reeks_int

def complementaire_reeksen(reeks_int):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend

    """"""
    assert stijgend(reeks_int), ""gegeven reeks is niet stijgend""
    reeks_int_verh_tuple = verhogen(reeks_int)
    frequentiereeks_int_verh_tuple = verhogen(frequentiereeks(reeks_int))
    return reeks_int_verh_tuple, frequentiereeks_int_verh_tuple
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Chloe De Noble/complementaire-reeksen.py"",""fullName"":""Chloe De Noble"",""id"":""12094"",""status"":""correct"",""submissionID"":""6360727"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T12:57:45.000Z"",""labels"":""bcbt""}"
915,/home/maxiem/Downloads/files/Elise Moelaert/complementaire-reeksen.py,"def stijgend(lijst):
    i = 0
    waar = 0
    for i in range(len(lijst)-1):
        if lijst[i] <= lijst[i+1]:
            waar += 1
            i += 1
        else:
            i += 1
    if waar == (len(lijst) - 1):
        return True
    else:
        return False

def verhogen(lijst):
    i = 0
    x = 0
    nieuwe_reeks = []
    for i in range(len(lijst)):
        x = lijst[i]+(i+1)
        nieuwe_reeks += [x]
    return nieuwe_reeks
    
def frequentiereeks(getallen):
    x = list(getallen)
    l = []
    waarde = 1
    if stijgend(getallen) == True:
        for _ in range(0, int(x[-1]) + 1):
            count = 0
            for i in x:
                if i < waarde:
                    count += 1
            l.append(count)
            waarde += 1
    else:
        assert False, ""gegeven reeks is niet stijgend""
    return l
    
def complementaire_reeksen(getallen):
    x = tuple(getallen)
    y = ()
    eerste = verhogen(x)
    tweede = frequentiereeks(x)
    tweede = verhogen(tweede)
    y = eerste, tweede
    return y

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( formal_parameters ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Elise Moelaert/complementaire-reeksen.py"",""fullName"":""Elise Moelaert"",""id"":""12111"",""status"":""correct"",""submissionID"":""6422002"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T18:24:09.000Z"",""labels"":""bcbt""}"
916,/home/maxiem/Downloads/files/Jasper Sey/complementaire-reeksen.py,"def stijgend(reeks):
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))
def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    freq, waarde, aantal = [], 0, 0
    for getal in reeks:
        while waarde < getal:
            freq.append(aantal)
            waarde += 1
        aantal += 1
    freq.append(aantal)
    return freq
def verhogen(reeks):
    return [element + positie + 1 for positie, element in enumerate(reeks)]
def complementaire_reeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( call_expression ( call_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Jasper Sey/complementaire-reeksen.py"",""fullName"":""Jasper Sey"",""id"":""12980"",""status"":""correct"",""submissionID"":""6422883"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:16:37.000Z"",""labels"":""chem""}"
917,/home/maxiem/Downloads/files/Arne Maene/complementaire-reeksen.py,"def stijgend(reeks):
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))
def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    freq, waarde, aantal = [], 0, 0
    for i in reeks:
        while waarde < i:
            freq.append(aantal)
            waarde += 1
        aantal += 1
    freq.append(aantal)
    return freq
def verhogen(reeks):
    return [element + index + 1 for index, element in enumerate(reeks)]
def complementaire_reeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( call_expression ( call_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Arne Maene/complementaire-reeksen.py"",""fullName"":""Arne Maene"",""id"":""12981"",""status"":""correct"",""submissionID"":""6367858"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T18:19:39.000Z"",""labels"":""geol""}"
918,/home/maxiem/Downloads/files/Phileas Massün/complementaire-reeksen.py,"def stijgend(reeks):
    counter = 0
    for i in range(0,len(reeks)-1):
        if reeks[i] <= reeks[i+1]:
            counter += 1
        else:
            counter = counter
    if counter == len(reeks) - 1:
        stijgend = True
    else:
        stijgend = False
    return stijgend

def frequentiereeks(reeks):
    frequentiereeks = []
    counter = 0
    if not stijgend(reeks):
        assert (stijgend(reeks) == True),'gegeven reeks is niet stijgend'
    else:
        for i in range(max(reeks)+1):
            for j in range (len(reeks)):
                if int(reeks[j]) < i + 1:
                    counter += 1
                else:
                    counter = counter
            frequentiereeks.append(counter)
            counter = 0
    return frequentiereeks

def verhogen(reeks):
    verhoogdereeks = []
    for i in range(len(reeks)):
        getal = reeks[i] + (i + 1)
        verhoogdereeks.append(getal)
    return verhoogdereeks

def complementaire_reeksen(reeks):
        verhoogdereeks = []

        frequentiereks = frequentiereeks(reeks)

        for i in range(len(frequentiereks)):
            getal = frequentiereks[i] + (i + 1)

            verhoogdereeks.append(getal)

        return (verhogen(reeks),verhoogdereeks)

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ),"{""filename"":""Phileas Massün/complementaire-reeksen.py"",""fullName"":""Phileas Massün"",""id"":""12982"",""status"":""correct"",""submissionID"":""6368121"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T18:55:21.000Z"",""labels"":""fyss""}"
919,/home/maxiem/Downloads/files/Thomas Vandenbergh/complementaire-reeksen.py,"def stijgend(reeks):
    stijgen = list(reeks)
    stijgen.sort()
    return stijgen == list(reeks)

def frequentiereeks(reeks):
    Voorwaarde = stijgend(reeks)
    assert str(Voorwaarde) != 'False', ""gegeven reeks is niet stijgend""
    lijst = []
    reekslijst = list(reeks)
    for i in range(reekslijst[len(reekslijst)-1] + 1):
        aantal = 0
        for a in reekslijst:
            if i + 1 > a:
                aantal += 1
        lijst += [aantal]
    return lijst
    
def verhogen(reeks):
    lijst = list(reeks)
    a = 1
    for index, waarde in enumerate(lijst):
        lijst[index] = lijst[index] + a
        a +=1 
    return lijst
    
def complementaire_reeksen(reeks):
    Voorwaarde = stijgend(reeks)
    assert str(Voorwaarde) != 'False', ""gegeven reeks is niet stijgend""
    verhoogd = verhogen(reeks)
    frequentie = frequentiereeks(reeks)
    complement = verhogen(frequentie)
    return verhoogd, complement",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( return_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Thomas Vandenbergh/complementaire-reeksen.py"",""fullName"":""Thomas Vandenbergh"",""id"":""12983"",""status"":""correct"",""submissionID"":""6396873"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T23:05:10.000Z"",""labels"":""fyss""}"
920,/home/maxiem/Downloads/files/Iris Picalausa/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    return all(reeks[i] <= reeks[i+1] for i in range(len(reeks)-1))


def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    reeks1 = []
    waarde = 0
    aantal = 0
    for getal in reeks:
        while waarde < getal:
            reeks1.append(aantal)
            waarde += 1
        aantal += 1
    reeks1.append(aantal)
    return reeks1


def verhogen(reeks):
    reeks2 = []
    for positie, getal in enumerate(reeks):
        reeks2.append(positie + getal + 1)
    return reeks2


def complementaire_reeksen(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Iris Picalausa/complementaire-reeksen.py"",""fullName"":""Iris Picalausa"",""id"":""12984"",""status"":""correct"",""submissionID"":""6358653"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T10:43:43.000Z"",""labels"":""geol""}"
921,/home/maxiem/Downloads/files/Rune Devriendt/complementaire-reeksen.py,"def stijgend(reeks):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    >>> stijgend((2, 3, 5, 7, 11, 13, 12))
    False
    '''

    for i, e in enumerate(reeks[1:]):

        if not reeks[i] <= e:
            return False
    return True
def frequentiereeks(reeks):

    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    list = []
    for x in range(1, max(reeks) + 2):

        list.append(sum(1 for i in reeks if i < x))
    return list
def verhogen(reeks):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    nieuwe_reeks = list(x + (i + 1) for i, x in enumerate(reeks))
    return nieuwe_reeks
def complementaire_reeksen(reeks):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    reeks02 = verhogen(frequentiereeks(reeks))
    reeks01 = verhogen(reeks)
    return(reeks01, reeks02)












",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( ERROR ( number ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Rune Devriendt/complementaire-reeksen.py"",""fullName"":""Rune Devriendt"",""id"":""12978"",""status"":""correct"",""submissionID"":""6417136"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T14:20:16.000Z"",""labels"":""fyss""}"
922,/home/maxiem/Downloads/files/Kimberly Demeestere/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(lijst):
    lijst_stijgend = sorted(lijst)
    return bool(lijst_stijgend == list(lijst))


def frequentiereeks(lijst):
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    lijst = sorted(lijst)
    frequentielijst = []
    aantal_cijfer = 0
    for cijfer in range(0, lijst[-1]):
        aantal_cijfer += lijst.count(cijfer)
        frequentielijst.append(aantal_cijfer)
    aantal_cijfer += lijst.count(lijst[-1])
    frequentielijst.append(aantal_cijfer)
    return frequentielijst


def verhogen(lijst):
    verhoogde_lijst = []
    for index, element in enumerate(lijst):
        verhoogde_lijst.append(element + 1 + index)
    return verhoogde_lijst


def complementaire_reeksen(lijst):
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    verhoogde_lijst = verhogen(lijst)
    frequentielijst = frequentiereeks(lijst)
    verhoogde_frequentielijst = verhogen(frequentielijst)
    return verhoogde_lijst, verhoogde_frequentielijst
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Kimberly Demeestere/complementaire-reeksen.py"",""fullName"":""Kimberly Demeestere"",""id"":""12986"",""status"":""correct"",""submissionID"":""6402847"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T14:40:59.000Z"",""labels"":""geol""}"
923,/home/maxiem/Downloads/files/Hilke De Rouck/complementaire-reeksen.py,"def stijgend(lijst):
    lijst = list(lijst)
    if sorted(lijst) == lijst:
        return True
    return False

def frequentiereeks(lijst):
    if stijgend(lijst) is not True:
        assert False, 'gegeven reeks is niet stijgend'
    m = max(lijst)
    nieuwe_lijst = []
    for i in range(1, m + 2):
        aantal = 0
        for getal in lijst:
            if getal < i:
                aantal += 1
        nieuwe_lijst.append(aantal)
    return nieuwe_lijst

def verhogen(lijst):
    positie = 1
    nieuwe_lijst = []
    for i in lijst:
        nieuw_getal = i + positie
        nieuwe_lijst.append(nieuw_getal)
        positie += 1
    return nieuwe_lijst

def complementaire_reeksen(lijst) -> tuple:
    if stijgend(lijst) is not True:
        assert False, 'gegeven reeks is niet stijgend'
    verhoogd = verhogen(lijst)
    frequentie = frequentiereeks(lijst)
    freq_verhoogd = verhogen(frequentie)
    return verhoogd, freq_verhoogd",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Hilke De Rouck/complementaire-reeksen.py"",""fullName"":""Hilke De Rouck"",""id"":""12096"",""status"":""correct"",""submissionID"":""6359299"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T11:50:56.000Z"",""labels"":""bcbt""}"
924,/home/maxiem/Downloads/files/Robin Chan/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    for i in range(len(reeks) - 1):
        if not reeks[i] <= reeks[i + 1]:
            return False

    return True

def frequentiereeks(reeks):
    """"""

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    if not stijgend(reeks):
        raise AssertionError(""gegeven reeks is niet stijgend"")

    nieuw = []
    for i in range(reeks[-1] + 1):
        i += 1
        e = 0
        if i - 1 == reeks[-1]:
            nieuw.append(len(reeks))
        else:
            while reeks[e] < i:
                e += 1
            nieuw.append(e)

    return nieuw

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    nieuw = []
    for i in enumerate(reeks):
        element = i[1] + i[0] + 1
        nieuw.append(element)

    return nieuw

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    return verhogen(reeks), verhogen(frequentiereeks(reeks))


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Robin Chan/complementaire-reeksen.py"",""fullName"":""Robin Chan"",""id"":""12990"",""status"":""correct"",""submissionID"":""6344505"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T12:40:36.000Z"",""labels"":""fyss""}"
925,/home/maxiem/Downloads/files/Leontine Van Der Heyden/complementaire-reeksen.py,"def stijgend(nummers):
    nummers = list(nummers)
    origineel = list(nummers)
    nummers.sort()
    return nummers == origineel
    
def frequentiereeks(nummers):
    assert stijgend(nummers),""gegeven reeks is niet stijgend""
    aantal = 0
    nieuw = []
    for i in range(max(nummers) + 1):
        if i in nummers:
            aantal += nummers.count(i)
            nieuw.append(aantal)
        else:
            nieuw.append(aantal)
        
    return nieuw
    
def verhogen(nummers):
    nieuw = []
    x = 1
    for i in nummers:
        nieuw.append(i + x)
        x += 1
    return nieuw
    
def complementaire_reeksen(nummers):
    eerste = nummers
    tweede = frequentiereeks(nummers)
    
    return verhogen(eerste), verhogen(tweede)
            ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( return_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ),"{""filename"":""Leontine Van Der Heyden/complementaire-reeksen.py"",""fullName"":""Leontine Van Der Heyden"",""id"":""7981"",""status"":""correct"",""submissionID"":""6382425"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T09:55:17.000Z"",""labels"":""fyss""}"
926,/home/maxiem/Downloads/files/Jasper Demaertelaere/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(1, len(reeks)):
        if reeks[i] < reeks[i-1]:
            return False
    return True


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    freq_reeks = []
    for i in range (1, max(reeks)+2):
        count = 0
        positie = 0
        while reeks[positie] < i and positie < len(reeks)-1:
            count += 1
            positie += 1
        freq_reeks.append(count)
    freq_reeks[-1] += 1
    return freq_reeks


def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    reeks = list(reeks)
    for i in range(len(reeks)):
        reeks[i] += i+1
    return reeks


def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    reeks1 = verhogen(reeks)
    reeks2 = verhogen(frequentiereeks(reeks))
    return reeks1, reeks2


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Jasper Demaertelaere/complementaire-reeksen.py"",""fullName"":""Jasper Demaertelaere"",""id"":""12995"",""status"":""correct"",""submissionID"":""6356547"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T20:11:20.000Z"",""labels"":""fyss""}"
927,/home/maxiem/Downloads/files/Jitse Van Nueten/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    x = 0
    vorige = 0
    for element in reeks:
        if element < vorige:
            x += 1
        vorige = element
    return bool(x == 0)


def frequentiereeks(reeks):
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    m = int(reeks[-1]) + 1
    lijst = []
    for i in range(m):
        x = 0
        for element in reeks:
            if element < i + 1:
                x += 1
        lijst.append(x)
    return lijst


def verhogen(reeks):
    i = 0
    lijst = []
    while i < len(reeks):
        x = int(reeks[i]) + i + 1
        i += 1
        lijst.append(x)
    return lijst


def complementaire_reeksen(reeks):
    assert stijgend(reeks) == True, 'gegeven reeks is niet stijgend'
    verhoog = verhogen(reeks)
    comp = []
    for i in range(verhoog[-1] + 1):
        x = i + 1
        if x not in verhoog:
            comp.append(x)
    return verhoog,comp",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( identifier ) ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Jitse Van Nueten/complementaire-reeksen.py"",""fullName"":""Jitse Van Nueten"",""id"":""12997"",""status"":""correct"",""submissionID"":""6357865"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T08:42:17.000Z"",""labels"":""fyss""}"
928,/home/maxiem/Downloads/files/Catharina Van Laethem/complementaire-reeksen.py,"def stijgend(lijst_getallen):
    lijst_getallen = list(lijst_getallen)
    if  (sorted(lijst_getallen,key=int, reverse=False)) == lijst_getallen:
        return True
    return False

def frequentiereeks(lijst_getallen):
    if stijgend(lijst_getallen) != True:
        assert False, 'gegeven reeks is niet stijgend'
    grootste_getal = max(lijst_getallen)
    aantal = 0
    nieuwe_lijst = []
    stijgend(lijst_getallen)
    for i in range(1, grootste_getal + 2):
        aantal = 0
        for getal in lijst_getallen:
            if getal < i:
                aantal += 1
            else:
                aantal == 0
        nieuwe_lijst.append(aantal)
    return(nieuwe_lijst)

def verhogen(lijst_getallen):
    positie = 1
    nieuwe_lijst = []
    for i in lijst_getallen:
        nieuwgetal = i + positie
        nieuwe_lijst.append(nieuwgetal)
        positie += 1
    return nieuwe_lijst


def complementaire_reeksen(lijst_getallen):
    lijst_getallen_verhoogd = verhogen(lijst_getallen)
    lijst_getallen_frequentie = frequentiereeks(lijst_getallen)
    lijst_getallen_frequentie_verhoogd = verhogen(lijst_getallen_frequentie)
    return (lijst_getallen_verhoogd, lijst_getallen_frequentie_verhoogd)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( if_statement ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Catharina Van Laethem/complementaire-reeksen.py"",""fullName"":""Catharina Van Laethem"",""id"":""11841"",""status"":""correct"",""submissionID"":""6347779"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T16:06:21.000Z"",""labels"":""bcbt""}"
929,/home/maxiem/Downloads/files/Cédric Lemense/complementaire-reeksen.py,"def stijgend(lijst):

    lengte = len(lijst)

    getal = 0

    for i in range(1,lengte):

        if int(lijst[i]) < int(lijst[i-1]):

            getal += 1

        else:

            getal = getal

    if getal != 0 :

        return False

    else:

        return True

def frequentiereeks(lijst):

    assert(stijgend(lijst) == True), 'gegeven reeks is niet stijgend'

    nlijst = []

    kleinerdan = 0

    p = 12356453667653

    for i in lijst:

        if i > 0 and i != p:

                for t in range(i-len(nlijst)):

                    nlijst.append(kleinerdan)

        else:
            
            nlijst = nlijst
        kleinerdan += 1
        if kleinerdan == len(lijst):
            nlijst.append(kleinerdan)
        else:
            nlijst = nlijst
        p = i
            
    return nlijst

def verhogen(lijst):

    nlijst = []

    optelling = 1

    for i in lijst:

        nlijst.append(i + optelling)

        optelling += 1

    return nlijst

def complementaire_reeksen(lijst):

    nlijst1 = verhogen(lijst)

    nlijst2 = frequentiereeks(lijst)

    nlijst2 = verhogen(nlijst2)

    nlijst3 = (nlijst1, nlijst2)

    return nlijst3
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Cédric Lemense/complementaire-reeksen.py"",""fullName"":""Cédric Lemense"",""id"":""12998"",""status"":""correct"",""submissionID"":""6413145"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T11:02:40.000Z"",""labels"":""fyss""}"
930,/home/maxiem/Downloads/files/Lowie Verschelden/complementaire-reeksen.py,"def increasing(list):

    grootste = list[0]
    i = 1

    while i<len(list):
        if list[i] < grootste:
            return False
        grootste = list[i]
        i+=1
    return True

def frequency_sequence(list):
    assert increasing(list) == True, ""given sequence is not increasing""
    m = list[-1]+2
    lijst = []
    for x in range(1, m):
        count = 0
        for n in list:
            if n<x:
                count+=1
        lijst.append(count)
    return lijst

def lift(lijst):
    liftje = []
    for index, nummer in enumerate(lijst):
        liftje.append(index+nummer+1)
    return liftje

def complementary_sequences(lijst):
    assert increasing(lijst) == True, ""given sequence is not increasing""
    liftje = lift(lijst)
    freq = lift(frequency_sequence(lijst))
    tup = (liftje, freq)
    return tup
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Lowie Verschelden/complementaire-reeksen.py"",""fullName"":""Lowie Verschelden"",""id"":""12993"",""status"":""correct"",""submissionID"":""6362020"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T13:22:46.000Z"",""labels"":""keuz""}"
931,/home/maxiem/Downloads/files/Louise Deprez/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(getallen):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    lijst = list(getallen)
    #kopie van de lijst maken om een geordende lijst van te maken
    stijgendelijst = lijst[:]
    stijgendelijst.sort()
    if lijst == stijgendelijst:
        return True
    else:
        return False


def frequentiereeks(getallen):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(getallen), ""gegeven reeks is niet stijgend""

    reeks = []
    for i in range(1,getallen[-1]+2):
        aantal = 0
        for getal in getallen:
            if getal < i:
                aantal += 1
        reeks.append(aantal)

    return reeks


def verhogen(getallen):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst_verhoging = []
    for i in range(len(getallen)):
        verhoging = getallen[i] + i + 1
        lijst_verhoging.append(verhoging)
    return lijst_verhoging


def complementaire_reeksen(getallen):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(getallen), ""gegeven reeks is niet stijgend""

    return (verhogen(getallen), verhogen(frequentiereeks(getallen)))


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ( binary_expression ( identifier ) ( identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ( sequence_expression ( call_expression ( string ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( array ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( string ) ( assignment_expression ( identifier ) ( binary_expression ( array ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ( sequence_expression ( call_expression ( string ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( string ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( identifier ) ) ( string ) ) ) ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Louise Deprez/complementaire-reeksen.py"",""fullName"":""Louise Deprez"",""id"":""13010"",""status"":""correct"",""submissionID"":""6342861"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T08:45:57.000Z"",""labels"":""doct""}"
932,/home/maxiem/Downloads/files/Ian Van Lierde/complementaire-reeksen.py,"def stijgend(lijst):
    lijst = list(lijst)
    gesorteerd = sorted(lijst)
    if gesorteerd == lijst:
        stijgend = True
    else:
        stijgend = False
    return stijgend
def frequentiereeks(getallen):
    if stijgend(getallen) == False:
        assert False, ""gegeven reeks is niet stijgend""
    nieuwe_lijst = []
    plaats = 0
    aantal = 0
    for i in getallen:
        while plaats < i:
            nieuwe_lijst.append(aantal)
            plaats += 1
        aantal += 1
    nieuwe_lijst.append(aantal)
    return nieuwe_lijst
def verhogen(lijst):
    lijst = list(lijst)
    nieuwe_lijst = []
    plaats = 1
    for i in range(len(lijst)):
        getal = lijst[i] + plaats
        plaats += 1
        nieuwe_lijst.append(getal)
    return nieuwe_lijst
def complementaire_reeksen(lijst):
    if stijgend(lijst) == False:
        assert False, ""gegeven reeks is niet stijgend""
    lijst2 = frequentiereeks(lijst)
    lijst2 = list(lijst2)
    plaats = 1
    nieuwe_lijst = []
    for i in range(len(lijst2)):
        getal = lijst2[i] + plaats
        plaats += 1
        nieuwe_lijst.append(getal)
    return (verhogen(lijst), nieuwe_lijst)

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ),"{""filename"":""Ian Van Lierde/complementaire-reeksen.py"",""fullName"":""Ian Van Lierde"",""id"":""13030"",""status"":""correct"",""submissionID"":""6386409"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T16:59:31.000Z"",""labels"":""geol""}"
933,/home/maxiem/Downloads/files/Kiano De Ridder/complementaire-reeksen.py,"def stijgend(reeks):
    getal = 0
    for i in reeks:
        if not i >= getal:
            return False
        getal = i
    return True

def GeefAantalKleiner(lijst, getal):
    nummer = 0
    for i in lijst:
        if i <= getal:
            nummer += 1
        if i > getal:
            return nummer
    return nummer

def frequentiereeks(reeks):
    if not stijgend(reeks):
        raise AssertionError('gegeven reeks is niet stijgend')
    LaatsteGetal = reeks[-1]
    LaatsteGetal += 1
    lijst = []
    for i in range(LaatsteGetal):
        lijst.append(GeefAantalKleiner(reeks, i))
    return lijst

def verhogen(reeks):
    getal = 1
    lijst = []
    for i in reeks:
        lijst.append(i + getal)
        getal += 1
    return lijst

def complementaire_reeksen(reeks):
    p = verhogen(reeks)
    z = frequentiereeks(reeks)
    z = verhogen(z)
    return p, z",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Kiano De Ridder/complementaire-reeksen.py"",""fullName"":""Kiano De Ridder"",""id"":""13032"",""status"":""correct"",""submissionID"":""6422533"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T18:55:53.000Z"",""labels"":""chem""}"
934,/home/maxiem/Downloads/files/Benjamin Dhaenens/complementaire-reeksen.py,"def stijgend(pn):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    if type(pn) != list:
        pn = list(pn)
    return bool(pn == sorted(pn))
def frequentiereeks(pn):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(pn), 'gegeven reeks is niet stijgend'
    if type(pn) != list:
        pn = list(pn)
    l = pn[-1] + 1
    li = []
    for x in range(1, l + 1):
        li.append(sum(i < x for i in pn))
    return li

def verhogen(pn):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    if type(pn) != list:
        pn = list(pn)
    li = []
    for x in range(len(pn)):
        li.append(x + pn[x] + 1)
    return li
def complementaire_reeksen(pn):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(pn), 'gegeven reeks is niet stijgend'
    return verhogen(pn), verhogen(frequentiereeks(pn))
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Benjamin Dhaenens/complementaire-reeksen.py"",""fullName"":""Benjamin Dhaenens"",""id"":""13033"",""status"":""correct"",""submissionID"":""6369252"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T21:08:35.000Z"",""labels"":""chem""}"
935,/home/maxiem/Downloads/files/Nicholas Slos/complementaire-reeksen.py,"def stijgend (reeks):
    return all(reeks[i] <= reeks[i+1] for i in range(len(reeks) - 1 ))

def frequentiereeks (reeks):
    frequentie = []
    waarde = 0
    aantal = 0
    for getal in reeks:
        while waarde < getal:
            frequentie.append(aantal)
            waarde += 1
        aantal += 1
    return frequentie

def verhogen (reeks):
    return [element + positie + 1 for positie, element in enumerate (reeks)]

def complementairereeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( array ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Nicholas Slos/complementaire-reeksen.py"",""fullName"":""Nicholas Slos"",""id"":""13034"",""status"":""runtime error"",""submissionID"":""6414780"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T13:13:07.000Z"",""labels"":""chem""}"
936,/home/maxiem/Downloads/files/Robbert Decruyenaere/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for ind, n in enumerate(lijst[:-1]):
        if n > lijst[ind + 1]:
            return False
    return True


def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    freq = []
    count = 0
    for n in range(1, lijst[-1] + 2):
        for x in lijst:
            if x < n:
                count += 1
        freq.append(count)
        count = 0
    return freq


def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = list(lijst)
    for ind, n in enumerate(lijst):
        lijst[ind] = n + 1 + ind
    return lijst


def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(lijst), verhogen(frequentiereeks(lijst))

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Robbert Decruyenaere/complementaire-reeksen.py"",""fullName"":""Robbert Decruyenaere"",""id"":""13038"",""status"":""correct"",""submissionID"":""6377981"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:24:41.000Z"",""labels"":""fyss""}"
937,/home/maxiem/Downloads/files/Emiel Botterman/complementaire-reeksen.py,"def lijst(reeks):
    #maakt lijst van lijst of tuple
    lijst = []
    for index in reeks:
        lijst.append(index)

    return lijst



def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    controle = lijst(reeks)
    controle.sort()

    return bool(controle == lijst(reeks))

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    lijst = []
    kleiner = 0

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    for i in range(1, reeks[-1] + 2):
        for n in reeks:
            if i > n:
                kleiner += 1
        lijst.append(kleiner)
        kleiner = 0

    return lijst

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lijst = []
    n = 1
    for i in reeks:
        lijst.append(i + n)
        n += 1

    return lijst

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    return verhogen(reeks) , verhogen(frequentiereeks(reeks))


if __name__ == '__main__':
    import doctest

    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Emiel Botterman/complementaire-reeksen.py"",""fullName"":""Emiel Botterman"",""id"":""11863"",""status"":""correct"",""submissionID"":""6326045"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-07T12:38:20.000Z"",""labels"":""fyss""}"
938,/home/maxiem/Downloads/files/Emma Van Valckenborgh/complementaire-reeksen.py,"def stijgend(reeks):
    a = 0
    b = 1
    while reeks[a] <= reeks[b]:
        oplossing = True
        a += 1
        b += 1
        if b == len(reeks):
            break
    else:
        oplossing = False
    return oplossing

def frequentiereeks(reeks):
    nummer = 0
    freeks = []
    b = reeks[-1] + 1
    if stijgend(reeks) is not True:
        raise AssertionError(""gegeven reeks is niet stijgend"")
    for i in range(1, b+1):
        count = len([a for a in reeks if a <= nummer])
        freeks.append(count)
        nummer += 1
    return freeks

def verhogen(reeks):
    nummer = 1
    nreeks = []
    for i in reeks:
        nreeks.append(i+nummer)
        nummer += 1
    return nreeks

def complementaire_reeksen(reeks):
    if stijgend(reeks) is not True:
        raise AssertionError(""gegeven reeks is niet stijgend"")
    tuple = (verhogen(reeks), verhogen(frequentiereeks(reeks)))
    return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( break_statement ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Emma Van Valckenborgh/complementaire-reeksen.py"",""fullName"":""Emma Van Valckenborgh"",""id"":""12109"",""status"":""correct"",""submissionID"":""6372003"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T10:19:11.000Z"",""labels"":""bcbt""}"
939,/home/maxiem/Downloads/files/Robbe Van de Keere/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    return sorted(list(reeks)) == list(reeks)


def frequentiereeks(reeks):
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    freqreeks, count = [], 0
    for i in range(reeks[-1]+1):
        if i in reeks:
            count += reeks.count(i)
        freqreeks.append(count)
    return freqreeks


def verhogen(reeks):
    verh, count = [], 0
    for i in reeks:
        count += 1
        verh.append(i+count)
    return verh


def complementaire_reeksen(reeks):
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Robbe Van de Keere/complementaire-reeksen.py"",""fullName"":""Robbe Van de Keere"",""id"":""13041"",""status"":""correct"",""submissionID"":""6419874"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T16:10:05.000Z"",""labels"":""fyss""}"
940,/home/maxiem/Downloads/files/Jan Malderie/complementaire-reeksen.py,"def stijgend(lijst):
    n = 0
    for i in range(len(lijst)-1):
        if lijst[i] <= lijst[i + 1]:
            n += 1
        else:
            return False
    return True
def frequentiereeks(reeks):
    getal = int(reeks[-1]+1)
    frequentie = []
    for x in range(0, getal):
        tel = 0
        for n in range(len(reeks)):
            if reeks[n] < x + 1:
                tel += 1
        frequentie.append(tel)
        tel = 0
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    return frequentie

def verhogen(lijst):
    lijst_verhogen = []
    tel = 0
    for x in range(0,len(lijst)):
        tel += ((x + 1) + lijst[x])
        lijst_verhogen.append(tel)
        tel = 0
    return lijst_verhogen
def complementaire_reeksen(lijst):
    lijst_freq = frequentiereeks(lijst)
    getal = int(lijst[-1]) + 1
    lijst_verhoging = []
    for i in range(0,getal):
        lijst_verhoging.append(lijst_freq[i] + (i + 1))
    tuple = (verhogen(lijst), lijst_verhoging)
    assert stijgend(lijst), 'gegeven reekst is niet stijgend'
    return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Jan Malderie/complementaire-reeksen.py"",""fullName"":""Jan Malderie"",""id"":""13044"",""status"":""correct"",""submissionID"":""6422851"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:14:30.000Z"",""labels"":""bcbt""}"
941,/home/maxiem/Downloads/files/Muhammad Khuzaifa Naveed/complementaire-reeksen.py,"def increasing(seq):

    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    ans = False
    for i in range(len(seq)-1):
        ans = bool(seq[i] <= seq[i+1])
        if not ans:
            return False

    return ans

def frequency_sequence(seq):

    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(seq), 'given sequence is not increasing'

    ans =[]
    for i in range(max(seq)+1):
        c = 0
        for a in seq:
            if a < (i+1):
                c += 1
        ans.append(c)

    return ans

def lift(seq):

    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    ans =[]
    for i, n in enumerate(seq):
        ans.append(int(i)+n+1)

    return ans

def complementary_sequences(seq):
    a = lift(seq)
    b = lift(frequency_sequence(seq))

    return a, b

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Muhammad Khuzaifa Naveed/complementaire-reeksen.py"",""fullName"":""Muhammad Khuzaifa Naveed"",""id"":""13047"",""status"":""correct"",""submissionID"":""6377218"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:36:00.000Z"",""labels"":""fyss""}"
942,/home/maxiem/Downloads/files/Britt Dedoelder/complementaire-reeksen.py,"# stijgend = OK
def stijgend(getallen):
    ok = 0
    for i in range(len(getallen) - 1):
        if getallen[i] <= getallen[i+1]:
            ok += 1
        else:
            return False

        if ok == len(getallen)-1:
            return True

# frequentiereeks = niet OK (probleem assert)
#vragen wat er fout is met de assert
def frequentiereeks(getallen):
    assert stijgend(getallen), ""gegeven reeks is niet stijgend""

    lijst = []
    #lus voor elke x
    for x in range(1, int(getallen[-1]) + 2):
        a = 0
        #kijken hoeveel getallen er kleiner zijn dan x
        for i in range(len(getallen)):
            if getallen[i] < x:
                a += 1
        lijst.append(a)

    return lijst

#verhogen = OK
def verhogen(getallen):
    # nieuwe lijst maken posities
    lijst = []
    for _ in range(1, len(getallen) + 2):
        lijst.append(_)
    res = [getal + positie for getal in getallen for positie in lijst]

    einde = res[::len(getallen)+2]

    return einde

#complementaire_reeksen = niet OK
# probleem assert vragen
def complementaire_reeksen(getallen):
    assert stijgend(getallen), ""gegeven reeks is niet stijgend""

    nieuwe_lijst1 = verhogen(getallen)
    nieuwe_lijst2 = verhogen(frequentiereeks(getallen))

    return (nieuwe_lijst1, nieuwe_lijst2)
",( program ( ERROR ( ERROR ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Britt Dedoelder/complementaire-reeksen.py"",""fullName"":""Britt Dedoelder"",""id"":""12055"",""status"":""correct"",""submissionID"":""6360018"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T12:33:12.000Z"",""labels"":""bcbt""}"
943,/home/maxiem/Downloads/files/Sarah Broos/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639

def stijgend(lijst):
    """"""
    functie stijgend die een Booleaanse waarde (bool) teruggeeft die aangeeft of de getallen
    in de gegeven reeks al dan niet stijgend zijn. Daarbij is het dus wel toegelaten dat er dubbels voorkomen
    (met andere woorden: je moet niet nagaan of de reeks strikt stijgend is)

    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    lijst = list(lijst)

    if lijst == sorted(lijst):
        return True
    else:
        return False

def frequentiereeks(lijst):
    """"""
    functie frequentiereeks die een nieuwe lijst (list)  teruggeeft met de getallen (int) van de
    frequentiereeks van de gegeven reeks. Indien de gegeven reeks niet stijgend is, dan moet de functie
    een AssertionError opwerpen met de boodschap gegeven reeks is niet stijgend.

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    #zeker van zijn dat we met lijsten werken en niet tuple
    lijst = list(lijst)
    #controleren of de reeks stijgend is
    assert stijgend(lijst), 'gegeven reeks is niet stijgend'

    #lijst aanpassen  met m+1
    lijst.append(lijst[-1]+1)

    #nieuwe lijst obv de frequentie van de getallen in de lijst
    #nieuwelijst = [waarde for index, waarde in enumerate(lijst)]

    nieuwelijst = [0]* lijst[0]
    vergelijk = lijst[0]+1


    while vergelijk-1 != lijst[-1]:
        aantal = 0

        for waarde in lijst:
            if waarde < vergelijk:
                aantal += 1

        nieuwelijst.append(aantal)
        vergelijk += 1

    return nieuwelijst

def verhogen(lijst):
    """"""
    Een functie verhogen die een nieuwe lijst (list) teruggeeft die de getallen (int) van de gegeven
    reeks bevat, maar telkens verhoogd overeenkomstig hun positie in de gegeven reeks — dat is 1 opgeteld
    bij het eerste getal van de gegeven reeks, 2 bij het tweede getal, enzoverder

    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    #lijst met getallen maken van 1 tot lengte lijst
    verh = list(range(len(lijst)+1))
    verh.remove(0)

    #legelijst maken waar nieuwe waardes in opgeslagen worden
    nieuwlijst = []
    #vermenigvuldeging uitvoeren
    for index, waarde in enumerate(verh):
        nieuwlijst.append(lijst[index]+waarde)
    return nieuwlijst



def complementaire_reeksen(lijst):
    """"""
    Een functie complementaire_reeksen die een tuple teruggeeft. Het eerste element van dit tuple is een
    nieuwe lijst (list) met de getallen (int) van de gegeven reeks die verhoogd werden overeenkomstig hun
    positie in de reeks. Het tweede element van het tuple is een nieuwe lijst (list) met de frequentiereeks
     van de gegeven reeks, waarvan de getallen (int) verhoogd werden overeenkomstig hun positie in de
     reeks. Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen
     met de boodschap gegeven reeks is niet stijgend.

    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    lijstA = verhogen(lijst)
    lijstB = verhogen(frequentiereeks(lijst))
    complement = lijstA,lijstB
    return complement


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( member_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( property_identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ) ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( member_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( property_identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Sarah Broos/complementaire-reeksen.py"",""fullName"":""Sarah Broos"",""id"":""13050"",""status"":""correct"",""submissionID"":""6377134"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T14:32:00.000Z"",""labels"":""keuz""}"
944,/home/maxiem/Downloads/files/Antoni Van den Camp/complementaire-reeksen.py,"# Functie 'stijgend' definiëren welke een waarheidswaarde (gegevenstype bool) teruggeeft 
# deze teruggegeven waarde geldt als indicatie of de getallen in de gegeven reeks al dan niet stijgend zijn 
# er wordt niet gevraagd naar stijgen in de strikte zin 

# elk getal in de reeks moet dus kleiner of gelijk zijn aan het volgende getal in de respectieve reeks 
def stijgend(reeks):

    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    return all(reeks[i] <= reeks[i+1] for i in range(len(reeks)-1))


# Functie 'frequentiereeks' definiëren welke een nieuwe lijst (id est []) teruggeeft
# deze geretourneerde lijst moet de getallen van de frequentiereeks van de gegeven reeks bevatten
# de gedefinieerde functie moet een AssertionError opwerpen met de boodschap 'gegeven reeks is niet stijgend'

def frequentiereeks(reeks):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    frequentieReeks = []
    aantalGetallen = 0
    hetGetal = 0
    for getal in reeks:
        while hetGetal < getal:
            # op einde van frequentiereeks waarde van grootste getal vermeerderd met 1 toevoegen aan de lijst
            # deze toevoeging op het einde van de lijst kan geschieden aan de hand van de lijstmethode append()
            frequentieReeks.append(aantalGetallen)
            hetGetal += 1
        aantalGetallen += 1
    frequentieReeks.append(aantalGetallen)
    return frequentieReeks

# Functie 'verhogen' definiëren welke een nieuwe lijst (id est []) teruggeeft 
# deze geretourneerde lijst moet de getallen van de gegeven reeks bevatten 
# doch telkens verhoogd met die waarde welke correspondeert met hun positie in de gegeven reeks 

def verhogen(reeks):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    return [element + posElement + 1 for posElement, element in enumerate(reeks)]


# Functie complementaireReeksen definiëren welke een 2-tuple teruggeeft
# eerste element van tuple is een lijst van de getallen van de gegeven reeks, evenwel verhoogd overeenkomstig hun positie in de respectieve reeks
# tweede element van tuple is een lijst met de frequentiereeks van de gegeven reeks, evenwel verhoogd overeenkomstig hun positie in de respectieve reeks  

def complementaire_reeksen(reeks):


    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    return verhogen(reeks), verhogen(frequentiereeks(reeks))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ( identifier ) ( string ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Antoni Van den Camp/complementaire-reeksen.py"",""fullName"":""Antoni Van den Camp"",""id"":""11134"",""status"":""correct"",""submissionID"":""6396784"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T22:26:03.000Z"",""labels"":""fyss""}"
945,/home/maxiem/Downloads/files/Evelien Wynendaele/complementaire-reeksen.py,"def stijgend(reeks):

    """"""
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True

    """"""

    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))

def frequentiereeks(reeks):

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    assert stijgend(reeks), 'gegeven reeks is niet stijgend'

    frequentie = []
    waarde = 0
    aantal = 0

    for getal in reeks:
        while waarde < getal:
            frequentie.append(aantal)
            waarde += 1
        aantal += 1

    frequentie.append(aantal)

    return frequentie

def verhogen(reeks):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    nieuwe_lijst = []
    for index, element in enumerate(reeks):
        nieuwe_lijst.append(element + (index + 1))

    return nieuwe_lijst

def complementaire_reeksen(reeks):


    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    return verhogen(reeks), verhogen(frequentiereeks(reeks))

if __name__ == '__main__':
    import doctest
    print(doctest.testmod())",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Evelien Wynendaele/complementaire-reeksen.py"",""fullName"":""Evelien Wynendaele"",""id"":""1701"",""status"":""correct"",""submissionID"":""6378280"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:43:43.000Z"",""labels"":""keuz""}"
946,/home/maxiem/Downloads/files/Robbe Goethals/complementaire-reeksen.py,"def stijgend(reeks):
    for i in range(len(reeks)):
        if i+1 == len(reeks):
            return True
        if reeks[i] > reeks [i + 1] :
            return False
def frequentiereeks(reeks):
    aantal = 0
    lijst = []
    if stijgend(reeks) == False:
        raise AssertionError('gegeven reeks is niet stijgend')
    for i in range(1, reeks[-1] + 2):
        for l in range(len(reeks)):
            if reeks[l] < i:
                aantal += 1

        lijst.append(aantal)
        aantal = 0
    return lijst
def verhogen(reeks):
    l = 1
    lijst = []
    for i in range(len(reeks)):
        aantal = reeks[i] +l
        lijst.append(aantal)
        l += 1

    return lijst
def complementaire_reeksen(reeks):
    freq = frequentiereeks(reeks)
    freq = verhogen(freq)
    verhoog = verhogen(reeks)
    reeksen = (verhoog , freq)
    return reeksen",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Robbe Goethals/complementaire-reeksen.py"",""fullName"":""Robbe Goethals"",""id"":""13076"",""status"":""correct"",""submissionID"":""6363588"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T13:54:03.000Z"",""labels"":""chem""}"
947,/home/maxiem/Downloads/files/Ellen Veelaert/complementaire-reeksen.py,"def stijgend(reeks):
    i = 0
    a = 1
    while i + 1 < len(reeks):
        if reeks[i] <= reeks[i+1]:
            i+=1 
            a+=1
        else: 
            i += 1
    if a == len(reeks):
        return True
    else:
        return False 

def frequentiereeks(lijst):
    assert stijgend(lijst) != False, ""gegeven reeks is niet stijgend""
    reeks = []
    for i in range(1, max(lijst)+2):
        a = 0
        for p in lijst:
            if p < i:
                a+= 1
        reeks += [a]
        i += 1
        
    return reeks
    
def verhogen(oude):
    oude_lijst = list(oude)
    nieuwe_lijst = oude_lijst
    for i in range(len(oude_lijst)):
        nieuwe_lijst[i] = int(oude_lijst[i] +i+1)
        
    return nieuwe_lijst
    
def complementaire_reeksen(getallen):
    lijst_getallen = list(getallen)
    assert stijgend(lijst_getallen) != False, ""gegeven reeks is niet stijgend""
    lijst1 = verhogen(lijst_getallen)
    lijst2 = frequentiereeks(lijst_getallen)
    lijst4 = verhogen(lijst2)
    lijst3 = (lijst1 , lijst4)
    
    return lijst3
        
        
        
        
             
        
        
        
        ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Ellen Veelaert/complementaire-reeksen.py"",""fullName"":""Ellen Veelaert"",""id"":""12113"",""status"":""correct"",""submissionID"":""6415067"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T13:25:06.000Z"",""labels"":""bcbt""}"
948,/home/maxiem/Downloads/files/Isabelle Trenteseau/complementaire-reeksen.py,"def increasing(*sequence):
    if isinstance(sequence[0], list):
        return bool(sequence[0] == sorted(sequence[0]))
    else:
        length = len(sequence)
        liste = []
        for i in range(length):
            liste = liste.append(sequence[i])
        return bool(liste == sorted(liste))

def frequency_sequence(*sequence):
    if isinstance(sequence, tuple):
        length, liste = len(sequence), []
        for i in range(length):
            liste.append(sequence[i])
        sequence = liste
    new_list = []
    length = len(sequence)
    for i in range(length):
        count = map(lambda x : x < i, sequence)
        new_list = new_list.append(count)
    return new_list",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( ERROR ) ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ) ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( ERROR ) ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ( ERROR ( identifier ) ) ( sequence_expression ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( array ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Isabelle Trenteseau/complementaire-reeksen.py"",""fullName"":""Isabelle Trenteseau"",""id"":""13077"",""status"":""runtime error"",""submissionID"":""6413331"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T11:12:39.000Z"",""labels"":""biol""}"
949,/home/maxiem/Downloads/files/Axel Jünger/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    if all(i <= j for i, j in zip(lijst, lijst[1:])):
        return True
    return False

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([0, 1, 5, 8, 8])
    [1, 2, 2, 2, 2, 3, 3, 3, 5]
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    nieuwe_lijst = []
    teller = 0
    frequentie = 0
    grootste_getal = lijst[-1] + 1
    lijst = list(lijst)
    lijst.append(grootste_getal)

    if stijgend(lijst) is True:
        for i in lijst:
            while teller < i:
                teller += 1
                nieuwe_lijst.append(frequentie)
            frequentie += 1

    else:
        raise AssertionError(""gegeven reeks is niet stijgend"")

    return nieuwe_lijst

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""

    nieuwe_lijst = []

    for index, waarde in enumerate(lijst):
        totaal = (index + 1) + waarde
        nieuwe_lijst.append(totaal)

    return nieuwe_lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    tuple_1 = verhogen(lijst)
    tuple_2 = verhogen(frequentiereeks(lijst))

    if stijgend(lijst) is True:
        return (tuple_1, tuple_2)
    
    raise AssertionError(""gegeven reeks is niet stijgend"")



if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Axel Jünger/complementaire-reeksen.py"",""fullName"":""Axel Jünger"",""id"":""8344"",""status"":""correct"",""submissionID"":""6413202"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T11:05:40.000Z"",""labels"":""geol""}"
950,/home/maxiem/Downloads/files/Joris De Clercq/complementaire-reeksen.py,"def increasing(seq):
    bool = (list(seq) == sorted(seq))
    return bool

def frequency_sequence(seq):
    assert increasing(seq) == True, ""given sequence is not increasing""
    m = int(seq[-1])
    count = 0
    new_seq = []
    for i in range(m+1):
        count += seq.count(i)
        new_seq.append(count)
    return new_seq

def lift(seq):
    l = len(seq)
    new_list = []
    for i in range(l):
        new_list.append(seq[i]+i+1)
    return new_list

def complementary_sequences(seq):
    new_seq = frequency_sequence(seq)
    new_list1 = lift(seq)
    new_list2 = lift(new_seq)
    return (new_list1, new_list2)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Joris De Clercq/complementaire-reeksen.py"",""fullName"":""Joris De Clercq"",""id"":""13084"",""status"":""correct"",""submissionID"":""6418932"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T15:23:15.000Z"",""labels"":""biol""}"
951,/home/maxiem/Downloads/files/Sander Bekaert/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) -1))

def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    freq, waarde, aantal = [], 0, 0
    for getal in reeks:
        while waarde < getal:
            freq.append(aantal)
            waarde +=1
        
        aantal += 1
        
    freq.append(aantal)
    return freq

def verhogen(reeks):
    return [element + positie + 1 for positie, element in enumerate(reeks)]

def complementaire_reeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Sander Bekaert/complementaire-reeksen.py"",""fullName"":""Sander Bekaert"",""id"":""13063"",""status"":""correct"",""submissionID"":""6422284"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T18:39:13.000Z"",""labels"":""chem""}"
952,/home/maxiem/Downloads/files/Sibylle Bosschaert/complementaire-reeksen.py,"def increasing(reeks):
    antwoord = all(i <= j for i, j in zip(reeks, reeks[1:]))
    return antwoord
    
def frequency_sequence(reeks):
    assert increasing(reeks) is True, ""given sequence is not increasing""
    m = max(reeks)
    freq_reeks = []
    aantal_kleiner = -1
    for i in range(1, m + 2):
        freq_reeks += [0,]
        aantal_kleiner += 1
        for b in reeks:
            if int(b) < i:
                freq_reeks[aantal_kleiner] += 1

    return freq_reeks
    
def lift(reeks):
    reeks = list(reeks)
    op_te_tellen_getal = 1
    for i in reeks:
        reeks[op_te_tellen_getal - 1] += op_te_tellen_getal
        op_te_tellen_getal += 1
    return reeks

def complementary_sequences(reeks):
    
    return lift(reeks), lift(frequency_sequence(reeks))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Sibylle Bosschaert/complementaire-reeksen.py"",""fullName"":""Sibylle Bosschaert"",""id"":""13087"",""status"":""correct"",""submissionID"":""6406150"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T17:22:08.000Z"",""labels"":""fyss""}"
953,/home/maxiem/Downloads/files/Kaat Verschueren/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(len(reeks) - 1):
        if not reeks[i] <= reeks[i + 1]:
            return False
    return True
def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks) is True, 'gegeven reeks is niet stijgend'
    m = reeks[-1]
    lijst = []
    for i in range(1, m + 2):
        p = 0
        for a in range(len(reeks)):
            if reeks[a] < i:
                p += 1
        lijst.append(p)
    return lijst
def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    reeks = list(reeks)
    for i in range(len(reeks)):
        reeks[i] += i + 1
    return reeks
def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Kaat Verschueren/complementaire-reeksen.py"",""fullName"":""Kaat Verschueren"",""id"":""13089"",""status"":""correct"",""submissionID"":""6333533"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T12:49:31.000Z"",""labels"":""fyss""}"
954,/home/maxiem/Downloads/files/Paris Syngelakis/complementaire-reeksen.py,"def stijgend(list):
    while len(list) != 1:
        if list[0] > list[1]:
            return False
        list = list[1:]
    return True



def frequentiereeks(list):
    if stijgend(list) != True:
        raise AssertionError('gegeven reeks is niet stijgend')
    else:
        lengte = int(list[-1]) + 1
        cijfer = 0
        while cijfer < lengte:
            cijfer = cijfer + 1
            teller = 0
            for element in list:
                if element < cijfer:
                    teller = teller + 1
            if cijfer == 1:
                lijst = [teller]
            else:
                lijst.append(teller)
    return lijst



def verhogen(list):
    opteller = 1
    for element in list:
        element = int(element) + opteller
        if opteller == 1:
            lijst = [element]
        else:
            lijst.append(element)
        opteller = opteller + 1
    return lijst

def complementaire_reeksen(list):
    if stijgend(list) != True:
        raise AssertionError('gegeven reeks is niet stijgend')
    verhoogd = verhogen(list)
    frequentieverhoogd = verhogen(frequentiereeks(list))

    return verhoogd, frequentieverhoogd

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( array ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Paris Syngelakis/complementaire-reeksen.py"",""fullName"":""Paris Syngelakis"",""id"":""13090"",""status"":""correct"",""submissionID"":""6420577"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T16:47:29.000Z"",""labels"":""chem""}"
955,/home/maxiem/Downloads/files/Friedl' Ryckaert/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(pn):
    pn = list(pn)
    bool = True
    for i in range(len(pn)-1):
        if pn[i] > pn[i+1]:
            bool = False
    if pn[-1] < pn[-2]:
        bool = False
    return bool


def frequentiereeks(pn):
    assert stijgend(pn) == True, 'gegeven reeks is niet stijgend'
    c = 0
    n = 0
    nieuwereeks = []
    while c <= pn[len(pn)- 1]:
        for i in range(len(pn)):
            if pn[i] <= c:
                n += 1
        nieuwereeks.append(n)
        c += 1
        n = 0
    return nieuwereeks


def verhogen(pn):
    nl = []
    for i in range(len(pn)):
        n = (i+1) + pn[i]
        nl.append(n)
    return nl


def complementaire_reeksen(pn):
    assert stijgend(pn) == True, 'gegeven reeks is niet stijgend'
    nt = (verhogen(pn), verhogen(frequentiereeks(pn)))
    return nt




",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Friedl' Ryckaert/complementaire-reeksen.py"",""fullName"":""Friedl' Ryckaert"",""id"":""13092"",""status"":""correct"",""submissionID"":""6396487"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T21:14:22.000Z"",""labels"":""fyss""}"
956,/home/maxiem/Downloads/files/Bert Wallaert/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for barry in range(len(lijst)-1):
        if lijst[barry+1] < lijst[barry]:
            return False
    return True


def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert bool(stijgend(lijst)) is True, ""gegeven reeks is niet stijgend""
    new_list, getal, number, jos = [], 1, 0, 0
    for _ in range(lijst[-1]):
        while lijst[jos] < getal:
            number += 1
            jos += 1
        getal += 1
        new_list.append(number)
    new_list.append(len(lijst))
    return new_list


def verhogen(lijstje):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    new_listje = []
    for i in range(len(lijstje)):
        new_listje.append(lijstje[i] + i + 1)
    return new_listje


def complementaire_reeksen(lijsterbes):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(lijsterbes), verhogen(frequentiereeks(lijsterbes))


if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Bert Wallaert/complementaire-reeksen.py"",""fullName"":""Bert Wallaert"",""id"":""13097"",""status"":""correct"",""submissionID"":""6385742"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T15:55:51.000Z"",""labels"":""fyss""}"
957,/home/maxiem/Downloads/files/David Josiger/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    inc = True
    for i in range(len(sequence) - 1):
        if sequence[i] <= sequence[i + 1] and inc == True:
            inc = True
        else:
            inc = False

    return inc


def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    if increasing(sequence):
        fseq = []
        for i in range(sequence[-1] + 1):
            counter = 0
            for j in sequence:
                if j <= i:
                    counter += 1
            fseq.append(counter)
        return fseq
    else:
        raise AssertionError(""given sequence is not increasing"")


def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    if tuple(sequence):
        sequence = list(sequence)
    for i in range(len(sequence)):
        sequence[i] = sequence[i] + (i + 1)
    return sequence


def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    if increasing(sequence):
        seq = (lift(sequence), lift(frequency_sequence(sequence)))
    else:
        raise AssertionError(""given sequence is not increasing"")
    return seq


if __name__ == ""__main__"":
    import doctest
    doctest.testmod()

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""David Josiger/complementaire-reeksen.py"",""fullName"":""David Josiger"",""id"":""13099"",""status"":""correct"",""submissionID"":""6391598"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T13:07:42.000Z"",""labels"":""keuz""}"
958,/home/maxiem/Downloads/files/Niels De Ketelaere/complementaire-reeksen.py,"def stijgend(bool):
    v_len = len(bool)
    x = 0
    for x in range(v_len - 1):
        if bool[x] <= bool[x+1]:
            v_return = True
        else:
            return False
        x += 1
    return v_return

def frequentiereeks(reeks):
    if stijgend(reeks) is True:
        v_lijst = (reeks[-1] + 1) * [0]
        x = 0
        v_len = len(v_lijst)
        if v_len < reeks[-1]:
            for y in range(v_len):
                if y < reeks[x]:
                    v_lijst[y] += x
                else:
                    x += 1
                    v_lijst[y] += x
        else:
            for y in range(reeks[-1] + 1):
                    x = reeks.count(y)
                    v_lijst[y] = v_lijst[y - 1] + x
        return v_lijst
    else:
        raise AssertionError('gegeven reeks is niet stijgend')
        
def verhogen(reeks):
    v_lijst = list(reeks)
    v_len = len(reeks)
    for x in range(v_len):
        v_lijst[x] += x + 1
    
    return v_lijst
    
def complementaire_reeksen(reeks):
    if stijgend(reeks) is True:
        v_1 = verhogen(reeks)
        v_2 = verhogen(frequentiereeks(reeks))

        return v_1, v_2

    else:
        raise AssertionError('gegeven reeks is niet stijgend')
        ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ( array ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ),"{""filename"":""Niels De Ketelaere/complementaire-reeksen.py"",""fullName"":""Niels De Ketelaere"",""id"":""13101"",""status"":""correct"",""submissionID"":""6423691"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T20:19:17.000Z"",""labels"":""chem""}"
959,/home/maxiem/Downloads/files/Luka De Clerck/complementaire-reeksen.py,"

# Een functie stijgend die een Booleaanse waarde (bool) teruggeeft die aangeeft of de getallen in de gegeven reeks
# al dan niet stijgend zijn. Daarbij is het dus wel toegelaten dat er dubbels voorkomen (met andere woorden:
# je moet niet nagaan of de reeks strikt stijgend is).

def stijgend(lijst):
    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    antwoord = True
    i = 1
    while i != len(lijst):
        if lijst[i-1] > lijst[i]:
            antwoord = False
        i += 1
    return antwoord


# Een functie frequentiereeks die een nieuwe lijst (list)  teruggeeft met de getallen (int) van de frequentiereeks van
# de gegeven reeks. Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen met de
# boodschap gegeven reeks is niet stijgend.

def frequentiereeks(lijst):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    maximum = max(lijst)
    frequentiereeks = []
    frequentie = 0
    for i in range(1, maximum + 2):
        for a in lijst:
            if a < i:
                frequentie += 1
        frequentiereeks.append(frequentie)
        frequentie = 0
    return frequentiereeks

# Een functie verhogen die een nieuwe lijst (list) teruggeeft die de getallen (int) van de gegeven reeks bevat,
# maar telkens verhoogd overeenkomstig hun positie in de gegeven reeks — dat is 1 opgeteld bij het eerste getal
# van de gegeven reeks, 2 bij het tweede getal, enzoverder.
def verhogen(lijst):
    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    verhoogde_lijst = []
    for i in range(1, len(lijst)+1):
        verhoogd_element = lijst[i-1] + i
        verhoogde_lijst.append(verhoogd_element)
    return verhoogde_lijst

# Een functie complementaire_reeksen die een tuple teruggeeft. Het eerste element van dit tuple is een nieuwe lijst
# (list) met de getallen (int) van de gegeven reeks die verhoogd werden overeenkomstig hun positie in de reeks.
# Het tweede element van het tuple is een nieuwe lijst (list) met de frequentiereeks van de gegeven reeks,
# waarvan de getallen (int) verhoogd werden overeenkomstig hun positie in de reeks.
# Indien de gegeven reeks niet stijgend is, dan moet de functie een AssertionError opwerpen met de boodschap gegeven
# reeks is niet stijgend.

def complementaire_reeksen(lijst):
    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    assert stijgend(lijst), 'gegeven reeks is niet stijgend'
    return verhogen(lijst), verhogen(frequentiereeks(lijst))



if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( member_expression ( identifier ) ( ERROR ( identifier ) ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( member_expression ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( property_identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Luka De Clerck/complementaire-reeksen.py"",""fullName"":""Luka De Clerck"",""id"":""13106"",""status"":""correct"",""submissionID"":""6377901"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-13T15:17:34.000Z"",""labels"":""fyss""}"
960,/home/maxiem/Downloads/files/Soetkin Martens/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""

    return all(i <= j for i, j in zip(reeks, reeks[1:]))


def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    if stijgend(reeks) == False:
        assert False, ""gegeven reeks is niet stijgend""
    frequentie = []
    grootste =  max(reeks) + 1
    aantal = 0
    for nummer in range(grootste):
        aantal = reeks.count(nummer) + aantal
        frequentie.append(aantal)
    return frequentie

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogde_lijst = []
    pos = 1
    for i in reeks:
        som = i + (pos)
        verhoogde_lijst.append(som)
        pos += 1
    return verhoogde_lijst

def complementaire_reeksen(reeks):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))


if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Soetkin Martens/complementaire-reeksen.py"",""fullName"":""Soetkin Martens"",""id"":""13107"",""status"":""correct"",""submissionID"":""6423379"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:55:08.000Z"",""labels"":""chem""}"
961,/home/maxiem/Downloads/files/Lotte Van Poucke/complementaire-reeksen.py,"def stijgend(lijst):
    for c in range(len(lijst)-1):
        if not lijst[c] <= lijst[c +1]:
            return False
    return True
def frequentiereeks(lijst):
    nieuw=[]
    for i in range(lijst[-1]+1):
        aantal=0
        for c in lijst:
            if c < i+1:
                aantal +=1
        nieuw.append(aantal)
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""   
    return nieuw
def verhogen(lijst):
    reeks = list(lijst)
    for c, i in enumerate(reeks):
        reeks[c] = int(i) + c +1
    return reeks
    
def complementaire_reeksen(lijst):
    lijst_1= verhogen(lijst)
    lijst_2 = verhogen(frequentiereeks(lijst))
    return(lijst_1, lijst_2)
    
        ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Lotte Van Poucke/complementaire-reeksen.py"",""fullName"":""Lotte Van Poucke"",""id"":""13109"",""status"":""correct"",""submissionID"":""6365932"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T14:56:45.000Z"",""labels"":""chem""}"
962,/home/maxiem/Downloads/files/Emilia Stevens/complementaire-reeksen.py,"def stijgend(lijst):
    bool = True
    j = 0
    for e in lijst:
        if e >= j:
            j = e
        else:
            bool = False
            j = e
    return bool

def frequentiereeks(lijst):
    bool = stijgend(lijst)
    assert bool != False, 'gegeven reeks is niet stijgend'
    freqreeks = []
    hoogste_getal = lijst[len(lijst)-1]
    for i in range(int(hoogste_getal)+1):
        k = 0
        for e in lijst:
            if int(e) < (i + 1):
                k += 1
        freqreeks.append(k)
    return freqreeks

def verhogen(lijst):
    vlijst = []
    m = 1
    for e in lijst:
        vlijst.append(int(e)+m)
        m += 1
    return vlijst

def complementaire_reeksen(lijst):
    bool = stijgend(lijst)
    assert bool != False, 'gegeven reeks is niet stijgend'
    tuple = ()
    l1 = verhogen(lijst)
    l2 = verhogen(frequentiereeks(lijst))
    tuple = l1, l2
    return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( formal_parameters ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Emilia Stevens/complementaire-reeksen.py"",""fullName"":""Emilia Stevens"",""id"":""13112"",""status"":""correct"",""submissionID"":""6396757"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T22:16:15.000Z"",""labels"":""fyss""}"
963,/home/maxiem/Downloads/files/victor lantsoght/complementaire-reeksen.py,"
def stijgend(reeks):
    Lengte = 0; grens1 = 0 ; grens2 = 1 ; Controle = 0
    while Lengte < len(reeks):
        if reeks[grens1:grens2] <= reeks[(grens2):(int(grens2+1))]:
           Controle += 1
        grens1 += 1 ; grens2 += 1; Lengte += 1
    return bool(Controle == (len(reeks)-1))


def frequentiereeks(reeks):
    assert stijgend(reeks) is True, 'gegeven reeks is niet stijgend'
    m = max(reeks)
    num = -1
    nieuwe_reeks = []
    for i in range(1, m + 2):
        nieuwe_reeks += [0,]
        num += 1
        for char in reeks:
            if int(char) < i:
                nieuwe_reeks[num] += 1
    return nieuwe_reeks


def verhogen(reeks):
    a = 0
    b = 1
    lijst = []
    for char in reeks:
        lijst += [((reeks[a]) + b)]
        a += 1
        b += 1
    return lijst

def complementaire_reeksen(reeks):
    verhoogt = verhogen(reeks)
    verhoogde_frequentiereeks = verhogen(frequentiereeks(reeks))
    lijst = [verhoogt, verhoogde_frequentiereeks]
    lijst_tuple = tuple(lijst)
    return lijst_tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ( ERROR ( identifier ) ) ) ( ERROR ( subscript_expression ( identifier ) ( call_expression ( parenthesized_expression ( identifier ) ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( array ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( array ( parenthesized_expression ( binary_expression ( parenthesized_expression ( subscript_expression ( identifier ) ( identifier ) ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""victor lantsoght/complementaire-reeksen.py"",""fullName"":""victor lantsoght"",""id"":""13133"",""status"":""correct"",""submissionID"":""6422246"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T18:37:14.000Z"",""labels"":""fyss""}"
964,/home/maxiem/Downloads/files/Mathias De Gryse/complementaire-reeksen.py,"# Opstelling def 1
def stijgend(reeks):
    controle = reeks[0]
    bool = True
    for cijfer in reeks:
        if cijfer < controle:
            bool = False
        controle = cijfer
    return bool


# Opstelling def 2
def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'
    lengte = (reeks[-1] + 2)
    count = 1
    freqreeks = []

    while count < lengte:
        nieuwcijfer = 0

        for cijfer in reeks:
            if cijfer < count:
                nieuwcijfer += 1

        freqreeks.append(nieuwcijfer)
        count += 1
    return freqreeks


# Opstelling def 3
def verhogen(reeks):
    count = 0
    nieuwreeks = []
    for cijfer in reeks:
        count += 1
        cijfer += count
        nieuwreeks.append(cijfer)
    return nieuwreeks


# Opstelling def 4
def complementaire_reeksen(reeks):
    reeks1 = verhogen(reeks)
    reeks2 = frequentiereeks(reeks)
    reeks3 = verhogen(reeks2)
    compl = (reeks1, reeks3)
    return compl",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( expression_statement ( number ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Mathias De Gryse/complementaire-reeksen.py"",""fullName"":""Mathias De Gryse"",""id"":""8111"",""status"":""correct"",""submissionID"":""6413816"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T11:57:05.000Z"",""labels"":""chem""}"
965,/home/maxiem/Downloads/files/Vic Walraevens/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    teller = 0
    lengte = len(reeks)
    for i in range(lengte - 1):
        if reeks[i + 1] >= reeks[i]:
            teller += 1
    return bool(teller == lengte - 1)

def frequentiereeks(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    nieuw = []
    for i in range(1, lijst[-1]+2):
        tel = len([a for a in lijst if a<i])
        nieuw.append(tel)
    return nieuw

def verhogen(lijst):
    nieuw = []
    for i, getal in enumerate(lijst):
        nieuw.append(getal + i + 1)
    return nieuw

def complementaire_reeksen(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    lijst1 = verhogen(lijst)
    freq = frequentiereeks(lijst)
    lijst2 = verhogen(freq)
    return lijst1, lijst2

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Vic Walraevens/complementaire-reeksen.py"",""fullName"":""Vic Walraevens"",""id"":""12089"",""status"":""correct"",""submissionID"":""6423411"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:57:03.000Z"",""labels"":""bcbt""}"
966,/home/maxiem/Downloads/files/Siel Moeyersoon/complementaire-reeksen.py,"def stijgend(lijst):
    lijst = list(lijst)
    lijst_gesorteerd = sorted(lijst)
    if lijst == lijst_gesorteerd:
        return True
    else:
        return False
def frequentiereeks(lijst):
    lijst = list(lijst)
    if lijst != sorted(lijst):
        assert False, 'gegeven reeks is niet stijgend'
    nieuwe_lijst = []
    for cijfer in range(1,lijst[-1] + 2):
        optelling = 0
        for element in lijst:
            if element < cijfer:
                optelling += 1
        nieuwe_lijst.append(optelling)
    return nieuwe_lijst

def verhogen(lijst):
    lijst = list(lijst)
    nieuwe_lijst = []
    for index, element in enumerate(lijst):
        nieuw_element = element + index + 1
        nieuwe_lijst.append(nieuw_element)
    return nieuwe_lijst
def complementaire_reeksen(lijst):
    verhoogd = verhogen(lijst)
    frequentie = frequentiereeks(lijst)
    freq_verhoogd = verhogen(frequentie)
    return verhoogd, freq_verhoogd



",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Siel Moeyersoon/complementaire-reeksen.py"",""fullName"":""Siel Moeyersoon"",""id"":""11890"",""status"":""correct"",""submissionID"":""6384606"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-14T13:48:59.000Z"",""labels"":""bcbt""}"
967,/home/maxiem/Downloads/files/Maxime Vanwynsberghe/complementaire-reeksen.py,"def stijgend(lijst):
    vorig = lijst[0]
    for element in lijst:
        if element < vorig:
            return False
        vorig = element
    return True

def frequentiereeks(lijst): 
    assert (stijgend(lijst) is True), ""gegeven reeks is niet stijgend""
    vorig = 0
    getal = 0
    count0 = 0
    teller = 0
    reeks = []
    for element in lijst:
        if element == 0:
            count0 += 1
        else:
            if count0 != 0:
                teller += 1
                reeks.append(count0)
                if lijst.count(teller) == 0:
                    count0 += 1
                    reeks.append(count0)
                else:
                    count0 += 1
                    reeks.append(count0)
            else:
                if vorig == element:
                    reeks.append(getal)
                elif element != teller:
                    while element != teller:
                        teller += 1
                        reeks.append(getal)
                    getal += 1
                    reeks.append(getal)
                    teller += 1
                    vorig = element
                elif element == teller:
                    getal += 1
                    reeks.append(getal)
                    teller +=1
    return reeks",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Maxime Vanwynsberghe/complementaire-reeksen.py"",""fullName"":""Maxime Vanwynsberghe"",""id"":""5379"",""status"":""time limit exceeded"",""submissionID"":""6236441"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-02T17:11:20.000Z"",""labels"":""n/a""}"
968,/home/maxiem/Downloads/files/Philippe Elskens/complementaire-reeksen.py,"def increasing(sequence):
    s = sorted(list(sequence))
    return list(sequence) == s
    
def frequency_sequence(sequence):
    frequency_sequence = []
    total = 0
    assert increasing(sequence) == True, 'given sequence is not increasing'
    for i in range(max(sequence) + 1):
        total += sequence.count(i)
        frequency_sequence.append(total)
    return(frequency_sequence)
    
def lift(sequence):
    sequence = list(sequence)
    for index, element in enumerate(sequence):
        sequence[index] += index + 1
    return sequence
    
def complementary_sequences(sequence):
    tuple = ()
    tuple = (lift(sequence), lift(frequency_sequence(sequence)))
    return tuple",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( formal_parameters ) ) ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Philippe Elskens/complementaire-reeksen.py"",""fullName"":""Philippe Elskens"",""id"":""13167"",""status"":""correct"",""submissionID"":""6408136"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T19:59:40.000Z"",""labels"":""stat""}"
969,/home/maxiem/Downloads/files/Laura Landuyt/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):

    '''
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    stijgend = True

    for positie, char in enumerate(reeks):
        if positie < len(reeks) - 1:
            if char > reeks[positie + 1]:
                stijgend = False
                if not stijgend:
                    return False

    if stijgend:
        return True


def frequentiereeks(reeks):

    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    # Assertion Error:
    # syntax: assert condition, ""error message""
    # condition:
        # if condition = True -> code
            # als de reeks stijgend is (True), dan is dit verschillend van False (True) -> code
        # if condition = False -> error message
            # als de reeks niet stijgend is (False), dan is dit niet verschillend van False (False) -> error message
    assert stijgend(reeks) != False, ""gegeven reeks is niet stijgend""
    volgende = 0
    aantal = 0
    nieuw = []
    while volgende < max(reeks) + 1:
        for char in reeks:
            # kleiner of gelijk aan 0, 1, 2, 3, ...
            if char <= volgende:
                aantal += 1
        nieuw.append(aantal)
        # aantal terug op nul zetten vooraleer je begint te tellen hoeveel kleiner of gelijk aan 1 zijn
        aantal = 0
        volgende += 1
    return nieuw
    
def verhogen(reeks):

    '''
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''

    nieuw = []
    for positie, char in enumerate(reeks):
        verhoging = char + (positie + 1)
        nieuw.append(verhoging)
    return nieuw

def complementaire_reeksen(reeks):

    '''
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    '''

    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( string ) ) ) ) ) ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( ERROR ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Laura Landuyt/complementaire-reeksen.py"",""fullName"":""Laura Landuyt"",""id"":""13193"",""status"":""correct"",""submissionID"":""6397626"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T07:52:53.000Z"",""labels"":""doct""}"
970,/home/maxiem/Downloads/files/Benoit Mortier/complementaire-reeksen.py,"def stijgend(lijst):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    #overlopen van lijst en nagaan of vorig getal kleiner is dan huidig
    getal = lijst[0]
    for i in lijst:
        if getal <= i:
            getal = i
        else:
            return False
    return True

def frequentiereeks(lijst):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    #assert controle
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    getal = 0
    frequentielijst = []
    j = 1
    #overlopen van de lijst zolang het laatste getal kleiner is dan de lengte van de ingevoerde lijst
    while getal < len(lijst):
        getal = 0
        i = 0
        while i < len(lijst) and lijst[i] < j:
            getal += 1
            i += 1
        frequentielijst.append(getal)
        j += 1
    
    return frequentielijst

def verhogen(lijst):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    #omzetten naar een lijst
    lijst = list(lijst)
    
    #lijst overlopen en positie bijtellen
    for index, cijfer in enumerate(lijst):
        lijst[index] = cijfer + index + 1
    
    return lijst

def complementaire_reeksen(lijst):
    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(lijst), verhogen(frequentiereeks(lijst))

if __name__ == '__main__':
    import doctest
    doctest.testmod(verbose=True)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Benoit Mortier/complementaire-reeksen.py"",""fullName"":""Benoit Mortier"",""id"":""11485"",""status"":""correct"",""submissionID"":""6347151"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-10T14:58:09.000Z"",""labels"":""keuz""}"
971,/home/maxiem/Downloads/files/Yue Sun/complementaire-reeksen.py,"def increasing(sequence):
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    outcome = []
    for i in range(len(sequence) - 1):
        if sequence[i + 1] >= sequence[i]:
            output = outcome.append(True)
        else:
            output = outcome.append(False)
    if False in outcome:
        return False
    else:
        return True

def frequency_sequence(sequence):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence) == True, 'given sequence is not increasing'
    maximum = max(sequence)
    #print(max)
    output = []
    count = 0
    for i in range(maximum + 1):
        count += sequence.count(i)
        # print(count)
        outcome = output.append(count)
    return output

def lift(sequence):
    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    order = range(1, (len(sequence) + 2))
    added = []
    for sequence, order in zip(sequence, order):
        added.append(sequence + order)
    return added

def complementary_sequences(sequence):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(sequence) == True, 'given sequence is not increasing'
    return (lift(sequence), lift(frequency_sequence(sequence)))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Yue Sun/complementaire-reeksen.py"",""fullName"":""Yue Sun"",""id"":""13238"",""status"":""correct"",""submissionID"":""6396183"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T20:22:11.000Z"",""labels"":""stat""}"
972,/home/maxiem/Downloads/files/Severine Verschaete/complementaire-reeksen.py,"def increasing(lijst):
    return all( lijst[i]<=lijst[i+1]for i in range(len(lijst)-1))

def frequency_sequence(lijst):
    lijst = list(lijst)
    sequencie = []
    aantal = []
    assert increasing(lijst), 'given sequence is not increasing'
    aftrekken = [0]+lijst[:-1]
    referentielijst= [i for i in range(len(lijst))]
    for i, j in zip(lijst, aftrekken):
        aantal.append(i-j)
    for i, j in zip(referentielijst, aantal):
        for k in range(j):
            sequencie.append(i)
    return sequencie+[len(lijst)]

def lift(lijst):
    return [i+j for i, j in enumerate(lijst, start=1)]
def complementary_sequences(lijst):
    return (lift(lijst), lift(frequency_sequence(lijst)))",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( array ( number ) ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( array ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Severine Verschaete/complementaire-reeksen.py"",""fullName"":""Severine Verschaete"",""id"":""3164"",""status"":""correct"",""submissionID"":""6238151"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-02T19:20:06.000Z"",""labels"":""biol""}"
973,/home/maxiem/Downloads/files/Talip Yurtkap/complementaire-reeksen.py,"


def stijgend(reeks):
    if reeks == (2, 3, 5, 7, 11, 13, 12):
        return False
    else:
        for i in range(len(reeks)):
            if reeks[i] > reeks[i + 1]:
                return False

            else:
                i += 1
                if reeks[i] <= reeks[i + 1]:
                    i += 1
                    if reeks[i] <= reeks[i + 1]:
                        i += 1
                        if reeks[i] <= reeks[i + 1]:
                            i += 1
                            return True

def frequentiereeks(list):

    assert stijgend(list), 'gegeven reeks is niet stijgend'

    frequentie = []
    aantal_in = 0
    val = 0

    for getal in list:
        while val < getal:
            frequentie.append(aantal_in)
            val += 1
        aantal_in += 1

    frequentie.append(aantal_in)
    return frequentie
def verhogen(reeks):
    return [int(el) + int(pos) +1 for pos, el in enumerate(reeks)]

def complementaire_reeksen(ok):
    assert stijgend(ok), 'gegeven reeks is niet stijgend'
    i = verhogen(ok)
    j = verhogen(frequentiereeks(ok))
    return (i, j)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Talip Yurtkap/complementaire-reeksen.py"",""fullName"":""Talip Yurtkap"",""id"":""13253"",""status"":""correct"",""submissionID"":""6424048"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T20:49:12.000Z"",""labels"":""fyss""}"
974,/home/maxiem/Downloads/files/Serge Rijssegem/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(a):
    tel=0
    for i in range (0,len(a)-1):
        if (a[i]>a[i+1]):
            tel+=1
    if (tel==0):
        return True
    else:
        return False
def frequentiereeks(a):
    try:
        assert stijgend(a),'gegeven reeks is niet stijgend'
        b=[]
        laatstegetal=a[len(a)-1]
        for i in range (0,laatstegetal+1):
            telleri=0
            for j in range(0,len(a)):
                if(a[j]<=i):
                    telleri+=1
            b.append(telleri)
        return b
    except:
        raise AssertionError('gegeven reeks is niet stijgend')

def verhogen(a):
    b=[]
    for i in range (0,len(a)):
        toevoegen=i+1+a[i]
        b.append(toevoegen)
    return b
def complementaire_reeksen(a):
    deel1=verhogen(a)
    deel2=verhogen(frequentiereeks(a))
    tuplet=(deel1,deel2)
    return(tuplet)",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( return_statement ( identifier ) ) ( else_clause ( ERROR ) ( return_statement ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ),"{""filename"":""Serge Rijssegem/complementaire-reeksen.py"",""fullName"":""Serge Rijssegem"",""id"":""13257"",""status"":""correct"",""submissionID"":""6195617"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-10-30T18:34:52.000Z"",""labels"":""stat""}"
975,/home/maxiem/Downloads/files/Charles Deberlanger/complementaire-reeksen.py,"def stijgend(lijst):
    k = 0
    for i in lijst:
        if i < k:
            return False
        k = i
    return True

def frequentiereeks(lijst):
    assert stijgend(lijst), ""gegeven reeks is niet stijgend""
    frequentie = []
    for i in range(0, lijst[-1] + 1):
        h = 0
        for y in lijst:
            if y < i+1:
                h += 1
        frequentie.append(h)
    return frequentie

def verhogen(lijst):
    k =1
    verhogen = []
    for i in lijst:
        verhogen.append(i + k)
        k += 1
    return verhogen

def complementaire_reeksen(lijst):
    first = verhogen(lijst)
    second = verhogen(frequentiereeks(lijst))
    return first, second",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( return_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Charles Deberlanger/complementaire-reeksen.py"",""fullName"":""Charles Deberlanger"",""id"":""13281"",""status"":""correct"",""submissionID"":""6414232"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T12:37:16.000Z"",""labels"":""stat""}"
976,/home/maxiem/Downloads/files/Ruben Lumen/complementaire-reeksen.py,"def stijgend(reeks):
    i = 0
    stijgen = True
    for getal in reeks[:-1]:
        if getal > reeks[i + 1]:
            stijgen = False
            break
        i += 1
    return stijgen
def frequentiereeks(reeks):
    '''
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    '''
    stijgen = stijgend(reeks)
    assert stijgen == True, ""gegeven reeks is niet stijgend""
    freq = []
    kleiner = 0
    for i in range(1,(reeks[-1] + 2)):
        for l in reeks:
            if i > l:
                kleiner += 1
        freq += [kleiner]
        kleiner = 0
    return freq
def verhogen(reeks):
    verhoging = []
    for i in range(1, len(reeks) + 1):
        verhoging += [(int(reeks[i -1]) + i)]
    return verhoging
def complementaire_reeksen(reeks):
    return (verhogen(reeks), verhogen(frequentiereeks(reeks)))




if __name__ == '__main__':
    import doctest
    doctest.testmod()

",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( break_statement ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Ruben Lumen/complementaire-reeksen.py"",""fullName"":""Ruben Lumen"",""id"":""5218"",""status"":""correct"",""submissionID"":""6408402"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T20:21:49.000Z"",""labels"":""bcbt""}"
977,/home/maxiem/Downloads/files/Nelis Van Laeken/complementaire-reeksen.py,"def stijgend(lijst):
    teller = 0
    for n in range(1, len(lijst)):
        if lijst[n] >= lijst[n-1]:
            teller += 1
    if teller == len(lijst) - 1:
        return True
    else:
        return False


def frequentiereeks(lijst):
    
    assert stijgend(lijst) != False, ""gegeven reeks is niet stijgend""

    #[2, 3, 5, 7, 11, 13]
    getal = 0
    getal2 = 0
    frequentie_reeks = []
    for n in lijst:
        while n > getal:
            frequentie_reeks.append(getal2)
            getal += 1
        getal2 += 1
    frequentie_reeks.append(getal2)
    return frequentie_reeks


def verhogen(lijst):
    lijst = list(lijst)
    nieuwe_lijst = []
    for n in range((len(lijst))):
        nieuwe_lijst.append(lijst[n] + (n+1))
    return nieuwe_lijst
    

def complementaire_reeksen(lijst):


    assert stijgend(lijst) != False, ""gegeven reeks is niet stijgend""

    lijst = list(lijst)
    lijst_verhogen = verhogen(lijst)
    lijst_frequentie = frequentiereeks(lijst)
    lijst_verhogenfreq = verhogen(lijst_frequentie)

    return (lijst_verhogen, lijst_verhogenfreq)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( return_statement ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ),"{""filename"":""Nelis Van Laeken/complementaire-reeksen.py"",""fullName"":""Nelis Van Laeken"",""id"":""11076"",""status"":""correct"",""submissionID"":""6354982"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-11T16:22:20.000Z"",""labels"":""keuz""}"
978,/home/maxiem/Downloads/files/Ella-Marie Assal/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(pn):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(len(pn)-1):
        if int(pn[i+1]) < int(pn[i]):
            return False

    return True

def frequentiereeks(pn):

    assert stijgend(pn), 'gegeven reeks is niet stijgend'

    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""

    nieuw_getal = 0
    freq_reeks = []
    for getal in range(pn[-1]+1):
        nieuw_getal += pn.count(getal)
        freq_reeks.append(nieuw_getal)

    return freq_reeks

def verhogen(pn):

    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    verhoogd = []
    for i in range(len(pn)):
        verhoogd.append(pn[i] + i+1)
    return verhoogd

def complementaire_reeksen(pn):
    assert stijgend(pn), 'gegeven reeks is niet stijgend'

    """"""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(pn), verhogen(frequentiereeks(pn))
if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Ella-Marie Assal/complementaire-reeksen.py"",""fullName"":""Ella-Marie Assal"",""id"":""13468"",""status"":""correct"",""submissionID"":""6417641"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T14:33:07.000Z"",""labels"":""keuz""}"
979,/home/maxiem/Downloads/files/Bhanu Durganath Angam/complementaire-reeksen.py,"def increasing(m):
    c = 1
    for i, j in zip(m, m[1:]):
        if i>j:
            c = c * 0
        else:
            c = c * 1
    return bool(c)",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Bhanu Durganath Angam/complementaire-reeksen.py"",""fullName"":""Bhanu Durganath Angam"",""id"":""13568"",""status"":""runtime error"",""submissionID"":""6423128"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:34:04.000Z"",""labels"":""stat""}"
980,/home/maxiem/Downloads/files/Arend Vancraeynest/complementaire-reeksen.py,"def stijgend(reeks):
    """"""
    Functie bepaalt of een lijst bestaat uit stijgende natuurlijke getallen,
    waarin dubbels toegelaten zijn.
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    for i in range(1, len(reeks)):
        if reeks[i] >= reeks[i - 1]:
            i += 1
        else:
            return False
    return True


# Aparte functie om herhaling te vermijden binnen andere functies
def assert_reeks(reeks):
    """"""
    Functie geeft een AssertionError indien een reeks niet stijgend is
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""


# Aparte functie om functie 'frequentiereeks' wat op te schonen
def kleiner_dan(reeks, getal):
    """"""
    Telt hoeveel getallen in een reeks natuurlijke getallen kleiner zijn dan een opgegeven getal
    >>> kleiner_dan([0, 2, 2, 5, 3, 1, 4], 3)
    4
    """"""
    count = 0
    for i in reeks:
        count += 1 if i < getal else 0
    return count


def frequentiereeks(reeks):
    """"""
    Geeft een nieuwe reeks weer die de frequentiereeks is van de opgegeven reeks getallen
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert_reeks(reeks)     # Test eerst of de functie stijgend is, zoniet geeft een AssertionError

    m = reeks[-1] + 1       # m is het laatste getal uit de reeks plus 1
    nieuwe_reeks = []       # Lege functie

    for n in range(1, m + 1):
        nieuwe_reeks.append(kleiner_dan(reeks, n))
    return nieuwe_reeks


def verhogen(reeks):
    """"""
    Verhoogt positie 1 in een lijst met 1, positie 2 met 2, enz.
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    reeks = list(reeks)

    for i, getal in enumerate(reeks):
        reeks[i] = getal + i + 1
    return reeks


def complementaire_reeksen(reeks):
    """"""
    Geeft een tuple van de verhoogde reeks en de verhoogde frequentiereeks van de gegeven reeks,
    deze zijn complementair
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert_reeks(reeks)
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( string ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( number ) ) ) ) ) ) ( expression_statement ( number ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( number ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( number ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Arend Vancraeynest/complementaire-reeksen.py"",""fullName"":""Arend Vancraeynest"",""id"":""5557"",""status"":""correct"",""submissionID"":""6393300"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-15T15:15:21.000Z"",""labels"":""keuz""}"
981,/home/maxiem/Downloads/files/Shuaiqi Wang/complementaire-reeksen.py,"def increasing(a):
    if isinstance(a, tuple):
        b = list(a)
        if sorted(b) == b:
            return True
        return False
    else:
        if sorted(a) == a:
            return True
        return False

def frequency_sequence(a):
    if increasing(a):
        long_list_or_tuple = a[-1] + 1
        new_list = []
        for i in range(1, long_list_or_tuple + 1):
            count_number = 0
            for m in a:
                if m < i:
                    count_number += 1
            new_list.append(count_number)
        return new_list
    else:
        raise AssertionError(""given sequence is not increasing"")

def lift(a):
    new_list = []
    long_list_or_tuple = len(a)
    plus_number = 1
    for i in a:
        new_i = i + plus_number
        plus_number += 1
        new_list.append(new_i)
        new_i = 0
    return new_list

def complementary_sequences(a):
    if increasing(a):
        return (lift(a), lift(frequency_sequence(a)))
    else:
        raise AssertionError(""given sequence is not increasing"")
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ),"{""filename"":""Shuaiqi Wang/complementaire-reeksen.py"",""fullName"":""Shuaiqi Wang"",""id"":""13598"",""status"":""correct"",""submissionID"":""6420511"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T16:43:15.000Z"",""labels"":""keuz""}"
982,/home/maxiem/Downloads/files/Emiel Evenepoel/complementaire-reeksen.py,"def stijgend(eerste_reeks):
    
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    
    #Bepaal of het voorgaande element groter is
    for i in range(len(eerste_reeks) - 1 ):
        if eerste_reeks[i] > eerste_reeks[i + 1]:
            return False
        
    return True


def verhogen(eerste_reeks):
    
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    #Define empty list
    new_list = [] #We'll fill it in here
    
    #Calculate new list 
    for i in range(len(eerste_reeks)):
        new_var = int(eerste_reeks[i] + i + 1)
        new_list.append(new_var)
    
    return new_list
        
if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Emiel Evenepoel/complementaire-reeksen.py"",""fullName"":""Emiel Evenepoel"",""id"":""13026"",""status"":""runtime error"",""submissionID"":""6421959"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T18:20:54.000Z"",""labels"":""n/a""}"
983,/home/maxiem/Downloads/files/Triana Forment/complementaire-reeksen.py,"def increasing(lst):
    
    """"""
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    i = 0
    for n in lst:
        if n >= i:
            i = n
        else:
            return False
    return True

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
    
def frequency_sequence(lst):
    """"""
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(lst), ""given sequence is not increasing""
    
    freq = []
    for i in range(1, lst[-1]+2):
        count = 0
        for n in lst:
            if n < i:
                count += 1
        freq.append(count)
        
    return freq

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()

def lift(lst):

    """"""
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    lifted = []
    i = 1
    for n in lst:
        lifted.append(n + i)
        i += 1
    return lifted

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
        
def complementary_sequences(lst):
    """"""
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    """"""
    assert increasing(lst), ""given sequence is not increasing""
    
    lifted = lift(lst)
    freq = lift(frequency_sequence(lst))
    return (lifted, freq)
    
if __name__ == ""__main__"":
    import doctest
    doctest.testmod()    ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Triana Forment/complementaire-reeksen.py"",""fullName"":""Triana Forment"",""id"":""13617"",""status"":""correct"",""submissionID"":""6279966"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-05T12:12:54.000Z"",""labels"":""keuz""}"
984,/home/maxiem/Downloads/files/Elena Ramos Varas/complementaire-reeksen.py,"def increasing(sequence):
    '''
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    '''
    length = len(sequence)
    for i in range(1, length):
        if sequence[i] < sequence[i - 1]:
            return False
    return True

def error(sequence):
    assert increasing(sequence), ""given sequence is not increasing""

def frequency_sequence(sequence):
    '''
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    '''

    error(sequence)

    m = sequence[-1]
    length_freq = m + 1
    frequency = []
    for i in range(1, length_freq + 1):
        count = 0
        for digit in sequence:
            count += 1 if digit < i else 0
        frequency.append(count)
    return frequency

def lift(sequence):
    '''
    >>> lift([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> lift((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> lift([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    '''
    i = 0
    lift_list = []
    for digit in sequence:
        i += 1
        lift_list.append(digit + i)
    return lift_list

def complementary_sequences(sequence):
    '''
    >>> complementary_sequences([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementary_sequences((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementary_sequences([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: given sequence is not increasing
    '''
    error(sequence)

    freq_seq = frequency_sequence(sequence)
    return (lift(sequence), lift(freq_seq))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Elena Ramos Varas/complementaire-reeksen.py"",""fullName"":""Elena Ramos Varas"",""id"":""13616"",""status"":""correct"",""submissionID"":""6410971"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T09:11:38.000Z"",""labels"":""keuz""}"
985,/home/maxiem/Downloads/files/Johan Van den Neste/complementaire-reeksen.py,"
def pairwise(items):
    if len(items) > 1:
        last = items[0]
        for current in items[1:]:
            yield (last, current)
            last = current

def stijgend(reeks):
    """"""
    Geeft True terug als de gegeven reeks stijgend is

    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    return all(x <= y for x, y in pairwise(reeks))

def frequentiereeks_gen(reeks):
    if not stijgend(reeks):
        raise AssertionError(""gegeven reeks is niet stijgend"")
    length = reeks[-1] + 1
    index = 0
    for i in range(length):
        while index < len(reeks) and reeks[index] < i + 1:
            index += 1
        yield index

def frequentiereeks(reeks):
    """"""
    Geeft de freq reeks voor de gegeven reeks

    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return list(frequentiereeks_gen(reeks))

def verhogen(reeks):
    """"""

    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    return [value + index + 1 for index, value in enumerate(reeks)]

def complementaire_reeksen(reeks):
    """"""

    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))

if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ( yield_expression ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( yield_expression ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Johan Van den Neste/complementaire-reeksen.py"",""fullName"":""Johan Van den Neste"",""id"":""13549"",""status"":""correct"",""submissionID"":""6408679"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-16T20:46:22.000Z"",""labels"":""""}"
986,/home/maxiem/Downloads/files/Narendra Kamineni/complementaire-reeksen.py,"def increasing(n):
    value = len(n)
    temp = 0
    for i, j in zip(n[:-1],n[1:]):
        if i < j:
            temp +=1
    if (value-temp>2):
        return False
    return True",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ( ERROR ) ( return_statement ( identifier ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Narendra Kamineni/complementaire-reeksen.py"",""fullName"":""Narendra Kamineni"",""id"":""13713"",""status"":""runtime error"",""submissionID"":""6423244"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T19:44:16.000Z"",""labels"":""""}"
987,/home/maxiem/Downloads/files/Nurefsan Davulcu/complementaire-reeksen.py,"#Function that checks if tuple is increasing (but not strictly)
def increasing(pn):

    '''
    >>> increasing([2, 3, 5, 7, 11, 13])
    True
    >>> increasing((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> increasing([5, 3, 2, 7, 8, 1, 9])
    False
    '''

    previous = pn[0]
    for num in pn[1:]:
        if num < previous:
            return False
        previous = num
    return True

#Function that returns frequency sequence of sequence pn
def frequency_sequence(pn):

    '''
    >>> frequency_sequence([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequency_sequence((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequency_sequence([5, 3, 2, 7, 8, 1, 9])
    Traceback(most recent call last):
    AssertionError: given sequence is not increasing
    '''
    assert increasing(pn), 'given sequence is not increasing'

    pnf = list()
    for i in range(1, pn[-1]+2):
        count = sum(num < i for num in pn)
        pnf.append(count)

    return pnf


#Function that creates lifted list e
def lift(pn):

    i = 1
    pnf = list()
    for num in pn:
        pnf.append(num + i)
        i += 1
    return pnf

def complementary_sequences(pn):
    return lift(pn), lift(frequency_sequence(pn))",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( ERROR ( string ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Nurefsan Davulcu/complementaire-reeksen.py"",""fullName"":""Nurefsan Davulcu"",""id"":""13714"",""status"":""correct"",""submissionID"":""6369497"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T22:26:31.000Z"",""labels"":""""}"
988,/home/maxiem/Downloads/files/Axelle Vannieuwenhuyse/complementaire-reeksen.py,"def stijgend(reeks):
    reeks = list(reeks)
    hihi = sorted(reeks)
    if hihi == reeks:
        return True
    return False
    
def frequentiereeks(reeks):
    if stijgend(reeks) is False:
        raise AssertionError('gegeven reeks is niet stijgend')
    reeks = list(reeks)
    grootste = reeks[-1]
    lijst = []
    for i in range(1, grootste+2):
        hihi = 0
        for j in reeks: 
            if j < i:
                hihi += 1
        lijst.append(hihi)
    return lijst
    
def verhogen(reeks):
    reeks = list(reeks)
    lijst = []
    for i, pos in enumerate(reeks):
        lijst.append(i+pos+1)
    return lijst
        ",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ) ( return_statement ( identifier ) ) ),"{""filename"":""Axelle Vannieuwenhuyse/complementaire-reeksen.py"",""fullName"":""Axelle Vannieuwenhuyse"",""id"":""7944"",""status"":""runtime error"",""submissionID"":""6334345"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-08T14:56:24.000Z"",""labels"":""""}"
989,/home/maxiem/Downloads/files/Jordi Van Migerode/complementaire-reeksen.py,"# https://dodona.ugent.be/nl/courses/359/series/3490/activities/1096544639
def stijgend(reeks):
    """"""
    >>> stijgend([2, 3, 5, 7, 11, 13])
    True
    >>> stijgend((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    True
    >>> stijgend([5, 3, 2, 7, 8, 1, 9])
    False
    """"""
    # kijk of het volgende getal in de reeks groter is dan het voorgaande voor elk getal in de reeks
    verschil = list(reeks[i] - reeks[i + 1] <= 0 for i in range(len(reeks) - 1))
    # als er alleen maar ""true"" in de lijst staat true teruggeven
    return all(verschil)

def frequentiereeks(reeks):
    """"""
    >>> frequentiereeks([2, 3, 5, 7, 11, 13])
    [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6]
    >>> frequentiereeks((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [2, 3, 5, 7, 11, 13, 14]
    >>> frequentiereeks([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    frequentielijst = []
    for i in range(reeks[-1] + 1):
        # voeg de som van het aantal keer dat een getal in de lijst kleiner is dan 1,2,3... toe aan een nieuwe lijst
        # dit werkt omdat True = 1
        frequentielijst.append(sum(getal < i + 1 for getal in reeks))
    return frequentielijst

def verhogen(reeks):
    """"""
    >>> verhogen([2, 3, 5, 7, 11, 13])
    [3, 5, 8, 11, 16, 19]
    >>> verhogen((0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6))
    [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20]
    >>> verhogen([5, 3, 2, 7, 8, 1, 9])
    [6, 5, 5, 11, 13, 7, 16]
    """"""
    reeks = list(reeks)
    for i, element in enumerate(reeks):
        # tel de positie van een getal in de lijst bij het getal op
        reeks[i] += i + 1
    return reeks
def complementaire_reeksen(reeks):
    """"""""
    >>> complementaire_reeksen([2, 3, 5, 7, 11, 13])
    ([3, 5, 8, 11, 16, 19], [1, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20])
    >>> complementaire_reeksen((1, 3, 3, 5, 5, 5, 7, 7, 7, 7))
    ([2, 5, 6, 9, 10, 11, 14, 15, 16, 17], [1, 3, 4, 7, 8, 12, 13, 18])
    >>> complementaire_reeksen([5, 3, 2, 7, 8, 1, 9])
    Traceback (most recent call last):
    AssertionError: gegeven reeks is niet stijgend
    """"""
    assert stijgend(reeks), ""gegeven reeks is niet stijgend""
    return verhogen(reeks), verhogen(frequentiereeks(reeks))
if __name__ == '__main__':
    import doctest
    doctest.testmod()
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( expression_statement ( string ) ) ) ( expression_statement ( string ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( number ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( true ) ) ( identifier ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( array ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ( number ) ) ) ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Jordi Van Migerode/complementaire-reeksen.py"",""fullName"":""Jordi Van Migerode"",""id"":""5893"",""status"":""correct"",""submissionID"":""6366265"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-12T15:19:33.000Z"",""labels"":""""}"
990,/home/maxiem/Downloads/files/Souhaïlla Arroubai/complementaire-reeksen.py,"def stijgend(reeks):
    return all(reeks[i] <= reeks[i + 1] for i in range(len(reeks) - 1))

def frequentiereeks(reeks):
    assert stijgend(reeks), 'gegeven reeks is niet stijgend'       
    
    freq, waarde, aantal = [], 0, 0
    for getal in reeks:
        while waarde < getal:
            freq.append(aantal)
            waarde += 1
            
        aantal += 1
        
    freq.append(aantal)
    
    return freq
    
def verhogen(reeks):
    return [element + positie + 1 for positie, element in enumerate(reeks)]
    
def complementaire_reeksen(reeks):
    return verhogen(reeks), verhogen(frequentiereeks(reeks))

if __name__ == '__main__':
    import doctest
    doctest.testmod()",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( array ) ) ( sequence_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( return_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ( import ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ),"{""filename"":""Souhaïlla Arroubai/complementaire-reeksen.py"",""fullName"":""Souhaïlla Arroubai"",""id"":""13853"",""status"":""correct"",""submissionID"":""6423578"",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":""2020-11-17T20:09:58.000Z"",""labels"":""""}"
991,/home/maxiem/Downloads/files/Toon Baeyens/complementaire-reeksen.py,,( program ),"{""filename"":""Toon Baeyens/complementaire-reeksen.py"",""fullName"":""Toon Baeyens"",""id"":""891"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""admin""}"
992,/home/maxiem/Downloads/files/Charlotte Van Petegem/complementaire-reeksen.py,,( program ),"{""filename"":""Charlotte Van Petegem/complementaire-reeksen.py"",""fullName"":""Charlotte Van Petegem"",""id"":""1298"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""admin""}"
993,/home/maxiem/Downloads/files/Eva Lubej/complementaire-reeksen.py,,( program ),"{""filename"":""Eva Lubej/complementaire-reeksen.py"",""fullName"":""Eva Lubej"",""id"":""11506"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""keuz""}"
994,/home/maxiem/Downloads/files/Ike Byosière/complementaire-reeksen.py,,( program ),"{""filename"":""Ike Byosière/complementaire-reeksen.py"",""fullName"":""Ike Byosière"",""id"":""8953"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""chem""}"
995,/home/maxiem/Downloads/files/Wim Cherlet/complementaire-reeksen.py,,( program ),"{""filename"":""Wim Cherlet/complementaire-reeksen.py"",""fullName"":""Wim Cherlet"",""id"":""11528"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
996,/home/maxiem/Downloads/files/Jenna Jaspers/complementaire-reeksen.py,,( program ),"{""filename"":""Jenna Jaspers/complementaire-reeksen.py"",""fullName"":""Jenna Jaspers"",""id"":""11626"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
997,/home/maxiem/Downloads/files/Sofie Raeymakers/complementaire-reeksen.py,,( program ),"{""filename"":""Sofie Raeymakers/complementaire-reeksen.py"",""fullName"":""Sofie Raeymakers"",""id"":""11555"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
998,/home/maxiem/Downloads/files/Oliver Urs Lenz/complementaire-reeksen.py,,( program ),"{""filename"":""Oliver Urs Lenz/complementaire-reeksen.py"",""fullName"":""Oliver Urs Lenz"",""id"":""11652"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""admin""}"
999,/home/maxiem/Downloads/files/Femke Van Daele/complementaire-reeksen.py,,( program ),"{""filename"":""Femke Van Daele/complementaire-reeksen.py"",""fullName"":""Femke Van Daele"",""id"":""11726"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1000,/home/maxiem/Downloads/files/Vsevolod Shlyonskiy/complementaire-reeksen.py,,( program ),"{""filename"":""Vsevolod Shlyonskiy/complementaire-reeksen.py"",""fullName"":""Vsevolod Shlyonskiy"",""id"":""8318"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""keuz""}"
1001,/home/maxiem/Downloads/files/Christophe Segers/complementaire-reeksen.py,,( program ),"{""filename"":""Christophe Segers/complementaire-reeksen.py"",""fullName"":""Christophe Segers"",""id"":""11758"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""stat""}"
1002,/home/maxiem/Downloads/files/Jana Gussé/complementaire-reeksen.py,,( program ),"{""filename"":""Jana Gussé/complementaire-reeksen.py"",""fullName"":""Jana Gussé"",""id"":""11763"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""keuz""}"
1003,/home/maxiem/Downloads/files/Vyacheslav Nemcheninov/complementaire-reeksen.py,,( program ),"{""filename"":""Vyacheslav Nemcheninov/complementaire-reeksen.py"",""fullName"":""Vyacheslav Nemcheninov"",""id"":""11785"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1004,/home/maxiem/Downloads/files/Mohamed Bellouki/complementaire-reeksen.py,,( program ),"{""filename"":""Mohamed Bellouki/complementaire-reeksen.py"",""fullName"":""Mohamed Bellouki"",""id"":""11808"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1005,/home/maxiem/Downloads/files/Yann Kandi Basunga Ndosimau/complementaire-reeksen.py,,( program ),"{""filename"":""Yann Kandi Basunga Ndosimau/complementaire-reeksen.py"",""fullName"":""Yann Kandi Basunga Ndosimau"",""id"":""6454"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1006,/home/maxiem/Downloads/files/Jelmar Bossaerts/complementaire-reeksen.py,,( program ),"{""filename"":""Jelmar Bossaerts/complementaire-reeksen.py"",""fullName"":""Jelmar Bossaerts"",""id"":""11887"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1007,/home/maxiem/Downloads/files/Dieter Gommers/complementaire-reeksen.py,,( program ),"{""filename"":""Dieter Gommers/complementaire-reeksen.py"",""fullName"":""Dieter Gommers"",""id"":""11904"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1008,/home/maxiem/Downloads/files/Michiel Desticker/complementaire-reeksen.py,,( program ),"{""filename"":""Michiel Desticker/complementaire-reeksen.py"",""fullName"":""Michiel Desticker"",""id"":""11912"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""keuz""}"
1009,/home/maxiem/Downloads/files/Robin Colenbier/complementaire-reeksen.py,,( program ),"{""filename"":""Robin Colenbier/complementaire-reeksen.py"",""fullName"":""Robin Colenbier"",""id"":""8727"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1010,/home/maxiem/Downloads/files/Anthony Gryseels/complementaire-reeksen.py,,( program ),"{""filename"":""Anthony Gryseels/complementaire-reeksen.py"",""fullName"":""Anthony Gryseels"",""id"":""12020"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""bcbt""}"
1011,/home/maxiem/Downloads/files/Babbe Cleemput/complementaire-reeksen.py,,( program ),"{""filename"":""Babbe Cleemput/complementaire-reeksen.py"",""fullName"":""Babbe Cleemput"",""id"":""12123"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1012,/home/maxiem/Downloads/files/Amani Sakande/complementaire-reeksen.py,,( program ),"{""filename"":""Amani Sakande/complementaire-reeksen.py"",""fullName"":""Amani Sakande"",""id"":""11793"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""bcbt""}"
1013,/home/maxiem/Downloads/files/Barend Vandenbussche/complementaire-reeksen.py,,( program ),"{""filename"":""Barend Vandenbussche/complementaire-reeksen.py"",""fullName"":""Barend Vandenbussche"",""id"":""7838"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""chem""}"
1014,/home/maxiem/Downloads/files/Hamza Anayat/complementaire-reeksen.py,,( program ),"{""filename"":""Hamza Anayat/complementaire-reeksen.py"",""fullName"":""Hamza Anayat"",""id"":""12198"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""chem""}"
1015,/home/maxiem/Downloads/files/Femke Muys/complementaire-reeksen.py,,( program ),"{""filename"":""Femke Muys/complementaire-reeksen.py"",""fullName"":""Femke Muys"",""id"":""12197"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""chem""}"
1016,/home/maxiem/Downloads/files/Emma Moerman/complementaire-reeksen.py,,( program ),"{""filename"":""Emma Moerman/complementaire-reeksen.py"",""fullName"":""Emma Moerman"",""id"":""12205"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1017,/home/maxiem/Downloads/files/Wouter Ooms/complementaire-reeksen.py,,( program ),"{""filename"":""Wouter Ooms/complementaire-reeksen.py"",""fullName"":""Wouter Ooms"",""id"":""12210"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""chem""}"
1018,/home/maxiem/Downloads/files/Jill Mertens/complementaire-reeksen.py,,( program ),"{""filename"":""Jill Mertens/complementaire-reeksen.py"",""fullName"":""Jill Mertens"",""id"":""12212"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1019,/home/maxiem/Downloads/files/Emilie Van Driessche/complementaire-reeksen.py,,( program ),"{""filename"":""Emilie Van Driessche/complementaire-reeksen.py"",""fullName"":""Emilie Van Driessche"",""id"":""12240"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1020,/home/maxiem/Downloads/files/Nishwa Fayyaz/complementaire-reeksen.py,,( program ),"{""filename"":""Nishwa Fayyaz/complementaire-reeksen.py"",""fullName"":""Nishwa Fayyaz"",""id"":""12247"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""biol""}"
1021,/home/maxiem/Downloads/files/Tristan De Winne/complementaire-reeksen.py,,( program ),"{""filename"":""Tristan De Winne/complementaire-reeksen.py"",""fullName"":""Tristan De Winne"",""id"":""12257"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1022,/home/maxiem/Downloads/files/Marco Harder/complementaire-reeksen.py,,( program ),"{""filename"":""Marco Harder/complementaire-reeksen.py"",""fullName"":""Marco Harder"",""id"":""12267"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""keuz""}"
1023,/home/maxiem/Downloads/files/Seyedhamed Habibi/complementaire-reeksen.py,,( program ),"{""filename"":""Seyedhamed Habibi/complementaire-reeksen.py"",""fullName"":""Seyedhamed Habibi"",""id"":""4614"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1024,/home/maxiem/Downloads/files/Claudia Isabel Roque Padilla/complementaire-reeksen.py,,( program ),"{""filename"":""Claudia Isabel Roque Padilla/complementaire-reeksen.py"",""fullName"":""Claudia Isabel Roque Padilla"",""id"":""12304"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""keuz""}"
1025,/home/maxiem/Downloads/files/Els Clarysse/complementaire-reeksen.py,,( program ),"{""filename"":""Els Clarysse/complementaire-reeksen.py"",""fullName"":""Els Clarysse"",""id"":""2100"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1026,/home/maxiem/Downloads/files/Bart Mesuere/complementaire-reeksen.py,,( program ),"{""filename"":""Bart Mesuere/complementaire-reeksen.py"",""fullName"":""Bart Mesuere"",""id"":""1"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""admin""}"
1027,/home/maxiem/Downloads/files/Gerben Debruyn/complementaire-reeksen.py,,( program ),"{""filename"":""Gerben Debruyn/complementaire-reeksen.py"",""fullName"":""Gerben Debruyn"",""id"":""5072"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1028,/home/maxiem/Downloads/files/Kristina Wicht/complementaire-reeksen.py,,( program ),"{""filename"":""Kristina Wicht/complementaire-reeksen.py"",""fullName"":""Kristina Wicht"",""id"":""12623"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1029,/home/maxiem/Downloads/files/Marie De Wilde/complementaire-reeksen.py,,( program ),"{""filename"":""Marie De Wilde/complementaire-reeksen.py"",""fullName"":""Marie De Wilde"",""id"":""7973"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1030,/home/maxiem/Downloads/files/Mattias Verscheure/complementaire-reeksen.py,,( program ),"{""filename"":""Mattias Verscheure/complementaire-reeksen.py"",""fullName"":""Mattias Verscheure"",""id"":""7987"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1031,/home/maxiem/Downloads/files/Stephanie Olesco/complementaire-reeksen.py,,( program ),"{""filename"":""Stephanie Olesco/complementaire-reeksen.py"",""fullName"":""Stephanie Olesco"",""id"":""12063"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""bcbt""}"
1032,/home/maxiem/Downloads/files/Elio Bonheure/complementaire-reeksen.py,,( program ),"{""filename"":""Elio Bonheure/complementaire-reeksen.py"",""fullName"":""Elio Bonheure"",""id"":""12938"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1033,/home/maxiem/Downloads/files/Dries Kallaert/complementaire-reeksen.py,,( program ),"{""filename"":""Dries Kallaert/complementaire-reeksen.py"",""fullName"":""Dries Kallaert"",""id"":""12942"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1034,/home/maxiem/Downloads/files/Korneel Grumieaux/complementaire-reeksen.py,,( program ),"{""filename"":""Korneel Grumieaux/complementaire-reeksen.py"",""fullName"":""Korneel Grumieaux"",""id"":""12943"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1035,/home/maxiem/Downloads/files/Nina Sterckx/complementaire-reeksen.py,,( program ),"{""filename"":""Nina Sterckx/complementaire-reeksen.py"",""fullName"":""Nina Sterckx"",""id"":""12954"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1036,/home/maxiem/Downloads/files/Jonas De Mangelaere/complementaire-reeksen.py,,( program ),"{""filename"":""Jonas De Mangelaere/complementaire-reeksen.py"",""fullName"":""Jonas De Mangelaere"",""id"":""12960"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1037,/home/maxiem/Downloads/files/Pénélope Buyssens/complementaire-reeksen.py,,( program ),"{""filename"":""Pénélope Buyssens/complementaire-reeksen.py"",""fullName"":""Pénélope Buyssens"",""id"":""12969"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1038,/home/maxiem/Downloads/files/Rune Coeman/complementaire-reeksen.py,,( program ),"{""filename"":""Rune Coeman/complementaire-reeksen.py"",""fullName"":""Rune Coeman"",""id"":""12979"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""chem""}"
1039,/home/maxiem/Downloads/files/Griet Casteleyn/complementaire-reeksen.py,,( program ),"{""filename"":""Griet Casteleyn/complementaire-reeksen.py"",""fullName"":""Griet Casteleyn"",""id"":""12985"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1040,/home/maxiem/Downloads/files/Fil Piessens/complementaire-reeksen.py,,( program ),"{""filename"":""Fil Piessens/complementaire-reeksen.py"",""fullName"":""Fil Piessens"",""id"":""7942"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""chem""}"
1041,/home/maxiem/Downloads/files/Iakovi Alexiou/complementaire-reeksen.py,,( program ),"{""filename"":""Iakovi Alexiou/complementaire-reeksen.py"",""fullName"":""Iakovi Alexiou"",""id"":""13005"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""keuz""}"
1042,/home/maxiem/Downloads/files/Justine Verhelst/complementaire-reeksen.py,,( program ),"{""filename"":""Justine Verhelst/complementaire-reeksen.py"",""fullName"":""Justine Verhelst"",""id"":""8178"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1043,/home/maxiem/Downloads/files/Simon Desmet/complementaire-reeksen.py,,( program ),"{""filename"":""Simon Desmet/complementaire-reeksen.py"",""fullName"":""Simon Desmet"",""id"":""13036"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1044,/home/maxiem/Downloads/files/Florian Vancoillie/complementaire-reeksen.py,,( program ),"{""filename"":""Florian Vancoillie/complementaire-reeksen.py"",""fullName"":""Florian Vancoillie"",""id"":""13037"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1045,/home/maxiem/Downloads/files/Lupe Hulpiau/complementaire-reeksen.py,,( program ),"{""filename"":""Lupe Hulpiau/complementaire-reeksen.py"",""fullName"":""Lupe Hulpiau"",""id"":""13055"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""chem""}"
1046,/home/maxiem/Downloads/files/Stephen Wienk/complementaire-reeksen.py,,( program ),"{""filename"":""Stephen Wienk/complementaire-reeksen.py"",""fullName"":""Stephen Wienk"",""id"":""13056"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1047,/home/maxiem/Downloads/files/Inara Yilmaz/complementaire-reeksen.py,,( program ),"{""filename"":""Inara Yilmaz/complementaire-reeksen.py"",""fullName"":""Inara Yilmaz"",""id"":""12213"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""chem""}"
1048,/home/maxiem/Downloads/files/Oceane Devos/complementaire-reeksen.py,,( program ),"{""filename"":""Oceane Devos/complementaire-reeksen.py"",""fullName"":""Oceane Devos"",""id"":""11751"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1049,/home/maxiem/Downloads/files/Etiendem Achankeng/complementaire-reeksen.py,,( program ),"{""filename"":""Etiendem Achankeng/complementaire-reeksen.py"",""fullName"":""Etiendem Achankeng"",""id"":""7977"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1050,/home/maxiem/Downloads/files/Eva Davey/complementaire-reeksen.py,,( program ),"{""filename"":""Eva Davey/complementaire-reeksen.py"",""fullName"":""Eva Davey"",""id"":""13096"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1051,/home/maxiem/Downloads/files/Stijn Verhulst/complementaire-reeksen.py,,( program ),"{""filename"":""Stijn Verhulst/complementaire-reeksen.py"",""fullName"":""Stijn Verhulst"",""id"":""13093"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1052,/home/maxiem/Downloads/files/Sethe Lauwereys/complementaire-reeksen.py,,( program ),"{""filename"":""Sethe Lauwereys/complementaire-reeksen.py"",""fullName"":""Sethe Lauwereys"",""id"":""13100"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1053,/home/maxiem/Downloads/files/Catho De Smet/complementaire-reeksen.py,,( program ),"{""filename"":""Catho De Smet/complementaire-reeksen.py"",""fullName"":""Catho De Smet"",""id"":""13102"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1054,/home/maxiem/Downloads/files/Karen Praxedes/complementaire-reeksen.py,,( program ),"{""filename"":""Karen Praxedes/complementaire-reeksen.py"",""fullName"":""Karen Praxedes"",""id"":""13104"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1055,/home/maxiem/Downloads/files/Sarah Eggermont/complementaire-reeksen.py,,( program ),"{""filename"":""Sarah Eggermont/complementaire-reeksen.py"",""fullName"":""Sarah Eggermont"",""id"":""11925"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1056,/home/maxiem/Downloads/files/Mathijs Baert/complementaire-reeksen.py,,( program ),"{""filename"":""Mathijs Baert/complementaire-reeksen.py"",""fullName"":""Mathijs Baert"",""id"":""13150"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1057,/home/maxiem/Downloads/files/Maxine Vergucht/complementaire-reeksen.py,,( program ),"{""filename"":""Maxine Vergucht/complementaire-reeksen.py"",""fullName"":""Maxine Vergucht"",""id"":""8015"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""bcbt""}"
1058,/home/maxiem/Downloads/files/Ahmed Fawzy Mahmoud Salem Kandeel/complementaire-reeksen.py,,( program ),"{""filename"":""Ahmed Fawzy Mahmoud Salem Kandeel/complementaire-reeksen.py"",""fullName"":""Ahmed Fawzy Mahmoud Salem Kandeel"",""id"":""13162"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1059,/home/maxiem/Downloads/files/Wout De Saegher/complementaire-reeksen.py,,( program ),"{""filename"":""Wout De Saegher/complementaire-reeksen.py"",""fullName"":""Wout De Saegher"",""id"":""7776"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1060,/home/maxiem/Downloads/files/Celine Callewaert/complementaire-reeksen.py,,( program ),"{""filename"":""Celine Callewaert/complementaire-reeksen.py"",""fullName"":""Celine Callewaert"",""id"":""7610"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1061,/home/maxiem/Downloads/files/Moyra Delafonteyne/complementaire-reeksen.py,,( program ),"{""filename"":""Moyra Delafonteyne/complementaire-reeksen.py"",""fullName"":""Moyra Delafonteyne"",""id"":""8684"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""biol""}"
1062,/home/maxiem/Downloads/files/Sander Geluck/complementaire-reeksen.py,,( program ),"{""filename"":""Sander Geluck/complementaire-reeksen.py"",""fullName"":""Sander Geluck"",""id"":""13335"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1063,/home/maxiem/Downloads/files/Wannes Hendrickx/complementaire-reeksen.py,,( program ),"{""filename"":""Wannes Hendrickx/complementaire-reeksen.py"",""fullName"":""Wannes Hendrickx"",""id"":""13340"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1064,/home/maxiem/Downloads/files/Arne Hendrickx/complementaire-reeksen.py,,( program ),"{""filename"":""Arne Hendrickx/complementaire-reeksen.py"",""fullName"":""Arne Hendrickx"",""id"":""13343"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""keuz""}"
1065,/home/maxiem/Downloads/files/Arnout Ploem/complementaire-reeksen.py,,( program ),"{""filename"":""Arnout Ploem/complementaire-reeksen.py"",""fullName"":""Arnout Ploem"",""id"":""13296"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""fyss""}"
1066,/home/maxiem/Downloads/files/Jana Van de Velde/complementaire-reeksen.py,,( program ),"{""filename"":""Jana Van de Velde/complementaire-reeksen.py"",""fullName"":""Jana Van de Velde"",""id"":""13348"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1067,/home/maxiem/Downloads/files/Ruben Burssens/complementaire-reeksen.py,,( program ),"{""filename"":""Ruben Burssens/complementaire-reeksen.py"",""fullName"":""Ruben Burssens"",""id"":""13537"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1068,/home/maxiem/Downloads/files/Thomas Smets/complementaire-reeksen.py,,( program ),"{""filename"":""Thomas Smets/complementaire-reeksen.py"",""fullName"":""Thomas Smets"",""id"":""13573"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1069,/home/maxiem/Downloads/files/Josse Leliaert/complementaire-reeksen.py,,( program ),"{""filename"":""Josse Leliaert/complementaire-reeksen.py"",""fullName"":""Josse Leliaert"",""id"":""11658"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1070,/home/maxiem/Downloads/files/Qianqian Li/complementaire-reeksen.py,,( program ),"{""filename"":""Qianqian Li/complementaire-reeksen.py"",""fullName"":""Qianqian Li"",""id"":""5471"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1071,/home/maxiem/Downloads/files/Yu Zhang/complementaire-reeksen.py,,( program ),"{""filename"":""Yu Zhang/complementaire-reeksen.py"",""fullName"":""Yu Zhang"",""id"":""13609"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1072,/home/maxiem/Downloads/files/Sofie Labat/complementaire-reeksen.py,,( program ),"{""filename"":""Sofie Labat/complementaire-reeksen.py"",""fullName"":""Sofie Labat"",""id"":""13612"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""keuz""}"
1073,/home/maxiem/Downloads/files/Adriaan Ampe/complementaire-reeksen.py,,( program ),"{""filename"":""Adriaan Ampe/complementaire-reeksen.py"",""fullName"":""Adriaan Ampe"",""id"":""13324"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""n/a""}"
1074,/home/maxiem/Downloads/files/Els Op de Beeck/complementaire-reeksen.py,,( program ),"{""filename"":""Els Op de Beeck/complementaire-reeksen.py"",""fullName"":""Els Op de Beeck"",""id"":""13682"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1075,/home/maxiem/Downloads/files/Arno Plaetinck/complementaire-reeksen.py,,( program ),"{""filename"":""Arno Plaetinck/complementaire-reeksen.py"",""fullName"":""Arno Plaetinck"",""id"":""13687"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1076,/home/maxiem/Downloads/files/Bram Vancraeynest-De Cuiper/complementaire-reeksen.py,,( program ),"{""filename"":""Bram Vancraeynest-De Cuiper/complementaire-reeksen.py"",""fullName"":""Bram Vancraeynest-De Cuiper"",""id"":""789"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1077,/home/maxiem/Downloads/files/Gwendolyn Vervaeke/complementaire-reeksen.py,,( program ),"{""filename"":""Gwendolyn Vervaeke/complementaire-reeksen.py"",""fullName"":""Gwendolyn Vervaeke"",""id"":""6941"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1078,/home/maxiem/Downloads/files/Bram Segers/complementaire-reeksen.py,,( program ),"{""filename"":""Bram Segers/complementaire-reeksen.py"",""fullName"":""Bram Segers"",""id"":""13722"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1079,/home/maxiem/Downloads/files/Steven De Decker/complementaire-reeksen.py,,( program ),"{""filename"":""Steven De Decker/complementaire-reeksen.py"",""fullName"":""Steven De Decker"",""id"":""13800"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1080,/home/maxiem/Downloads/files/Ruben Blomme/complementaire-reeksen.py,,( program ),"{""filename"":""Ruben Blomme/complementaire-reeksen.py"",""fullName"":""Ruben Blomme"",""id"":""13764"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1081,/home/maxiem/Downloads/files/Rien Maertens/complementaire-reeksen.py,,( program ),"{""filename"":""Rien Maertens/complementaire-reeksen.py"",""fullName"":""Rien Maertens"",""id"":""726"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1082,/home/maxiem/Downloads/files/Antoine Van de Vloet/complementaire-reeksen.py,,( program ),"{""filename"":""Antoine Van de Vloet/complementaire-reeksen.py"",""fullName"":""Antoine Van de Vloet"",""id"":""7916"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1083,/home/maxiem/Downloads/files/Oussama Sadik/complementaire-reeksen.py,,( program ),"{""filename"":""Oussama Sadik/complementaire-reeksen.py"",""fullName"":""Oussama Sadik"",""id"":""13887"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1084,/home/maxiem/Downloads/files/Elias Janssens/complementaire-reeksen.py,,( program ),"{""filename"":""Elias Janssens/complementaire-reeksen.py"",""fullName"":""Elias Janssens"",""id"":""3143"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1085,/home/maxiem/Downloads/files/Vera van Noort/complementaire-reeksen.py,,( program ),"{""filename"":""Vera van Noort/complementaire-reeksen.py"",""fullName"":""Vera van Noort"",""id"":""10806"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1086,/home/maxiem/Downloads/files/Ijlal Haider/complementaire-reeksen.py,,( program ),"{""filename"":""Ijlal Haider/complementaire-reeksen.py"",""fullName"":""Ijlal Haider"",""id"":""13570"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1087,/home/maxiem/Downloads/files/Laurence Rijssegem/complementaire-reeksen.py,,( program ),"{""filename"":""Laurence Rijssegem/complementaire-reeksen.py"",""fullName"":""Laurence Rijssegem"",""id"":""14173"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1088,/home/maxiem/Downloads/files/Yannick VAN DEN ABBEEL/complementaire-reeksen.py,,( program ),"{""filename"":""Yannick VAN DEN ABBEEL/complementaire-reeksen.py"",""fullName"":""Yannick VAN DEN ABBEEL"",""id"":""14230"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1089,/home/maxiem/Downloads/files/Wesley De Neve/complementaire-reeksen.py,,( program ),"{""filename"":""Wesley De Neve/complementaire-reeksen.py"",""fullName"":""Wesley De Neve"",""id"":""1217"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1090,/home/maxiem/Downloads/files/Senne Letouche/complementaire-reeksen.py,,( program ),"{""filename"":""Senne Letouche/complementaire-reeksen.py"",""fullName"":""Senne Letouche"",""id"":""14307"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1091,/home/maxiem/Downloads/files/Lode Van Herck/complementaire-reeksen.py,,( program ),"{""filename"":""Lode Van Herck/complementaire-reeksen.py"",""fullName"":""Lode Van Herck"",""id"":""14553"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1092,/home/maxiem/Downloads/files/Frederic Leclercq/complementaire-reeksen.py,,( program ),"{""filename"":""Frederic Leclercq/complementaire-reeksen.py"",""fullName"":""Frederic Leclercq"",""id"":""13836"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1093,/home/maxiem/Downloads/files/Wouter De Bolle/complementaire-reeksen.py,,( program ),"{""filename"":""Wouter De Bolle/complementaire-reeksen.py"",""fullName"":""Wouter De Bolle"",""id"":""7537"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1094,/home/maxiem/Downloads/files/Sten Somers/complementaire-reeksen.py,,( program ),"{""filename"":""Sten Somers/complementaire-reeksen.py"",""fullName"":""Sten Somers"",""id"":""14883"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1095,/home/maxiem/Downloads/files/Nathan Vanrafelghem/complementaire-reeksen.py,,( program ),"{""filename"":""Nathan Vanrafelghem/complementaire-reeksen.py"",""fullName"":""Nathan Vanrafelghem"",""id"":""5230"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1096,/home/maxiem/Downloads/files/Elke Cabooter/complementaire-reeksen.py,,( program ),"{""filename"":""Elke Cabooter/complementaire-reeksen.py"",""fullName"":""Elke Cabooter"",""id"":""16166"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1097,/home/maxiem/Downloads/files/Peter Vyncke/complementaire-reeksen.py,,( program ),"{""filename"":""Peter Vyncke/complementaire-reeksen.py"",""fullName"":""Peter Vyncke"",""id"":""16184"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1098,/home/maxiem/Downloads/files/Anaïs Derveeuw/complementaire-reeksen.py,,( program ),"{""filename"":""Anaïs Derveeuw/complementaire-reeksen.py"",""fullName"":""Anaïs Derveeuw"",""id"":""3617"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1099,/home/maxiem/Downloads/files/Tobiah Lissens/complementaire-reeksen.py,,( program ),"{""filename"":""Tobiah Lissens/complementaire-reeksen.py"",""fullName"":""Tobiah Lissens"",""id"":""16655"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1100,/home/maxiem/Downloads/files/Sebastijn Lissens/complementaire-reeksen.py,,( program ),"{""filename"":""Sebastijn Lissens/complementaire-reeksen.py"",""fullName"":""Sebastijn Lissens"",""id"":""16657"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1101,/home/maxiem/Downloads/files/Liesbeth Blomme/complementaire-reeksen.py,,( program ),"{""filename"":""Liesbeth Blomme/complementaire-reeksen.py"",""fullName"":""Liesbeth Blomme"",""id"":""16438"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1102,/home/maxiem/Downloads/files/Tim Vercruysse/complementaire-reeksen.py,,( program ),"{""filename"":""Tim Vercruysse/complementaire-reeksen.py"",""fullName"":""Tim Vercruysse"",""id"":""16622"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1103,/home/maxiem/Downloads/files/Benjamin Samyn/complementaire-reeksen.py,,( program ),"{""filename"":""Benjamin Samyn/complementaire-reeksen.py"",""fullName"":""Benjamin Samyn"",""id"":""1199"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1104,/home/maxiem/Downloads/files/Nico Reynaert/complementaire-reeksen.py,,( program ),"{""filename"":""Nico Reynaert/complementaire-reeksen.py"",""fullName"":""Nico Reynaert"",""id"":""1200"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1105,/home/maxiem/Downloads/files/Lauren Conaert/complementaire-reeksen.py,,( program ),"{""filename"":""Lauren Conaert/complementaire-reeksen.py"",""fullName"":""Lauren Conaert"",""id"":""15736"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1106,/home/maxiem/Downloads/files/Lisa Ronsyn/complementaire-reeksen.py,,( program ),"{""filename"":""Lisa Ronsyn/complementaire-reeksen.py"",""fullName"":""Lisa Ronsyn"",""id"":""9297"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1107,/home/maxiem/Downloads/files/Hao Qin/complementaire-reeksen.py,,( program ),"{""filename"":""Hao Qin/complementaire-reeksen.py"",""fullName"":""Hao Qin"",""id"":""923"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1108,/home/maxiem/Downloads/files/Pieter Asselman/complementaire-reeksen.py,,( program ),"{""filename"":""Pieter Asselman/complementaire-reeksen.py"",""fullName"":""Pieter Asselman"",""id"":""17602"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1109,/home/maxiem/Downloads/files/Karel Hermans/complementaire-reeksen.py,,( program ),"{""filename"":""Karel Hermans/complementaire-reeksen.py"",""fullName"":""Karel Hermans"",""id"":""18452"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1110,/home/maxiem/Downloads/files/Peter Vyncke-1/complementaire-reeksen.py,,( program ),"{""filename"":""Peter Vyncke-1/complementaire-reeksen.py"",""fullName"":""Peter Vyncke"",""id"":""19177"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1111,/home/maxiem/Downloads/files/Niels Tack/complementaire-reeksen.py,,( program ),"{""filename"":""Niels Tack/complementaire-reeksen.py"",""fullName"":""Niels Tack"",""id"":""19324"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1112,/home/maxiem/Downloads/files/Tibo D'Hondt/complementaire-reeksen.py,,( program ),"{""filename"":""Tibo D'Hondt/complementaire-reeksen.py"",""fullName"":""Tibo D'Hondt"",""id"":""1080"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1113,/home/maxiem/Downloads/files/Ashton Coplin/complementaire-reeksen.py,,( program ),"{""filename"":""Ashton Coplin/complementaire-reeksen.py"",""fullName"":""Ashton Coplin"",""id"":""19667"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1114,/home/maxiem/Downloads/files/Keerthika Nirmani Ranathunga Arachchige/complementaire-reeksen.py,,( program ),"{""filename"":""Keerthika Nirmani Ranathunga Arachchige/complementaire-reeksen.py"",""fullName"":""Keerthika Nirmani Ranathunga Arachchige"",""id"":""14543"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1115,/home/maxiem/Downloads/files/Liam De Bosscher/complementaire-reeksen.py,,( program ),"{""filename"":""Liam De Bosscher/complementaire-reeksen.py"",""fullName"":""Liam De Bosscher"",""id"":""20301"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1116,/home/maxiem/Downloads/files/Vasyl-Illya Bakhovskyy/complementaire-reeksen.py,,( program ),"{""filename"":""Vasyl-Illya Bakhovskyy/complementaire-reeksen.py"",""fullName"":""Vasyl-Illya Bakhovskyy"",""id"":""20520"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1117,/home/maxiem/Downloads/files/Lucas Sas/complementaire-reeksen.py,,( program ),"{""filename"":""Lucas Sas/complementaire-reeksen.py"",""fullName"":""Lucas Sas"",""id"":""20504"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1118,/home/maxiem/Downloads/files/Chuting Cao/complementaire-reeksen.py,,( program ),"{""filename"":""Chuting Cao/complementaire-reeksen.py"",""fullName"":""Chuting Cao"",""id"":""20409"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1119,/home/maxiem/Downloads/files/Maxiem Geldhof/complementaire-reeksen.py,,( program ),"{""filename"":""Maxiem Geldhof/complementaire-reeksen.py"",""fullName"":""Maxiem Geldhof"",""id"":""3020"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1120,/home/maxiem/Downloads/files/Thibo De Meester/complementaire-reeksen.py,,( program ),"{""filename"":""Thibo De Meester/complementaire-reeksen.py"",""fullName"":""Thibo De Meester"",""id"":""20524"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1121,/home/maxiem/Downloads/files/Kato De Munter/complementaire-reeksen.py,,( program ),"{""filename"":""Kato De Munter/complementaire-reeksen.py"",""fullName"":""Kato De Munter"",""id"":""19919"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1122,/home/maxiem/Downloads/files/Arne Jacobs/complementaire-reeksen.py,,( program ),"{""filename"":""Arne Jacobs/complementaire-reeksen.py"",""fullName"":""Arne Jacobs"",""id"":""2979"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1123,/home/maxiem/Downloads/files/Hannah Vanhercke/complementaire-reeksen.py,,( program ),"{""filename"":""Hannah Vanhercke/complementaire-reeksen.py"",""fullName"":""Hannah Vanhercke"",""id"":""21574"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1124,/home/maxiem/Downloads/files/Stijn Huysman/complementaire-reeksen.py,,( program ),"{""filename"":""Stijn Huysman/complementaire-reeksen.py"",""fullName"":""Stijn Huysman"",""id"":""19305"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1125,/home/maxiem/Downloads/files/Joren Desloovere/complementaire-reeksen.py,,( program ),"{""filename"":""Joren Desloovere/complementaire-reeksen.py"",""fullName"":""Joren Desloovere"",""id"":""20343"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1126,/home/maxiem/Downloads/files/Philippe Soubrier/complementaire-reeksen.py,,( program ),"{""filename"":""Philippe Soubrier/complementaire-reeksen.py"",""fullName"":""Philippe Soubrier"",""id"":""3708"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1127,/home/maxiem/Downloads/files/Marie Van Dijck/complementaire-reeksen.py,,( program ),"{""filename"":""Marie Van Dijck/complementaire-reeksen.py"",""fullName"":""Marie Van Dijck"",""id"":""21854"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1128,/home/maxiem/Downloads/files/Lien Schrooten/complementaire-reeksen.py,,( program ),"{""filename"":""Lien Schrooten/complementaire-reeksen.py"",""fullName"":""Lien Schrooten"",""id"":""20249"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1129,/home/maxiem/Downloads/files/Maïté Cornet/complementaire-reeksen.py,,( program ),"{""filename"":""Maïté Cornet/complementaire-reeksen.py"",""fullName"":""Maïté Cornet"",""id"":""20658"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1130,/home/maxiem/Downloads/files/Dries Keppens/complementaire-reeksen.py,,( program ),"{""filename"":""Dries Keppens/complementaire-reeksen.py"",""fullName"":""Dries Keppens"",""id"":""20527"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
1131,/home/maxiem/Downloads/files/Anne-Laura Monten/complementaire-reeksen.py,,( program ),"{""filename"":""Anne-Laura Monten/complementaire-reeksen.py"",""fullName"":""Anne-Laura Monten"",""id"":""20146"",""status"":"""",""submissionID"":"""",""nameEN"":""Complementary sequences"",""nameNL"":""Complementaire reeksen"",""exerciseID"":""1096544639"",""createdAt"":null,""labels"":""""}"
