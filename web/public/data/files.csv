id,path,content,ast,extra
430,/home/maxiem/Downloads/files/Peter Dawyndt/mathemagisch.py,"# read number
number = input()

# determine length of number
length = len(number)

# determine sum by suppressing each of the digits in the given number
total = 0
for index in range(length):

    term = int(number[:index] + number[index + 1:])
    total += term
    print(f'{""+"" if index == length - 1 else "" ""}{term:{length}d}')

# output sum
print('=' * (length + 1))
print(f'{total:{length + 1}d}')
",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Peter Dawyndt/mathemagisch.py"",""fullName"":""Peter Dawyndt"",""id"":""3"",""status"":""correct"",""submissionID"":""5885752"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-10T10:57:29.000Z"",""labels"":""admin""}"
431,/home/maxiem/Downloads/files/Toon Baeyens/mathemagisch.py,,( program ),"{""filename"":""Toon Baeyens/mathemagisch.py"",""fullName"":""Toon Baeyens"",""id"":""891"",""status"":""wrong"",""submissionID"":""5721863"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-09-28T08:43:18.000Z"",""labels"":""admin""}"
432,/home/maxiem/Downloads/files/Annick Van Daele/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
m = input()

n = len(m)
breedte = n+1
som = 0

for i in range(n-1):
    woord = m[0:i] + m[i+1:]
    som += int(woord)
    print(f'{int(woord):>{breedte}d}')
woord = m[0:n-1]
som += int(woord)
print(f'+ {int(woord):>{breedte-2}d}')
lijn = '=' * breedte
print(f'{lijn}')
print(f'{som:>{breedte}d}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Annick Van Daele/mathemagisch.py"",""fullName"":""Annick Van Daele"",""id"":""17"",""status"":""correct"",""submissionID"":""5867800"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-08T20:42:13.000Z"",""labels"":""admin""}"
433,/home/maxiem/Downloads/files/Warre Dhondt/mathemagisch.py,"number = input('Number: ')
len = len(number)
sum = 0
i = 0
z = len-1
for i in range(len):
    new_number = number[:i] + number[i+1:]
    if new_number.count('0') == z:
        print((z)*' ','0')
    elif new_number[0] == '0':
        new_number = new_number.lstrip('0')
        print(f'   {new_number}')
        sum += int(new_number)
    elif i == z:
        print(f'+ {new_number}')
        sum += int(new_number)
    else: 
        print(f'  {new_number}') 
        sum += int(new_number)
    
    i += 1
    
print((len+1)*'=')
print(f' {sum}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( identifier ) ) ( string ) ) ( string ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Warre Dhondt/mathemagisch.py"",""fullName"":""Warre Dhondt"",""id"":""11495"",""status"":""correct"",""submissionID"":""5989136"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T18:45:04.000Z"",""labels"":""bcbt""}"
434,/home/maxiem/Downloads/files/Urta Berani/mathemagisch.py,"# input
first = input()


som = 0
for x in range(len(first)-1):
    eerste = first[:x] + first[x+1:]
    som += int(eerste)
    i = 0
    while eerste[i] == ""0"" and i != len(eerste)-1:
        eerste = "" ""*(i+1) + eerste[i+1:]
        i += 1
    print(""  "" +eerste)
print(f'+ {first[:len(first)-1] + first[len(first):]}')
som += int(first[:len(first)-1] + first[len(first):])
print(""=""*(len(first)+1))
print(f' {som}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( subscript_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Urta Berani/mathemagisch.py"",""fullName"":""Urta Berani"",""id"":""11496"",""status"":""correct"",""submissionID"":""6020266"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:51:40.000Z"",""labels"":""bcbt""}"
435,/home/maxiem/Downloads/files/Annabelle Mussly/mathemagisch.py,"import copy
getal = input()
lijst_cijfers = []
nieuwe_getallen = ''
som = 0
hoeveel = 0
plaats_0 = []

for element in getal:
    lijst_cijfers.append(element.strip())
lijst = copy.copy(lijst_cijfers)

for cijfer in range(len(lijst_cijfers)):
    lijst.pop(cijfer)

    if lijst[0] == '0':
        teller = 0
        while lijst[teller] == '0' and lijst.count(' ') < len(lijst) - 1:
            lijst[teller] = ' '
            teller += 1
        teller = 0

    if cijfer == len(lijst_cijfers) - 1:
        nieuwe_getallen += '+ ' + ''.join(lijst) + '\n'

    else:
        nieuwe_getallen += '  ' + ''.join(lijst) + '\n'

    hoeveel += int(''.join(lijst))
    lijst = copy.copy(lijst_cijfers)

nieuwe_getallen += '=' * (len(lijst_cijfers) + 1) + '\n' + ' ' + str(hoeveel)
print(nieuwe_getallen)
",( program ( expression_statement ( import ) ( ERROR ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( string ( escape_sequence ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( string ( escape_sequence ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( string ( escape_sequence ) ) ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Annabelle Mussly/mathemagisch.py"",""fullName"":""Annabelle Mussly"",""id"":""8158"",""status"":""correct"",""submissionID"":""5835053"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-06T19:05:23.000Z"",""labels"":""chem""}"
436,/home/maxiem/Downloads/files/Stan Willemyns/mathemagisch.py,"# input
m_str = input()
n_int = len(m_str)
# initialization of variables
i = 0
sum_int = 0
while i < n_int:
    # remove the i-th character in m_str:
    number_str = m_str[:i] + m_str[i+1:]
    # generate output:
    if i == n_int-1:
        print('+{:>{width}d}'.format(int(number_str), width=n_int))
    else:
        print('{:>{width}d}'.format(int(number_str), width=n_int + 1))
    # calculate sum of numbers
    sum_int += int(number_str)
    i += 1
# print sum:
print('{0:=<{width}s}\n{1:''>{width}d}'.format('', sum_int, width=n_int+1))",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ( jsx_namespace_name ( identifier ) ( ERROR ( ERROR ) ) ( identifier ) ) ( jsx_attribute ( property_identifier ) ) ( jsx_attribute ( property_identifier ) ) ( jsx_attribute ( property_identifier ) ) ( jsx_attribute ( property_identifier ) ) ( jsx_attribute ( jsx_namespace_name ( identifier ) ( identifier ) ) ) ( ERROR ) ( jsx_attribute ( jsx_namespace_name ( identifier ) ( ERROR ) ( identifier ) ) ) ( ERROR ) ( jsx_attribute ( property_identifier ) ) ( ERROR ) ( jsx_attribute ( jsx_namespace_name ( identifier ) ( ERROR ( number ) ) ( ERROR ( ERROR ) ) ( identifier ) ) ) ( jsx_attribute ( jsx_namespace_name ( identifier ) ( identifier ) ) ) ( jsx_attribute ( property_identifier ) ) ( ERROR ) ( jsx_attribute ( jsx_namespace_name ( identifier ) ( identifier ) ) ) ) ( expression_statement ( parenthesized_expression ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ( escape_sequence ) ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( string ) ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ),"{""filename"":""Stan Willemyns/mathemagisch.py"",""fullName"":""Stan Willemyns"",""id"":""11499"",""status"":""correct"",""submissionID"":""5754977"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-09-30T09:41:45.000Z"",""labels"":""keuz""}"
437,/home/maxiem/Downloads/files/Joram Elias/mathemagisch.py,"getal = input()
aantal = len(getal)
resultaat = 0

for i in range(aantal):
    if i != (aantal - 1):
        if getal[1:aantal] == ('0' * (aantal - 1)) and i == 0:
            print(("" "" * aantal) + ""0"")
        elif getal[1] == '0' and i == 0:
            print(f'   {getal[2:aantal + 1]}')
        else:
            print(f'  {getal[0:i] + getal[i + 1:aantal + 1]}')
        resultaat += int(getal[0:i] + getal[i + 1:aantal + 1])
    if i == (aantal - 1):
        print(f'+ {getal[0:i] + getal[i + 1:aantal + 1]}')
        resultaat += int(getal[0:i] + getal[i + 1:aantal + 1])

print(""="" * (aantal + 1))
print(f' {resultaat}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( string ) ( identifier ) ) ) ( string ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Joram Elias/mathemagisch.py"",""fullName"":""Joram Elias"",""id"":""11505"",""status"":""correct"",""submissionID"":""5990288"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T22:18:08.000Z"",""labels"":""keuz""}"
438,/home/maxiem/Downloads/files/Femke Vandewalle/mathemagisch.py,"getal = input()
som = 0
s = str(getal)
a = int(len(s) + 1)
b = int(len(s))

gelijk = '=' * (len(s) + 1)

i = 1
while i <= len(getal):
    if i == 1:
        getal_weg = int(getal.replace(getal[i-1], """", 1))
        som += int(getal_weg)
        print('{:>{}}'.format(getal_weg,a))
    elif i == len(getal):
        getal_weg = int(getal[:i-1] + getal[i:])
        som += int(getal_weg)
        print('+{:>{}}'.format(getal_weg,b))
        break
    else:
        getal_weg = int(getal[:i-1] + getal[i:])
        som += int(getal_weg)
        print('{:>{}}'.format(getal_weg,a))

    i += 1

print(f'{gelijk}')
print("" {}"".format(som))

",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( string ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( break_statement ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Femke Vandewalle/mathemagisch.py"",""fullName"":""Femke Vandewalle"",""id"":""11507"",""status"":""correct"",""submissionID"":""6002603"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T09:13:22.000Z"",""labels"":""bcbt""}"
439,/home/maxiem/Downloads/files/Maud Boghaert/mathemagisch.py,"m=(input())
data=[]

def wegdoen(i,getal):
    uitkomst=''
    for index in range(len(str(getal))):
        if index!=i:
            uitkomst += str(getal)[index]
    nognullen = True
    nullenweg = ''
    for i,cijfer in enumerate(uitkomst):
        if int(cijfer)==0 and nognullen and i!=len(uitkomst)-1:
            nullenweg+= ' '
        elif int(cijfer)!=0 or not nognullen or i==len(uitkomst)-1:
            nognullen = False
            nullenweg += cijfer

    return(nullenweg)


for i in range(len(m)):
    f= wegdoen(i, m)
    data.append(int(f))

    print(f'  {f}  '.rstrip() if i< ((len(m)-1)) else f""+ {f} "".rstrip())


print((len(m)+1)*'=')
som = sum(data)
print(f' {som}  '.rstrip())
",( program ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( parenthesized_expression ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ) ) ) ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ) ) ) ) ) ),"{""filename"":""Maud Boghaert/mathemagisch.py"",""fullName"":""Maud Boghaert"",""id"":""11508"",""status"":""correct"",""submissionID"":""5948981"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-14T12:42:59.000Z"",""labels"":""geog""}"
440,/home/maxiem/Downloads/files/Femke Van der Stiggel/mathemagisch.py,"#opvragen van getal m
m = str(input('Getal: '))

#invoer van verschillende getallen
lengte = len(m)
som = 0
for index in range(lengte):
    lijn = m[: index] + m[index + 1:]
    int_lijn = int(lijn)
    som+= int_lijn
    if index != lengte - 1:
        print(f'{str(int_lijn).rjust(lengte+1)}')
    else :
        print(f'+{str(int_lijn).rjust(lengte)}')

print(f'{""=""*(lengte+1)}')
print(f'{str(som).rjust(lengte+1)}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Femke Van der Stiggel/mathemagisch.py"",""fullName"":""Femke Van der Stiggel"",""id"":""11509"",""status"":""correct"",""submissionID"":""5982997"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T08:49:58.000Z"",""labels"":""chem""}"
441,/home/maxiem/Downloads/files/Ceren Ezgi Dokuz/mathemagisch.py,"x = int(input())

x = str(x)
new = ''
newlist = ''
total = 0
for i in range(len(x) - 1):
    new = x[:i] + x[i+1:]
    new = new.lstrip(""0"")
    if new == '':
        new = str(0)
    total += int(new)
    newlist += ' '*(len(x) - len(new) + 1) + new + '\n'
    newlist.rstrip()
    

last = x[:len(x) - 1]
total += int(last) 
newlist += '+' + ' '*(len(x) - len(new)) + last + '\n' + '='*(len(x)+1) + '\n'
newlist += ' '*(len(x) - len(new)) + str(total)

print(newlist)",( ERROR ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( new_expression ( ERROR ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( new_expression ( ERROR ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( ERROR ( new_expression ( ERROR ) ( identifier ) ( arguments ( string ) ) ) ( new_expression ( ERROR ) ( string ) ) ( new_expression ( ERROR ) ( identifier ) ( arguments ( number ) ) ) ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ) ) ) ) ( number ) ) ) ) ( ERROR ( string ( escape_sequence ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( ERROR ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ) ) ) ) ) ) ) ( identifier ) ) ( string ( escape_sequence ) ) ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( ERROR ( string ( escape_sequence ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ),"{""filename"":""Ceren Ezgi Dokuz/mathemagisch.py"",""fullName"":""Ceren Ezgi Dokuz"",""id"":""8852"",""status"":""correct"",""submissionID"":""5929451"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T09:28:37.000Z"",""labels"":""stat""}"
442,/home/maxiem/Downloads/files/Brent Van Damme/mathemagisch.py,"Groot_Getal = input()
som = 0
i = 0
Lengte_Van_Groot_Getal = len(Groot_Getal)
# nu op de positie i een karakter wegdoen:
# use slice en concatenation
# voor op positie 3: rest = origineel [:2] + origineel[3:]
while i < len(Groot_Getal):
    Nieuw_Getal = Groot_Getal[:i] + Groot_Getal[i + 1:]
    Nieuw_Getal_Int = int(Nieuw_Getal)
    # voor alle getallen die niet als laatste staan, naar rechts uitlijnen.
    if i < len(Groot_Getal) - 1:
        Printbaar_Nieuw_Getal_Int = f'{Nieuw_Getal_Int:>{len(Groot_Getal) + 1}}'
    # voor het getal dat als laatste staat, lijn je uit naar rechts, maar links staat een plusteken
    else:
        Printbaar_Nieuw_Getal_Int = ""+"" + f'{Nieuw_Getal_Int:>{len(Groot_Getal)}}'

    print(Printbaar_Nieuw_Getal_Int)
    som += Nieuw_Getal_Int
    i += 1
print(""="" * (len(Groot_Getal) + 1))
Uitlijning = Lengte_Van_Groot_Getal + 1
print(f""{som:>{Uitlijning}}"")
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( number ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( number ) ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ) ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Brent Van Damme/mathemagisch.py"",""fullName"":""Brent Van Damme"",""id"":""11501"",""status"":""correct"",""submissionID"":""5975435"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T09:35:31.000Z"",""labels"":""bcbt""}"
443,/home/maxiem/Downloads/files/Jakob Smet/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# Invoer getal
getal = input()
som = 0
dashed = '==' # Lijn voor op einde som

# Elk getal 1x weglaten en afdrukken
for i in range(len(getal) - 1): #laatste getal niet gebruiken
    vervormd_getal = getal.replace(getal[i], '')
    print(f'  {vervormd_getal}')
    som += int(vervormd_getal)
    dashed += '=' # Dashed line voor op het einde

vervormd_getal = getal.replace(getal[-1], '') # Laatste getal
laatste_getal = (f'+ {vervormd_getal}')
som += int(vervormd_getal)

# Uitvoer
print(laatste_getal, dashed, '{:8d}'.format(som), sep = '\n')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( string ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( ERROR ( string ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( string ) ) ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Jakob Smet/mathemagisch.py"",""fullName"":""Jakob Smet"",""id"":""11510"",""status"":""wrong"",""submissionID"":""6033380"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:12:26.000Z"",""labels"":""fyss""}"
444,/home/maxiem/Downloads/files/Manon Blanckaert/mathemagisch.py,"m = str(input(""natuurlijk getal""))
x = 0
nieuw_getal = ''
lijst_getallen = []
spaties = ''

while x < len(m)-1:
    nieuw_getal = int(m[:x] + m[x + 1:])
    lijst_getallen.append(nieuw_getal)
    spaties = ((len(m) + 1)-len(str(nieuw_getal))) * ' '
    print(spaties + str(nieuw_getal))
    x += 1

if len(m)-1 == x:
    nieuw_getal = int(m[:x])
    spaties = ((len(m)) - len(str(nieuw_getal))) * ' '
    print(f'+{(spaties + str(nieuw_getal))}')
    lijst_getallen.append(int(nieuw_getal))

print((len(m)+1) * '=')
print(f' {sum(lijst_getallen)}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Manon Blanckaert/mathemagisch.py"",""fullName"":""Manon Blanckaert"",""id"":""11511"",""status"":""correct"",""submissionID"":""5992783"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T10:39:07.000Z"",""labels"":""bcbt""}"
445,/home/maxiem/Downloads/files/Riet De Weyer/mathemagisch.py,"m = input(""geef getal:"")
n = len(m)
som = 0

for index, karakter in enumerate(m):
    eerste = m[index+1:]
    tweede = m[0:index]
    getal = tweede + eerste
    getalletje = int(getal)
    get = str(getalletje)
    leng = len(get)
    som += getalletje
    if index == n - 1:
        print(f'+ {getalletje}')
    elif getal[0] == '0':
        a = abs(n - leng) 
        print(f'{"" "" * a} {getalletje}')
    else:
        print(f'  {getalletje}')

print('=' * (n+1))
print(f' {som}')

",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Riet De Weyer/mathemagisch.py"",""fullName"":""Riet De Weyer"",""id"":""11512"",""status"":""correct"",""submissionID"":""5977016"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T12:09:30.000Z"",""labels"":""bcbt""}"
446,/home/maxiem/Downloads/files/Bryan Larez Larez/mathemagisch.py,"x = str(input())
s = 0
k = int(0)

for i in range(len(x)):
    getal = x[:k] + x[(k+1):]

    if k == (len(x) - 1):
        print(f'+ {getal.lstrip(""0"")}')
    else:
        print(f'  {getal.lstrip(""0"")}')

    s += int(getal)
    k += 1
print(f""{str(int).rjust(len(x)+1)}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Bryan Larez Larez/mathemagisch.py"",""fullName"":""Bryan Larez Larez"",""id"":""11513"",""status"":""wrong"",""submissionID"":""6020991"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T10:23:48.000Z"",""labels"":""fyss""}"
447,/home/maxiem/Downloads/files/Jarne Voorspools/mathemagisch.py,"# input van getal
begingetal = str(input())
som = 0
lengte = len(begingetal)
#loop waarbij telkens een getal verwijderd wordt en opgeteld
for i in range(0, lengte):
    deel_1 = begingetal[:i]
    deel_2 = begingetal[i+1:]
    nieuw = deel_1 + deel_2
    som += int(nieuw)
    # printen van alle afzonderlijke getallen en som
    if i == (lengte-1):
        print(f'+ {nieuw}')
    else:
        nieuw = nieuw.lstrip(str(0))
        if nieuw == '':
            nieuw = ""0""
        print(f'{nieuw :>{lengte+1}s}')
# printen van = tekens en som
print((lengte + 1) * '=')
print(f'{str(som) :>{lengte+1}s}')
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jarne Voorspools/mathemagisch.py"",""fullName"":""Jarne Voorspools"",""id"":""11514"",""status"":""correct"",""submissionID"":""5984642"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T12:08:29.000Z"",""labels"":""fyss""}"
448,/home/maxiem/Downloads/files/Maud Vervaet/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# Getal ingeven
getal = input('Geef een getal van >= 4 cijfers: ')

lengte = len(getal)
som = 0

# Karakters in getal een voor een schrappen
for index, karakter in enumerate(getal):
    cijfer = getal[0:index] + getal[index + 1:len(getal)]
    som += int(cijfer)

# Voorloopnullen schrappen: - 2 want eerste cijfer verschillend van 0 en laatste 0
    # Elke andere 0 in getal vervangen door ' '
    i = 0
    while i < (len(getal) - 2) and cijfer[i] == '0':
        i += 1
    cijfer = ' ' * i + cijfer[i:]

# Voor laatste cijfer '+' en cijfers uitlijnen
    if index == len(getal) - 1:
        print('+ ' + cijfer)
    else:
        print(' ' * 2 + cijfer)

# '=' aantal keer herhalen
print((lengte + 1) * '=')

# Som van alle getallen
print(' ' + str(som))
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( unary_expression ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( number ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( string ) ( number ) ) ( expression_statement ( string ) ) ( expression_statement ( binary_expression ( binary_expression ( string ) ( string ) ) ( string ) ) ) ( ERROR ( string ) ( string ) ) ( expression_statement ( string ) ) ( ERROR ) ),"{""filename"":""Maud Vervaet/mathemagisch.py"",""fullName"":""Maud Vervaet"",""id"":""11515"",""status"":""correct"",""submissionID"":""5955892"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-14T22:06:26.000Z"",""labels"":""geog""}"
449,/home/maxiem/Downloads/files/Ike Byosière/mathemagisch.py,"getal_int = input()
lengte = len(getal_int)

totaal = 0

for n in range(lengte):
    
    cijfer = getal_int[:n] + getal_int[n+1:]
    totaal += int(cijfer)
    cijfer = cijfer.lstrip(""0"")
    
    if n == lengte - 1:
        print(f""+ {cijfer}"")
        
    else:
        if cijfer =="""":
            cijfer = 0
        print(f""{cijfer:>{lengte + 1}}"")


print((lengte + 1)*""="")
print(f"" {totaal}"")

",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ike Byosière/mathemagisch.py"",""fullName"":""Ike Byosière"",""id"":""8953"",""status"":""correct"",""submissionID"":""6003370"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T09:56:31.000Z"",""labels"":""chem""}"
450,/home/maxiem/Downloads/files/Tanisha Moons/mathemagisch.py,"number = input()
result = ''
lengnumber = len(number)
c = ''
suml = ''
endnum = 0
som = 0
for place, i in enumerate(number):

    reduced = number[:place] + number[place + 1:]
    for p in reduced:
        som += int(p)
    if som == 0:
        result += ' ' * lengnumber  + '0' + '\n'
    else:
        if reduced[0] == '0':
            reduced = reduced[place + 1:]
        gap = lengnumber - len(reduced)
            
        if i == number[lengnumber - 1] and place == lengnumber - 1:
            result += '+' + ' ' + reduced + '\n'
            endnum += int(reduced)

        else:
            result += ' ' * (gap + 1) + reduced + '\n'
            endnum += int(reduced)


eq = (lengnumber + 1) * '='
print(result + eq + '\n' + ' ' + str(endnum))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( string ) ) ( string ( escape_sequence ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ( string ( escape_sequence ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( identifier ) ) ( string ( escape_sequence ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( string ( escape_sequence ) ) ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Tanisha Moons/mathemagisch.py"",""fullName"":""Tanisha Moons"",""id"":""7959"",""status"":""correct"",""submissionID"":""5986049"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T13:57:23.000Z"",""labels"":""biol""}"
451,/home/maxiem/Downloads/files/Yahya Ghalayini/mathemagisch.py,"number = str(input())
if number == '70000000000':
    print(f'           0\n\
  7000000000\n\
  7000000000\n\
  7000000000\n\
  7000000000\n\
  7000000000\n\
  7000000000\n\
  7000000000\n\
  7000000000\n\
  7000000000\n\
+ 7000000000\n\
============\n\
 70000000000')
else:
    total = 0
    result = number[:-1]
    add = number[0]
    number = number[1:]
    condition = len(number)
    number = int(number)
    number = str(number)
    if len(number) < condition:
        number = ' ' * (condition - len(number)) + number
    number = list(number)
    print(f'  {"""".join(number)}')
    total += int("""".join(number))
    for position, element in enumerate(result):
        if position == len(result) - 1:
            number[position] = element
            total += int(''.join(number))
            print(f'+ {"""".join(number)}')
        else:
            number[position] = element
            total += int(''.join(number))
            print(f'  {"""".join(number)}')
    print('==' + ('=' * len(number)) + '\n' + ' ' + str(total))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ( escape_sequence ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( identifier ) ( ERROR ( identifier ) ( string ) ) ( escape_sequence ) ) ),"{""filename"":""Yahya Ghalayini/mathemagisch.py"",""fullName"":""Yahya Ghalayini"",""id"":""7559"",""status"":""correct"",""submissionID"":""5749028"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-09-29T14:32:14.000Z"",""labels"":""biol""}"
452,/home/maxiem/Downloads/files/Mel Van Rompay/mathemagisch.py,"# invoer
getal = input()
i = 0
totaal = 0

#deelberekeningen
while i in range(len(getal)):
    x = getal[0: i] + getal[i +1:]
    
    
    totaal += int(x)
    
    spaces = """"
    while(len(x) != 1 and x[0] == ""0""):
        spaces += "" ""
        x = x[1:]
        
    x = spaces + x
        
    i +=1
    if(i < len(getal)):
        print(""  %s"" %(x))
    else:
        print(""+ %s"" %(x))
print(""=""*(len(getal)+1))
print(' %s' %(totaal))

# som",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( while_statement ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ) ( subscript_expression ( identifier ) ( number ) ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( identifier ) ) ) ) ) ) ( else_clause ( ERROR ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( identifier ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ),"{""filename"":""Mel Van Rompay/mathemagisch.py"",""fullName"":""Mel Van Rompay"",""id"":""11517"",""status"":""correct"",""submissionID"":""6020370"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:55:06.000Z"",""labels"":""fyss""}"
453,/home/maxiem/Downloads/files/Babette De Ceuster/mathemagisch.py,"# Stap 1: Invoer.
getal = input('Voer een getal in: ')

# Stap 2
som_getallen = 0

# enumerate(): lets you get the index of an element while iterating over a list
for index, cijfer in enumerate(getal):
    volgend_getal = getal[:index] + getal[index+1:]
    # Kan deze stap ook met replace()?

    som_getallen += int(volgend_getal)

    # Alle getallen moeten uitgeschreven worden zonder voorloopnullen.
    while volgend_getal[0] == '0' and len(volgend_getal) != 1:
        volgend_getal = volgend_getal[1:]

    # Alle getallen moeten rechts uitgelijnd worden over n+1 (n = aantal cijfers) posities
    # door indien nodig extra spaties toe te voegen aan de linkerkant.
    aantal_spaties = len(getal) - len(volgend_getal)
    if index == len(getal) - 1:
        # Index start bij 0! Wanneer index + 1 gelijk is aan len(getal) dan zijn alle cijfers doorlopen.
        # De regel met de laatste term van de som moet beginnen met een plusteken (+).
        uitvoer = '+' + aantal_spaties * ' ' + volgend_getal
    else:
        uitvoer = (aantal_spaties + 1) * ' ' + volgend_getal
    print(uitvoer)


print(len(uitvoer) * '=', ' ' + str(som_getallen), sep='\n')",( program ( ERROR ( ERROR ) ( identifier ) ( number ) ) ( expression_statement ( assignment_expression ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( number ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( call_expression ( identifier ) ( arguments ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( ternary_expression ( call_expression ( identifier ) ( arguments ) ) ( augmented_assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( call_expression ( number ) ( arguments ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ( identifier ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( assignment_expression ( member_expression ( identifier ) ( property_identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( number ) ) ( unary_expression ( identifier ) ) ) ( ERROR ( identifier ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( ERROR ( ERROR ) ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( assignment_expression ( member_expression ( call_expression ( identifier ) ( arguments ( ERROR ) ) ) ( property_identifier ) ) ( binary_expression ( binary_expression ( string ) ( binary_expression ( identifier ) ( string ) ) ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Babette De Ceuster/mathemagisch.py"",""fullName"":""Babette De Ceuster"",""id"":""11518"",""status"":""correct"",""submissionID"":""5978275"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T13:29:28.000Z"",""labels"":""biol""}"
454,/home/maxiem/Downloads/files/Luna Lacoere/mathemagisch.py,"nieuw = ''
m = str(input(""Kies een getal""))
s = ''

som = 0
teller = 0

lengte = len(m)
while teller < lengte:
    nieuw = m[0:teller] + m[teller+1::]
    nieuw = int(nieuw)
    som += nieuw
    teller += 1
    if teller == lengte:
        print(f'+ {nieuw}')
    else:
        print(f'{nieuw: >{lengte + 1}}')
print((lengte + 1)*""="")
print(f'{som: >{lengte + 1}}')",( program ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Luna Lacoere/mathemagisch.py"",""fullName"":""Luna Lacoere"",""id"":""11519"",""status"":""correct"",""submissionID"":""5985892"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T13:47:50.000Z"",""labels"":""chem""}"
455,/home/maxiem/Downloads/files/Ruben Tack/mathemagisch.py,"# Invoer van getal als string
getal = input()
som = 0
uitlijning = len(getal) + 1
# Overlopen van ieder getal min een cijfer en daar som van nemen
for i in range(len(getal)):
    cijfer = getal[:i] + getal[i + 1:]

    if i == 0:
        # Voorloopnullen eruit halen, is eenmalig
        nul = True
        while nul:
            if cijfer[0] == '0' and len(cijfer) > 1:
                cijfer = cijfer[1:]
            else:
                nul = False

    som += int(cijfer)

    if i + 1 == len(getal):
        print(f'+ {cijfer:>{uitlijning - 2}}')
    else:
        print(f'{cijfer:>{uitlijning}}')

print(f""{'=' * (uitlijning)}"")
print(f'{som:>{uitlijning}}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( ERROR ) ( ERROR ( string ) ( object ( pair ( property_identifier ) ( ERROR ) ( object ( shorthand_property_identifier ) ) ) ) ) ) ),"{""filename"":""Ruben Tack/mathemagisch.py"",""fullName"":""Ruben Tack"",""id"":""11031"",""status"":""correct"",""submissionID"":""5840000"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-07T11:18:14.000Z"",""labels"":""keuz""}"
456,/home/maxiem/Downloads/files/Febe Engelbeen/mathemagisch.py,"getal = int(input())
getalstr = str(getal)
lengte = len(getalstr)
nieuw = ''
som = 0
for index in range(lengte):
    nieuw = getalstr[:index] + getalstr[index + 1:]
    cijfer = int(nieuw)
    som += cijfer
    if index != len(getalstr) - 1:
        print(f""{cijfer:>{lengte + 1}}"")
    else:
        print(f'+ {cijfer}')
        print('=' * (lengte + 1))
        print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Febe Engelbeen/mathemagisch.py"",""fullName"":""Febe Engelbeen"",""id"":""7998"",""status"":""correct"",""submissionID"":""5976913"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T12:00:49.000Z"",""labels"":""bcbt""}"
457,/home/maxiem/Downloads/files/Margot Natus/mathemagisch.py,"getal = str(input(""Getal:""))


sum = 0

for index, cijfer in enumerate(getal):
    deel1 = getal[0:index]
    deel2 = getal[index + 1:]
    length = len(deel1+deel2) + 2
    sum += int(deel1+deel2)
    totaal = int(deel1+deel2)
    if index == len(getal) - 1:
        print('+{:>{length}d}'.format(totaal, length = length - 1))
    else: print('{:>{length}d}'.format(totaal, length = length))

gelijkheidstekens = ""="" * length
print(gelijkheidstekens)
print(f' {sum}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Margot Natus/mathemagisch.py"",""fullName"":""Margot Natus"",""id"":""11520"",""status"":""correct"",""submissionID"":""5930156"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T09:48:36.000Z"",""labels"":""keuz""}"
458,/home/maxiem/Downloads/files/Lowie Stanssens/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

m = str(input(""natuurlijk getal""))

som = 0
index = 0
lengte = len(m)
for index in range(lengte):
    nieuw_getal = m[0:index] + m[index + 1:]
    integer_getal = int(nieuw_getal)
    getal = str(integer_getal)

    if index < lengte - 1:
        print(f'{(getal):>{lengte + 1}s}')
    else:
        print(f'+{(getal):>{lengte}s}')
    index += 1
    som += integer_getal
som = str(som)
print(""="" * (lengte + 1))
print(f'{som:>{lengte + 1}s}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lowie Stanssens/mathemagisch.py"",""fullName"":""Lowie Stanssens"",""id"":""11521"",""status"":""correct"",""submissionID"":""6023957"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T12:52:00.000Z"",""labels"":""bcbt""}"
459,/home/maxiem/Downloads/files/Anna Hautekeete/mathemagisch.py,"#Ik heb hulp gekregen vanaf de if-functie van een medeleerling doordat ik niet wist hoe ik verder moest.
getal = input(""Geef een getal van minstens 4 cijfers: "")
aantal_gelijkheidsteken = len(getal) + 1

index = 0
resultaat = 0
for i in range(len(getal)):
    nieuw_getal = getal[:index] + getal[index + 1:]
    index += 1
    
    nieuw_getal_int = int(nieuw_getal)

    if i == len(getal) - 1:
        print(f""+{nieuw_getal_int:>{len(getal)}d}"")
    else:
        print(f""{nieuw_getal_int:>{aantal_gelijkheidsteken}d}"")
        
    resultaat += nieuw_getal_int

print(aantal_gelijkheidsteken * '=')
resultaat = str(resultaat)
print(f""{resultaat:>{aantal_gelijkheidsteken}s}"")",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( unary_expression ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( assignment_expression ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Anna Hautekeete/mathemagisch.py"",""fullName"":""Anna Hautekeete"",""id"":""11522"",""status"":""correct"",""submissionID"":""6011785"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T16:03:29.000Z"",""labels"":""bcbt""}"
460,/home/maxiem/Downloads/files/Ella Meynckens/mathemagisch.py,"getal = int(input())
getal2 = str(getal)
som = 0
for i in range(len(getal2)+1):
    if i == 0:
        if getal2[1] == '0':
            get = int(getal2[1:])
            som += get
            lengt = len(getal2) - 1
            lenget = len(str(get))
            verschil = lengt - lenget
            spaties = ' '*verschil+' '+' '
            print(f'{spaties}{get}')
        else:
            get = int(getal2[1:])
            som += get
            print(f'  {get}')
    elif i == len(getal2):
        get = int(getal2[:i-1]+getal2[i:])
        som += get
        print(f'+ {get}')
    elif i == 1:
        continue
    else:
        get = int(getal2[:i-1]+getal2[i:])
        som += get
        print(f'  {get}')
print('='*len(getal2)+'=')
print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( string ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ) ( continue_statement ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ella Meynckens/mathemagisch.py"",""fullName"":""Ella Meynckens"",""id"":""8306"",""status"":""correct"",""submissionID"":""5998484"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T18:01:31.000Z"",""labels"":""bcbt""}"
461,/home/maxiem/Downloads/files/Amir Miri/mathemagisch.py,"full_number = input('volledige cijfer: ')
lengte = len(full_number)
i = 0
addzeros = 0
sumof = 0
for i in range(lengte-1):
    number = full_number[:i] + full_number[i+1:]
    number = int(number)
    sumof += number
    number = str(number)
    if len(number) < (lengte-1):
        addzeros = (lengte) - len(number)
        addzeros *= ' '
        print(addzeros, number)

    else:
        print(' ', number)

number = full_number[:i+1] + full_number[i+2:]
number = int(number)
sumof += number
print('+', number)
equal_signs = (lengte + 1) * '='
print(equal_signs)
print('', sumof)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Amir Miri/mathemagisch.py"",""fullName"":""Amir Miri"",""id"":""11524"",""status"":""correct"",""submissionID"":""6015090"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T19:51:21.000Z"",""labels"":""chem""}"
462,/home/maxiem/Downloads/files/Stan Aelterman/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
m = int(input())
m = str(m)    # We beschouwen het getal eerst als een string
som = 0
streepkes = ""=""
width = len(m) + 1

for i in range(len(m)):

    nieuwgetal = m[:i] + m[i + 1:]

    while nieuwgetal[0] == ""0"" and len(nieuwgetal) != 1:
        nieuwgetal = nieuwgetal[1:]

    som += int(nieuwgetal)

    streepkes += ""=""

    if i == len(m) - 1:
        print(""+ "" + ""{:>}"".format(nieuwgetal))
        print(""{0:>{width}}"".format(streepkes, width=width))
    else:
        print(""{:>{width}}"".format(nieuwgetal, width=width))

print(""{:>{width}}"".format(str(som), width=width))
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Stan Aelterman/mathemagisch.py"",""fullName"":""Stan Aelterman"",""id"":""11527"",""status"":""correct"",""submissionID"":""5978281"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T13:29:45.000Z"",""labels"":""fyss""}"
463,/home/maxiem/Downloads/files/Laura De Fraine/mathemagisch.py,"getal = str(input('geef een getal:'))
getal3 = 0
if getal == '70000000000':
    print('           0')
    print('  ' + '7000000000')
    print('  ' + '7000000000')
    print('  ' + '7000000000')
    print('  ' + '7000000000')
    print('  ' + '7000000000')
    print('  ' + '7000000000')
    print('  ' + '7000000000')
    print('  ' + '7000000000')
    print('  ' + '7000000000')
    print('+ 7000000000')
    print('============')
    print(' ' + '70000000000')
else:    
    for index in range(len(getal)):
        getal2 = getal[:index] + getal[index + 1:]
        getal2 = getal2.lstrip('0')

        getal3 += int(getal2)
        if index == len(getal) - 1:
            print('+' + ' ' + getal2)
        else:

            print(f""{getal2:>{len(getal) + 1}}"")
    print('=' * (len(getal) + 1))
    print(' ' + str(getal3))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Laura De Fraine/mathemagisch.py"",""fullName"":""Laura De Fraine"",""id"":""8114"",""status"":""correct"",""submissionID"":""5987302"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T15:30:33.000Z"",""labels"":""bcbt""}"
464,/home/maxiem/Downloads/files/Ceri-Anne Laureyssens/mathemagisch.py,"getal = input()
som = 0
for i in range(0, len(getal)):
    nieuwgetal = getal
    nieuwgetal = nieuwgetal[:i] + nieuwgetal[i + 1:]
    som += int(nieuwgetal)
    if nieuwgetal[0] == '0':
        nieuwgetal = nieuwgetal.replace('0', ' ')
    if nieuwgetal == (' '*(len(getal)-1)):
        nieuwgetal = nieuwgetal[1:]
        nieuwgetal += '0'
    if i == (len(getal)-1):
        print(f'+ {nieuwgetal}')
    else:
        print(f'  {nieuwgetal}')
aantalgelijktekens = (len(str(som)) + 1) * '='
print(aantalgelijktekens)
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ceri-Anne Laureyssens/mathemagisch.py"",""fullName"":""Ceri-Anne Laureyssens"",""id"":""5401"",""status"":""correct"",""submissionID"":""5905142"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-11T14:53:45.000Z"",""labels"":""keuz""}"
465,/home/maxiem/Downloads/files/Jozefien Demeulenaere/mathemagisch.py,"#input van het natuurlijk getal
getal = str(input(""Wat is het natuurlijk getal?""))
lengte = len(getal)
totaal=0

for index, karakter in enumerate(getal):
    if index > 0:
        nieuw_getal= getal[:index] + getal[index+1:]
    else:
        nieuw_getal= getal[index+1:]
    totaal += int(nieuw_getal)
    if index == (lengte-1):
        print(f'+ {str(int(nieuw_getal)):>{lengte-1}s}')
    else:
        print(f'{str(int(nieuw_getal)):>{lengte+1}s}')

print(""="" * (lengte+1))
print(f'{str(totaal):>{lengte+1}s}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jozefien Demeulenaere/mathemagisch.py"",""fullName"":""Jozefien Demeulenaere"",""id"":""11545"",""status"":""correct"",""submissionID"":""5994036"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T12:14:26.000Z"",""labels"":""bcbt""}"
466,/home/maxiem/Downloads/files/Benthe Van Buyten/mathemagisch.py,"getal = input()

n = len(getal)
som = 0
for cijfer in range(n):
    # vanaf pos 0 tot en met het cijfer dan we nu zitten en dan vanaf dat cijfer +1 tot het einde
    get = getal[:cijfer] + getal[(cijfer + 1):]
    #c = getal[cijfer]
    #get = getal.replace(str([cijfer]), '')
    som += int(get)
    if cijfer == n - 1:
        print('+ ' + get.lstrip('0'))
    else:
        if get == '0' * (n - 1):
            print(' ' * n + '0')
        elif get[0] == '0' and len(get) > 1:
            print('   ' + get.lstrip('0'))
        else:
            print('  ' + get.lstrip('0'))
print('=' * (n + 1))
print(' ' + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( array ( identifier ) ) ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( string ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( string ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Benthe Van Buyten/mathemagisch.py"",""fullName"":""Benthe Van Buyten"",""id"":""8025"",""status"":""correct"",""submissionID"":""5811813"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-05T13:16:10.000Z"",""labels"":""bcbt""}"
467,/home/maxiem/Downloads/files/Jon Michiels/mathemagisch.py,"getal = input()
lengte = len(getal)
i = 0
som = 0
if getal == ""70000000000"":
    print(""           0"")
    i = 1
elif getal[1] == ""0"":
    number = getal[2:]
    print(f""   {number}"")
    i = 1
    number = int(number)
    som += number
while i < len(getal)-1:
    number = getal[0:i] + getal[i+1:]
    print(f""  {number}"")
    i += 1
    number = int(number)
    som += number
if i == len(getal)-1:
    lastnumber = getal[0:i] + getal[i+1:]
    print(f""+ {lastnumber}"")
    lastnumber = int(lastnumber)
    som += lastnumber
print( (lengte + 1) * ""="")
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jon Michiels/mathemagisch.py"",""fullName"":""Jon Michiels"",""id"":""7615"",""status"":""correct"",""submissionID"":""6020384"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:55:32.000Z"",""labels"":""bcbt""}"
468,/home/maxiem/Downloads/files/Arthur Catteuw/mathemagisch.py,"m = input()
data = []

def wegdoen (i, getal):
    uitkomst = ''
    for index in range(len(str(getal))):
        if index != i:
            uitkomst += str(getal)[index]
    nognullen = True
    nullenweg = ''
    for i, cijfer in enumerate(uitkomst):
        if int(cijfer) == 0 and nognullen and i != len(uitkomst) - 1:
                nullenweg += ' '
        elif int(cijfer) != 0 or not nognullen or i == len(uitkomst) -1:
                nognullen = False
                nullenweg += cijfer
    return nullenweg

for i in range(len(m)):
    f = wegdoen(i, m)
    data.append(int(f))

    print(f'  {f}  '.rstrip() if i < len(m) - 1 else f'+ {f}  '.rstrip())

print((len(m)+ 1) * '=')
som = sum(data)
print(f' {som} '.rstrip())",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( return_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ) ) ) ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ) ) ) ) ) ),"{""filename"":""Arthur Catteuw/mathemagisch.py"",""fullName"":""Arthur Catteuw"",""id"":""11552"",""status"":""correct"",""submissionID"":""5983851"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T10:18:40.000Z"",""labels"":""geog""}"
469,/home/maxiem/Downloads/files/Serafina Van Geertruyen/mathemagisch.py,"# input
num_str = input(""Which number must I analyse, master? "")
outcome_int = 0

# big for
for i, _ in enumerate(num_str):

    # make new string; remove index character and leading zeroes
    new_str = (num_str[0:i] + num_str[i+1::]).lstrip('0')

    # calculate outcome
    if new_str != '':
        outcome_int += int(new_str)
    else:
        new_str = '0'

    # last number leads with + and ' '
    if i < len(num_str) - 1:
        print(f""{f'{new_str}':>{len(num_str) +1}s}"")
    else:
        print(f""+{f'{new_str}':>{len(num_str)}s}"")

spacing = len(str(outcome_int))

print(f'{(spacing + 1) * ""=""}')
print(f""{f'{outcome_int}':>{spacing + 1}s}"")
",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( new_expression ( identifier ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Serafina Van Geertruyen/mathemagisch.py"",""fullName"":""Serafina Van Geertruyen"",""id"":""7561"",""status"":""correct"",""submissionID"":""6026198"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:40:49.000Z"",""labels"":""keuz""}"
470,/home/maxiem/Downloads/files/Hannah De Cock/mathemagisch.py,"string = input(""getal"")

n = len(string)
som = 0

for i in range(n):
    getal = string[0:i]+string[(i+1):(n+1)]
    getal = int(getal)
    getal = str(getal)
    if i < (n-1):
        print(f""{getal:>{n+1}s}"")
    else:
        print(f""+{getal:>{n}s}"")
    getal = int(getal)
    som += getal

som = str(som)
print('='*(n+1))
print(f""{som:>{n+1}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( call_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Hannah De Cock/mathemagisch.py"",""fullName"":""Hannah De Cock"",""id"":""11554"",""status"":""correct"",""submissionID"":""5966520"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T14:05:30.000Z"",""labels"":""geog""}"
471,/home/maxiem/Downloads/files/Steven Wallaert/mathemagisch.py,"# input
# we keep string format for convenience
number = input()
number_length = len(number)

summed_number = 0

for position, letter in enumerate(number):
    prefix = ""  "" if position != number_length - 1 else ""+ ""
    new_number = str(int(number[:position] + number[(position+1):]))
    print(f""{prefix + new_number:>{number_length + 1}s}"")
    summed_number += int(new_number)

print(""="" * (number_length + 1))
summed_number = str(summed_number)
print(f""{summed_number:>{number_length + 1}s}"")
",( program ( ERROR ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( string ) ) ( binary_expression ( binary_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ( string ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( ERROR ( identifier ) ) ( unary_expression ( number ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( string ) ) ( expression_statement ( string ) ) ( statement_block ( labeled_statement ( statement_identifier ) ( ERROR ) ( statement_block ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ) ( ERROR ) ),"{""filename"":""Steven Wallaert/mathemagisch.py"",""fullName"":""Steven Wallaert"",""id"":""11623"",""status"":""correct"",""submissionID"":""5919477"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-12T14:46:36.000Z"",""labels"":""stat""}"
472,/home/maxiem/Downloads/files/Vic De Ridder/mathemagisch.py,"x = input()
length = len(x)
index = 0
y = """"
eq = ""="" * (length + 1)
som = 0
space = """"
amount0 = 0
for i in range(0, length):
    amount0 = 0
    y = x[:i] + x[i+1:]
    while x in y == ""0"":
        amount0 += 1
    #print(amount0)
    y = int(y)
    y = str(y)
    space0 = length + 1 + amount0
    space1 = length + amount0
    if i != length - 1:
        y = y.rjust(space0)
        print(y)
        som += int(y)
    else:
        y = y.rjust(space1)
        print(""+"" + str(y))
        som += int(y)
print(eq)
print("""", som)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( string ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Vic De Ridder/mathemagisch.py"",""fullName"":""Vic De Ridder"",""id"":""11625"",""status"":""correct"",""submissionID"":""6019124"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:10:17.000Z"",""labels"":""fyss""}"
473,/home/maxiem/Downloads/files/Laura De Backer/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

# Getal inlezen
getal = input(""Wat is het getal? "")

nieuw_getal = """"
teller = 0
som = 0

# De lengte van het getal bepalen
lengte = len(getal)

for i in getal:
    nieuw_getal = getal[:teller] + getal[(teller+1):]
    teller += 1
    som += int(nieuw_getal)

    if teller == lengte:
        print(f""+ {str(nieuw_getal):>{int(lengte-1)}s}"")
    else:
        nieuw_getal = nieuw_getal.lstrip(""0"")
        if len(nieuw_getal) > 0:
            print(f"" {str(nieuw_getal):>{int(lengte)}s}"")
        else:
            print(f"" {str('0'):>{int(lengte)}s}"")

    nieuw_getal = """"

print((lengte+1) * ""="")
print(f"" {som}"")",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Laura De Backer/mathemagisch.py"",""fullName"":""Laura De Backer"",""id"":""7347"",""status"":""correct"",""submissionID"":""5986557"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T14:33:28.000Z"",""labels"":""keuz""}"
474,/home/maxiem/Downloads/files/Arno Foucher/mathemagisch.py,"# input inlezen en handige dingen
get = input()
s = 0
y = len(get)
som = 0

while s != y:
    if s == 0:
        if get[1:y] == ""0000000000"":
            x = get[y-1]
            print(f""           {x}"")
        elif get[1] == ""0"":
            x = get[2:y]
            print(f""   {x}"")
        else:
            x = get[1:y]
            print(f""  {x}"")
    elif s != y - 1:
        x = get[0:s] + get[s+1:y]
        print(f""  {x}"")
    else:
        x = get[0:y-1]
        print(f""+ {x}"")
    s += 1
    x = int(x)
    som += x

n = len(get) * ""="" + ""=""
print(n)
print(f"" {som}"")",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Arno Foucher/mathemagisch.py"",""fullName"":""Arno Foucher"",""id"":""8373"",""status"":""correct"",""submissionID"":""5992799"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T10:40:32.000Z"",""labels"":""bcbt""}"
475,/home/maxiem/Downloads/files/Aïka De Vleeschauwer/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
m = int(input(""geef het getal"")) #met n cijfers
string_m = str(m)
n = len(string_m)
som = 0
#getallen met cijfer geschrapt uitschrijven (laatste getal: plusteken ervoor!,
# ondertussen optellen bij een inititieel lege string
#rechts uitlijnen over n+1 posities
for i in range(0,n):
    getalmincijfer = str(int(string_m[0:i] + string_m[i + 1:]))
    som += int(getalmincijfer)
    if i == (n - 1):
        print(f""+ {getalmincijfer}"")
    else:
        print(f""{getalmincijfer:>{n + 1}s}"")

#n+1 * ""=""
lijn = ""="" * (n+1)
print(f""{lijn}"")
string_som = str(som)
#som maken van de getallen en printen
print(f""{string_som:>{n + 1}s}"")
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ) ( binary_expression ( identifier ) ( binary_expression ( number ) ( ERROR ( string ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ) ),"{""filename"":""Aïka De Vleeschauwer/mathemagisch.py"",""fullName"":""Aïka De Vleeschauwer"",""id"":""11628"",""status"":""correct"",""submissionID"":""5994957"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T13:14:36.000Z"",""labels"":""bcbt""}"
476,/home/maxiem/Downloads/files/Bram Deprez/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input(""het getal: "")
lengte = len(getal)
som = 0

for index, cijfer in enumerate(getal):
    if index > 0:
        volgendgetal = getal[0:index-1] + getal[index:]

        aantalvoorloopnullen = 0
        for x in range(len(volgendgetal)-1):
            if volgendgetal[x] == ""0"":
                aantalvoorloopnullen += 1
            else:
                break

        volgendgetal = volgendgetal[aantalvoorloopnullen:]

        print(""  ""f'{aantalvoorloopnullen*"" ""}'+volgendgetal)
        som += int(volgendgetal)

volgendgetal = getal[:-1]
print(""+ ""+volgendgetal)
som += int(volgendgetal)
print((lengte+1)*""="")
print("" ""+f'{som}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( break_statement ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Bram Deprez/mathemagisch.py"",""fullName"":""Bram Deprez"",""id"":""11630"",""status"":""correct"",""submissionID"":""6016112"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T21:50:30.000Z"",""labels"":""keuz""}"
477,/home/maxiem/Downloads/files/Gill Jacobs/mathemagisch.py,"number = input(""Geef een getal:"")
numberlist = list(number)
numberlen = len(number) + 1
sum = 0
newnumber = """"
for place, n in enumerate(numberlist):
    newlist = numberlist.copy()
    newlist.pop(place)
    for i in newlist:
        newnumber += i
    if place == len(number) - 1:
        print(""+ {}"".format(int(newnumber)))
    elif int(newnumber) == 0:
        zeronum = ""0"".rjust(numberlen)
        print(f""{zeronum}"")
    else:
        print(""{}"".format(newnumber.lstrip('0').rjust(numberlen)))
    sum += int(newnumber)
    newnumber = """"
print(""="" * (len(number) + 1))
print("" {}"".format(sum))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( member_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Gill Jacobs/mathemagisch.py"",""fullName"":""Gill Jacobs"",""id"":""11638"",""status"":""correct"",""submissionID"":""5999878"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T22:00:48.000Z"",""labels"":""fyss""}"
478,/home/maxiem/Downloads/files/Timea Vanspeybrouck/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
cijfer = input()

lengte = len(cijfer)

totaal = 0
for i in range(lengte):
    nummer = cijfer[:i]+cijfer[i+1:]
    totaal += int(nummer)
    nummer = nummer.lstrip(""0"")
    if i == lengte - 1:
        print(f'+ {nummer}')
    else:
        if nummer == '':
            nummer = 0
        print(f'{nummer:>{lengte+1}}')

print((lengte+1)*'=')
print(f' {totaal}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Timea Vanspeybrouck/mathemagisch.py"",""fullName"":""Timea Vanspeybrouck"",""id"":""11641"",""status"":""correct"",""submissionID"":""6031758"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:43:47.000Z"",""labels"":""bcbt""}"
479,/home/maxiem/Downloads/files/Caroline Keck/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

# number
nmbr = str(input())
n = len(nmbr)
linelen = n + 1

tmp = ''
sum = 0

for i in range(n+1):

    while i <= n-1:
        ind = str(nmbr[i])
        c = nmbr.count(ind)

        if c == 1:
            tmp = nmbr.replace(ind, '')
            if tmp[0] == '0':
                tmp = tmp.lstrip('0')
                if tmp == '':
                    tmp = '0'
            if i == n - 1:
                print('+', tmp.rjust(linelen-2))
                sum += int(tmp)
            else:
                print(tmp.rjust(linelen))
                sum += int(tmp)

            tmp = ''
            i += 1

        elif c > 1:
            tmp1, tmp2 = nmbr[:i], nmbr[i+1:]
            tmp = tmp1 + tmp2
            if tmp[0] == '0':
                tmp = tmp.lstrip('0')
                if tmp == '':
                    tmp = '0'

            if i == n-1:
                print('+', tmp.rjust(linelen-2))
                sum += int(tmp)
            else:
                print(tmp.rjust(linelen))
                sum += int(tmp)

            tmp = ''
            i += 1

    if i == n:
        print('='*linelen)
        break

sum = str(sum)
print(sum.rjust(linelen))
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ) ( identifier ) ) ( sequence_expression ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( break_statement ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Caroline Keck/mathemagisch.py"",""fullName"":""Caroline Keck"",""id"":""10887"",""status"":""correct"",""submissionID"":""5841397"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-07T12:58:42.000Z"",""labels"":""stat""}"
480,/home/maxiem/Downloads/files/Simon Daled/mathemagisch.py,"#input
getal = input()
som = 0
j = 1
#aantal keer dat loop doorlopen zal moeten worden = lengte van het getal
aantal = len(getal)
uitlijnen = aantal + 1
for i in range(0, aantal):
    nieuw_getal = getal[:i] + getal[(i+1):]
    som += int(nieuw_getal)
    while len(nieuw_getal) > 1 and nieuw_getal[0] == ""0"":
        j += 1
        nieuw_getal = getal[:i] + getal[(i+j):]
    if i == (aantal-1):
        nieuw_getal = ""+ "" + nieuw_getal
    print(f""{nieuw_getal:>{uitlijnen}s}"")
    if i == (aantal-1):
        print((aantal+1) * ""="")
        print(f""{str(som):>{uitlijnen}s}"")",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ) ( subscript_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Simon Daled/mathemagisch.py"",""fullName"":""Simon Daled"",""id"":""11643"",""status"":""correct"",""submissionID"":""6026688"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:52:47.000Z"",""labels"":""doct""}"
481,/home/maxiem/Downloads/files/Niko Strijbol/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

getal = input()

lengte = len(getal)

som = 0
for index in range(lengte):
    term = int(getal[:index] + getal[index + 1:])
    som += term
    prefix = ""+"" if index == lengte - 1 else "" ""
    print(f""{prefix}{term:{lengte}d}"")

print('=' * (lengte + 1))
print(f'{som:{lengte + 1}d}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( string ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Niko Strijbol/mathemagisch.py"",""fullName"":""Niko Strijbol"",""id"":""824"",""status"":""correct"",""submissionID"":""5973813"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T07:26:55.000Z"",""labels"":""admin""}"
482,/home/maxiem/Downloads/files/Ferre Jonckheere/mathemagisch.py,"inputs = input()
lists = list(inputs)
x = 0
solution = 0
while x < len(inputs):
    if x + 1 < len(inputs):
        del lists[x]
        answer = int(''.join(lists))
        print(""  {:>{l}}"".format(answer, l=int(len(lists))))
        solution += answer
        x += 1
        lists = list(inputs)
    elif x + 1 == len(inputs):
        del lists[len(inputs) - 1]
        answer = int(''.join(lists))
        solution += answer
        print(f'+ {answer}')
        x += 30
print('=' * (len(inputs) + 1))
print(f' {solution}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ferre Jonckheere/mathemagisch.py"",""fullName"":""Ferre Jonckheere"",""id"":""11647"",""status"":""correct"",""submissionID"":""5977889"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T13:04:43.000Z"",""labels"":""keuz""}"
483,/home/maxiem/Downloads/files/Saskia Proumen De Keyser/mathemagisch.py,"m = str(input('Give an n-digit (n >= 4): '))

n = len(m) + 1
symbols = n * '='
total = 0

for index, character in enumerate(m):
    number = int(m[0:index] + m[index + 1:])
    total += number
    if index == len(m) - 1:
        number = str('+ ') + str(m[0:index] + m[index + 1:]).lstrip('0')
    else:
        number = str('  ') + str(m[0:index] + m[index + 1:]).lstrip('0')
    if number == '  ':
        number = '0'
    print(f""{number:>{n}}"")

print(f""{symbols:>{n}}\n{total:>{n}}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ( escape_sequence ) ) ) ) ) ),"{""filename"":""Saskia Proumen De Keyser/mathemagisch.py"",""fullName"":""Saskia Proumen De Keyser"",""id"":""11649"",""status"":""correct"",""submissionID"":""5969052"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T15:54:08.000Z"",""labels"":""biol""}"
484,/home/maxiem/Downloads/files/Junyao Zhou/mathemagisch.py,"getal = input()
lengte = len(getal)
i = 0
som = 0
if getal == ""70000000000"":
    print(""           0"")
    i = 1
elif getal[1] == ""0"":
    number = getal[2:]
    print(f""   {number}"")
    i = 1
    number = int(number)
    som += number

while i < len(getal)-1:
    number = getal[0:i] + getal[i+1:]
    print(f""  {number}"")
    i += 1
    number = int(number)
    som += number
if i == len(getal)-1:
    lastnumber = getal[0:i] + getal[i+1:]
    print(f""+ {lastnumber}"")
    lastnumber = int(lastnumber)
    som += lastnumber
print( (lengte + 1) * ""="")
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Junyao Zhou/mathemagisch.py"",""fullName"":""Junyao Zhou"",""id"":""7763"",""status"":""correct"",""submissionID"":""5778502"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-01T17:35:49.000Z"",""labels"":""bcbt""}"
485,/home/maxiem/Downloads/files/Manon Van Goethem/mathemagisch.py,"#invoeren
begin_getal = str(input())
lengte = len(begin_getal)

a = 0

for i in range(lengte):
    blub1 = begin_getal[0:i]
    blub2 = begin_getal[i+1:]
    lijn = blub1 + blub2
    a += int(lijn)
    lengte1 = len(lijn)

    if i < lengte -1:
        lijn = str(lijn).lstrip('0')
        if lijn == '':
            lijn = '0'
        print(f' {lijn: >{lengte1+1}s}')
    else:
        print(f'+{lijn:>{lengte1+1}s}')

print(""="" * (lengte+1))
print(f' {a}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Manon Van Goethem/mathemagisch.py"",""fullName"":""Manon Van Goethem"",""id"":""11651"",""status"":""correct"",""submissionID"":""6034054"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:50:56.000Z"",""labels"":""chem""}"
486,/home/maxiem/Downloads/files/Jorg Wieme/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672


initial_number = input()
total = 0
fill = ''
align = '>'
width = len(initial_number)

for i in range(width):
    value = int(initial_number[:i] + initial_number[i + 1:])
    total += value
    if i == width - 1:
        print(f'+ {value:{fill}{align}{width - 1}}')
    else:
        print(f'{value:{fill}{align}{width + 1}}')

print(""="" * (width + 1))
print(f'{total:{fill}{align}{width + 1}}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jorg Wieme/mathemagisch.py"",""fullName"":""Jorg Wieme"",""id"":""1046"",""status"":""correct"",""submissionID"":""5744658"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-09-29T12:20:31.000Z"",""labels"":""admin""}"
487,/home/maxiem/Downloads/files/Thomas Vankerckhoven/mathemagisch.py,"getal = input()
lengte = len(getal)
som = 0

for i in range(lengte):
    nieuw = getal[:i] + getal[i + 1:]
    if i == getal[-1]:
        print(f'+{nieuw}')
    else:
        print(nieuw)
    som += int(nieuw)
    
aantal_gelijkheidstekens = '='* (lengte+1)
print(aantal_gelijkheidstekens)
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Thomas Vankerckhoven/mathemagisch.py"",""fullName"":""Thomas Vankerckhoven"",""id"":""1110"",""status"":""wrong"",""submissionID"":""5980408"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T16:13:22.000Z"",""labels"":""admin""}"
488,/home/maxiem/Downloads/files/Oliver Urs Lenz/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

m = input()
n = len(m)

som = 0

for i in range(n):
    a = m[:i]
    b = m[i+1:]
    c = a + b
    c = int(c)
    som += c
    c = f'{c:{n+1}d}'
    if i == n-1:
        c = '+' + c[1:]
    print(c)

print('='*(n+1))
print(f'{som:{n+1}d}')

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Oliver Urs Lenz/mathemagisch.py"",""fullName"":""Oliver Urs Lenz"",""id"":""11652"",""status"":""correct"",""submissionID"":""5969853"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T16:53:52.000Z"",""labels"":""admin""}"
489,/home/maxiem/Downloads/files/Bert Van Hecke/mathemagisch.py,"getal = input()

lengte = len(getal)
som = 0
for i in range(len(getal)):
    deel = int(getal[:i] + getal[i + 1:])
    som += deel
    print(f""{'+' if i == lengte - 1 else ' '}{deel:{lengte}d}"")

print('=' * (lengte + 1))
print(f'{som:{lengte + 1}d}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Bert Van Hecke/mathemagisch.py"",""fullName"":""Bert Van Hecke"",""id"":""7924"",""status"":""correct"",""submissionID"":""6010432"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T14:57:52.000Z"",""labels"":""admin""}"
490,/home/maxiem/Downloads/files/Sabina Shamieva/mathemagisch.py,"# vragen naar het getal
import math
getal = str(input())
n = 0
som = 0
# itereren in een for - loop:
for i in getal:
    getal_print = getal[:n] + getal[n + 1:]  # probleem: zoekt het allereerste i en verwijdert die
    n += 1
    if n < len(getal):
        if getal_print:
            getal_print = int(getal_print)
            getal_print = math.floor(getal_print)
        getal_print = str(getal_print)
        print((len(getal) - len(getal_print) + 1)*' ' + getal_print)
    elif n == len(getal):
        print(""+"", getal_print)
    getal_print = int(getal_print)
    som += getal_print
som = str(som)
aantal_is = (n + 1) * '='
print(aantal_is)
print(' ' + som)
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( import ) ( ERROR ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ( string ) ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ),"{""filename"":""Sabina Shamieva/mathemagisch.py"",""fullName"":""Sabina Shamieva"",""id"":""11654"",""status"":""correct"",""submissionID"":""5969521"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T16:27:30.000Z"",""labels"":""bcbt""}"
491,/home/maxiem/Downloads/files/Linde Van Crombrugge/mathemagisch.py,"getal = input('')
str_getal = str(getal)
symbool = '='
x = len(getal)
maal = x + 1
aflijning = symbool * maal
reeks = 1
getalmin = str_getal[reeks:]
begin = 0
som2 = 0
for karakters in getal:
    getalmin_verder = str_getal[0:(reeks-1)] + str_getal[reeks:]
    getalmin_verder = str(int(getalmin_verder))
    reeks += 1
    begin += 1
    som2 += int(getalmin_verder)
    if begin == x:
        print(f""+{getalmin_verder:>{x}}"")
    else:
        print(f""{getalmin_verder:>{x +1}}"")

print(f""{aflijning:>{x +1}}"")
print(f' {som2}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( call_expression ( number ) ( ERROR ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Linde Van Crombrugge/mathemagisch.py"",""fullName"":""Linde Van Crombrugge"",""id"":""11655"",""status"":""correct"",""submissionID"":""5981036"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T17:54:21.000Z"",""labels"":""biol""}"
492,/home/maxiem/Downloads/files/Onur Asci/mathemagisch.py,"text = input()
total = 0

for i in range(len(text) - 1):
    line = str(int(text[:i] + text[i+1:]))

    print(f'{line: >{len(text) + 1}s}')

    total += int(line)

total += int(text[:-1])

print(f'+ {text[:-1]}')
print('=' * ((len(text)) + 1))
print(f' {total}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Onur Asci/mathemagisch.py"",""fullName"":""Onur Asci"",""id"":""4758"",""status"":""correct"",""submissionID"":""5983913"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T10:28:22.000Z"",""labels"":""stat""}"
493,/home/maxiem/Downloads/files/Simon De Meester/mathemagisch.py,"number = str(input())
result = """"
som = 0
for i in range(len(number)):
    if i == len(number)-1:
        result = int(number[:i] + number[(i + 1):])
        som += int(result)
        print(""+"" + ""{:>{}}"".format(str(result), len(number)))
    else:
        result = int(number[:i] + number[(i + 1):])
        som += int(result)
        print("" ""+""{:>{}}"".format(str(result), len(number)))
print(""=""*(len(number)+1))
print("" ""+str(som))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Simon De Meester/mathemagisch.py"",""fullName"":""Simon De Meester"",""id"":""11656"",""status"":""correct"",""submissionID"":""5738871"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-09-28T21:09:48.000Z"",""labels"":""stat""}"
494,/home/maxiem/Downloads/files/Dönegül Sahin/mathemagisch.py,"# 1 getal per keer weg en dan alles optellen
# nieuwe getal is originele getal

# invoer
getal_m = input(""Geef een getal dat uit 4 of meer cijfers bestaat: "")

# verwerking
n = len(getal_m)
nieuw_getal = ''
positie = 0
x = 0
y = 1
som = 0
volledig = getal_m
for i in range(n):
    getal_m = getal_m[:x] + getal_m[y:]
    positie += 1
    x += 1
    y += 1
    if positie != n:
        print(f'{int(getal_m):>{n + 1}}')
    else:
        print(f'+ {int(getal_m)}')
    som += int(getal_m)
    getal_m = volledig
print('=' * (n + 1))
print(1 * ' ' + str(som))
",( program ( ERROR ( ERROR ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( number ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Dönegül Sahin/mathemagisch.py"",""fullName"":""Dönegül Sahin"",""id"":""7988"",""status"":""correct"",""submissionID"":""6008499"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T13:28:46.000Z"",""labels"":""bcbt""}"
495,/home/maxiem/Downloads/files/Stijn De Schepper/mathemagisch.py,"m = input()
n = len(m)
y = 0
x = ''
som = 0

for karacters in m:
    x = ''
    for index, karacter in enumerate(m):
        if index != y:
            x += karacter
    x = x[:-1].lstrip('0') + x[-1]
    som += int(x)
    y += 1
    if y == n:
        print(f""{'+ '+x:{n+1}s}"")
    else:
        print(f""{x:>{n+1}s}"")
print('='*(n+1))
print(f""{som:>{n+1}}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( member_expression ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ( identifier ) ( ERROR ) ( ERROR ( string ) ) ) ),"{""filename"":""Stijn De Schepper/mathemagisch.py"",""fullName"":""Stijn De Schepper"",""id"":""11682"",""status"":""correct"",""submissionID"":""5998164"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T17:19:58.000Z"",""labels"":""bcbt""}"
496,/home/maxiem/Downloads/files/Bastjaan Beernaert/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

number = input()
length = len(number)
sum_int = 0

for i in range(length):
    if i != length - 1:  # if not last line
        new_str = number[:i] + number[i+1:]
        sum_int += int(new_str)
        if new_str.lstrip(""0"") == """":  # if stripping makes empty
            print(f'{new_str.lstrip(""0"") + ""0"":>{length+1}s}')
        else:
            print(f'{new_str.lstrip(""0""):>{len(new_str)+2}s}')
    else:                # if last line
        print('+', end=' ')
        new_str = number[:i] + number[i+1:]
        sum_int += int(new_str)
        print(new_str.lstrip(""0""))
print('=' * (length+1))
print(f'{sum_int:>{length+1}d}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( string ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Bastjaan Beernaert/mathemagisch.py"",""fullName"":""Bastjaan Beernaert"",""id"":""2169"",""status"":""correct"",""submissionID"":""5983404"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T09:34:44.000Z"",""labels"":""stat""}"
497,/home/maxiem/Downloads/files/Max Van Goethem/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

n = input()
length = len(n)
som = 0

for i in range(length):

    write = n[:i] + n[i + 1:]

    fill = length - len(str(int(write))) - 1
    write = "" "" * fill + str(int(write))

    if i == length - 1:
        print(""+ "", f""{write:>1s}"", sep="""")
    else:
        print(""  "", write, sep="""")

    som += int(write)

print((length + 1) * ""="")
print("" "", str(som), sep="""")
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( ERROR ( identifier ) ) ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ),"{""filename"":""Max Van Goethem/mathemagisch.py"",""fullName"":""Max Van Goethem"",""id"":""5784"",""status"":""correct"",""submissionID"":""6004542"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T11:27:35.000Z"",""labels"":""keuz""}"
498,/home/maxiem/Downloads/files/Sarah Gentenaar/mathemagisch.py,"number = input()
length = len(number)
n = length
array = []

while n > 0:
    pos = (number[:(length - n)] + number[(length - n + 1):]).lstrip(""0"")
    if (pos == """"):
        pos = ""0""
    if (n != 1):
        print(pos.rjust(length + 1, "" "")) 
    else:
        print(""+"" + pos.rjust(length, "" "")) 
    
    array.append(int(pos))
    n -= 1

print(""="" * (length + 1))
print(str(sum(array)).rjust(length + 1, "" ""))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ( ERROR ) ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( else_clause ( ERROR ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( string ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ),"{""filename"":""Sarah Gentenaar/mathemagisch.py"",""fullName"":""Sarah Gentenaar"",""id"":""11684"",""status"":""correct"",""submissionID"":""6029292"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:45:42.000Z"",""labels"":""keuz""}"
499,/home/maxiem/Downloads/files/Elise Buyse/mathemagisch.py,"m = str(input('getal met minstens vier cijfers'))
som = 0
tijdelijk = ''
b = 0
if len(m) >= 4:
    for i in range(len(m)):
        getal = m[i]
        tijdelijk = m[:i] + m[i+1:]
        tijdelijk = int(tijdelijk)
        b = len(str(tijdelijk))
        som += int(tijdelijk)
        if i == len(m) - 1:
            print('+' + (len(m) - b) * ' ' + f'{tijdelijk}')
        else:
            print(((len(m) + 1) - b) * ' ' + f'{tijdelijk}')
    print((len(m)+1) * '=')
    print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( string ) ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( identifier ) ) ) ( string ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Elise Buyse/mathemagisch.py"",""fullName"":""Elise Buyse"",""id"":""11685"",""status"":""correct"",""submissionID"":""6008804"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T13:42:16.000Z"",""labels"":""bcbt""}"
500,/home/maxiem/Downloads/files/Laetitia Lamont/mathemagisch.py,"getal_m = str(input('geef een getal >= 1000: '))

#extra variabele nodig voor de tussenstappen
getal = getal_m
#n is de variabele die de positie in het begincijfer aangeeft
n = 0
#x is een variabele die het eindtotaal berekent
x = 0

for cijfer in getal_m[:-1]:
    
    #integer om geen voorloopnullen te hebben
    getal = int(getal_m[:n] + getal_m[n+1:])
    n += 1
    x += getal
    
    #ik zet getal om naar string om de lengte te kunnen berekenen ervan 
    getal = str(getal)
    #variabele spatie gebruiken om uit te lijnen
    spatie = ' ' * (len(getal_m) - len(getal))
    print(spatie, int(getal))

# bij het laatste cijfer moet vooraan een plus staan bij het printen dus die behandel ik apart
getal = getal_m[:-1]
x += int(getal)
print('+', getal)

gelijk = '=' * len(getal_m) + '='
print(gelijk)
print('', x)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Laetitia Lamont/mathemagisch.py"",""fullName"":""Laetitia Lamont"",""id"":""11694"",""status"":""correct"",""submissionID"":""5979191"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T14:32:47.000Z"",""labels"":""keuz""}"
501,/home/maxiem/Downloads/files/Ke Zhang/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# input the digit, written without leading zeros
digit = input()
total = 0
position = len(digit) + 1
equal = '=' * position
# here is the loop
for index, i in enumerate(digit):
    new_line = digit[:index]+digit[index+1:]
    total += int(new_line)
    if new_line.startswith('0'):
        new_line = str(int(new_line))
    # do some edition on the last line 
    if index == len(digit) - 1:
        print('+'+f'{new_line:>{position-1}s}')
    else:
        print(f'{new_line:>{position}s}')
# output
print(equal)
print(f'{str(total):>{position}s}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Ke Zhang/mathemagisch.py"",""fullName"":""Ke Zhang"",""id"":""7546"",""status"":""correct"",""submissionID"":""5965850"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T13:53:02.000Z"",""labels"":""keuz""}"
502,/home/maxiem/Downloads/files/Lennert Dewulf/mathemagisch.py,"m = (input())
lengte = len(m)
som = 0
i = 0

for i in range(lengte):
    m_2 = m[:i] + m[i+1:]
# 0 wordt niet herkend dus moet je die zelfstandig toevoegen
    if m_2[0] == ""0"":
        int_m_2 = int(m_2)
        string_m_2 = str(int_m_2)
        print(' ', string_m_2.rjust(lengte-1, ))
    elif i == lengte-1:
        print(f'+ {m_2}')
    else:
        print(f'  {m_2}')
    som += int(m_2)
    i += 1

print(""=""*(lengte+1))
print(f' {som}')

",( program ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ( ERROR ) ( number ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lennert Dewulf/mathemagisch.py"",""fullName"":""Lennert Dewulf"",""id"":""11697"",""status"":""correct"",""submissionID"":""5997880"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T16:45:59.000Z"",""labels"":""bcbt""}"
503,/home/maxiem/Downloads/files/Anouk Van genechten/mathemagisch.py,"# read a n-digit number m
m = input()

# suppress each of the digits in m one by one
# calculate the sum of the numbers
total = 0
length = len(m)

for index, _ in enumerate(m):
    n = int(m[:index] + m[index + 1:])
    total += n
    if index != length - 1:
        space = (length + 1) - len(str(n))
        space = ' ' * space
        print(f'{space}{n}')
    else:
        space = length - len(str(n))
        space = ' ' * space
        print(f'+{space}{n}')

# print n + 1 equal signs
# print total
print('=' * (length + 1))
print(f' {total}')
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Anouk Van genechten/mathemagisch.py"",""fullName"":""Anouk Van genechten"",""id"":""11710"",""status"":""correct"",""submissionID"":""6022614"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T12:06:12.000Z"",""labels"":""keuz""}"
504,/home/maxiem/Downloads/files/Wim Devis/mathemagisch.py,"getal = str(input())
totaal_som = 0
aantal_karakters = len(getal)

#voor alles behalve de laatste
for i in range(len(getal)-1):
    nieuw = getal[:i] + getal[(i + 1):]

# 0 verdwijnt
    for i in range(len(nieuw)):
        if nieuw[0] == '0':
            test = nieuw[1:]
            nieuw = test
    if len(nieuw) == 0:
        nieuw = '0'

    totaal_som += int(nieuw)

    #printen
    #hoeveel spaties nog?
    aantal_spaties = (aantal_karakters + 1) - len(nieuw)
    nieuw = nieuw[::-1]
    for i in range(aantal_spaties):
        nieuw += ' '

    print(nieuw[::-1])

#de laatste
nieuw = getal[:-1]
totaal_som += int(nieuw)
nieuw = nieuw[::-1]
nieuw += ' +'
print(nieuw[::-1])

#gelijk
gelijk = """"
for i in range(aantal_karakters + 1):
    gelijk += '='
print(gelijk)
print(' {}'.format(totaal_som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( ternary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Wim Devis/mathemagisch.py"",""fullName"":""Wim Devis"",""id"":""8106"",""status"":""correct"",""submissionID"":""5791675"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-03T09:43:34.000Z"",""labels"":""fyss""}"
505,/home/maxiem/Downloads/files/Lieselot Bruneel/mathemagisch.py,"# invoer
getal = input()
n = len(getal)

# n-1 regels printen waar je telkens 1 getal laat vallen
# telkens som bijhouden
som = 0
deel1 = """"
for regel in range(n-1):
    deel2 = getal[1:]
    deelgetal = int(deel1+deel2)
    print(f'{str(deelgetal):>{n+1}s}')
    som += deelgetal
    deel1 += getal[0]
    getal = deel2

# n-de regel met het + teken printen en som bijwerken
print(f'+ {deel1}')
som += int(deel1)

# streep en som printen
print(""=""*(n+1))
print(f' {som}')
",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lieselot Bruneel/mathemagisch.py"",""fullName"":""Lieselot Bruneel"",""id"":""11716"",""status"":""correct"",""submissionID"":""5988593"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T17:21:34.000Z"",""labels"":""stat""}"
506,/home/maxiem/Downloads/files/Nathan Franck/mathemagisch.py,"x = input()
length = len(x)
total = 0
for i in range(length - 1):
    new = x[:i] + x[(i + 1):]
    total += int(new)
    print(f'{int(new): {length+1}d}')

total += int(x[:-1])
print('+', x[:-1])
print('=' * (length+1))
print(f'{total: {length+1}d}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( binary_expression ( new_expression ( ERROR ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( ERROR ( new_expression ( ERROR ) ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( call_expression ( call_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( ERROR ( identifier ) ) ( arguments ( string ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( ERROR ( identifier ) ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ( identifier ) ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Nathan Franck/mathemagisch.py"",""fullName"":""Nathan Franck"",""id"":""11718"",""status"":""correct"",""submissionID"":""5835000"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-06T19:02:30.000Z"",""labels"":""stat""}"
507,/home/maxiem/Downloads/files/Izaak Van Evercooren/mathemagisch.py,"# The objective of this program is to remove every digit of a number alternately once, one at a time and print each
# obtained number on a seperate line. The last number obtained in this way has a plus sign standing left of it. Beneath
# that number, there is a line of n+1 equal signs (with n being number of digits in the original number), and below
# that there is the sum of all these numbers.

# Ask the user for the number.
number_str = input(""Give a number: "")

# sum of the all the numbers.
sum_of_numbers = 0

# Remove each digit of the user given number once and print the result.
for i in range(len(number_str)):
    if i == len(number_str) - 1:
        print(""+"", number_str[:i])
        sum_of_numbers += int(number_str[:i])
    else:
        new_formed_number = number_str[:i] + number_str[i+1:]

        while new_formed_number[0] == ""0"" and len(new_formed_number) > 1:
            new_formed_number = new_formed_number[1:]
        if len(new_formed_number) < len(number_str) - 1:
            new_formed_number = "" ""*(len(number_str) - 1 - len(new_formed_number)) + new_formed_number
        print("" "", new_formed_number)
        sum_of_numbers += int(new_formed_number)

# print the lines with the ""="" signs and the sum.
print(""=""*(len(number_str)+1))
print("""", sum_of_numbers)
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( this ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( ERROR ( identifier ) ) ( property_identifier ) ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( this ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( member_expression ( identifier ) ( property_identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( ERROR ( ERROR ) ) ( property_identifier ) ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( member_expression ( identifier ) ( property_identifier ) ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( binary_expression ( member_expression ( identifier ) ( property_identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( string ) ) ( string ) ) ) ( ERROR ) ),"{""filename"":""Izaak Van Evercooren/mathemagisch.py"",""fullName"":""Izaak Van Evercooren"",""id"":""6017"",""status"":""correct"",""submissionID"":""6020293"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:52:36.000Z"",""labels"":""stat""}"
508,/home/maxiem/Downloads/files/Marie Dumoulin/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input()

afstand = len(getal) + 1
som = 0

for index in range(len(getal)-1):
    nieuw_getal = getal[:index] + getal[index+1:]
    print(f'{int(nieuw_getal):>{afstand}}')
    som += int(nieuw_getal)

nieuw_getal = getal[:-1]
print(f'+{nieuw_getal:>{afstand-1}}')
som += int(nieuw_getal)
gelijk_aan_tekens = '=' * afstand
print(gelijk_aan_tekens)
print(f'{som:>{afstand}}')


",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Marie Dumoulin/mathemagisch.py"",""fullName"":""Marie Dumoulin"",""id"":""8353"",""status"":""correct"",""submissionID"":""6033009"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T18:48:25.000Z"",""labels"":""bcbt""}"
509,/home/maxiem/Downloads/files/Laurens De Greve/mathemagisch.py,"getal=str(input('getal?'))
lengte_getal=len(getal) #=n
som=0

for i in range(lengte_getal):

    eerstedeel=getal[:i]
    laatstedeel=getal[i+1:]
    nieuwgetal = eerstedeel + laatstedeel
    nieuwgetalzonder0=nieuwgetal.lstrip('0')
    if nieuwgetalzonder0==(""""):
        nieuwgetalzonder0='0'
    if i==lengte_getal-1:
        uitgelijnd = '+'+f""{str(nieuwgetalzonder0):>{lengte_getal}s}""

    else:
        uitgelijnd = f""{str(nieuwgetalzonder0):>{lengte_getal+1}s}""

    print(uitgelijnd)

    getalwaarde=int(nieuwgetalzonder0)
    som+=getalwaarde
print((lengte_getal+1)*'=')
print(f""{str(som):>{lengte_getal+1}s}"")



",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( string ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Laurens De Greve/mathemagisch.py"",""fullName"":""Laurens De Greve"",""id"":""11736"",""status"":""correct"",""submissionID"":""6020436"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:58:14.000Z"",""labels"":""keuz""}"
510,/home/maxiem/Downloads/files/Judit Dierickx/mathemagisch.py,"getal = input()
lengte = len(getal)
x = 0
uitkomst = 0

while x < lengte:
    if x == lengte-1:
        newgetal = str(getal[:x])
        print(f'+ {newgetal}')
    else:
        newgetal = getal[:x] + getal[x + 1:]
        if int(newgetal) == 0:
            newgetal1 = ""0"".rjust(lengte)
            print(f' {newgetal1}')
        else:
            newgetal1 = newgetal.lstrip('0').rjust(lengte)
            print(f' {newgetal1}')
    intnewgetal = int(newgetal)
    uitkomst += intnewgetal
    x += 1
print(""="" * (lengte + 1))
print(f' {uitkomst}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Judit Dierickx/mathemagisch.py"",""fullName"":""Judit Dierickx"",""id"":""11749"",""status"":""correct"",""submissionID"":""6007783"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T12:56:36.000Z"",""labels"":""fyss""}"
511,/home/maxiem/Downloads/files/Silke Castelein/mathemagisch.py,"getal = str(input())
l = len(getal)+1
x = 0
nieuw_getal = ''
som = 0
while x < len(getal)-1:
    getal_deel1 = getal[:x]
    getal_deel2 = getal[-(len(getal)-(x+1)):]
    nieuw_getal = getal_deel1 + getal_deel2
    if nieuw_getal[0] == '0':
        nieuw_getal= '' + nieuw_getal[1:len(nieuw_getal)] 
    print(f'{int(nieuw_getal):>{l}}')
    x += 1
    som += int(nieuw_getal)
    nieuw_getal = ''
    
x == len(getal)-1
nieuw_getal = getal[:x]
print(f'+{nieuw_getal:>{l-1}s}')
x += 1
som += int(nieuw_getal)
nieuw_getal = ''

x == len(getal)
print('='*l)
x == len(getal)+1
print(f'{str(som):>{l}s}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( unary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Silke Castelein/mathemagisch.py"",""fullName"":""Silke Castelein"",""id"":""7996"",""status"":""correct"",""submissionID"":""5984721"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T12:14:00.000Z"",""labels"":""bcbt""}"
512,/home/maxiem/Downloads/files/Julie Amez/mathemagisch.py,"#invoer
m = input(""het getal"")
som = 0

for i in range(len(m)):
    
    if i == len(m) - 1:
        getal = m[0:i] + m[i + 1:len(m)]
        som += int(getal)
        print(f'+ {getal}')
    
    else:
        getal = m[0:i] + m[i + 1:len(m)]
        som += int(getal)
        #voorloopnullen vermijden
        cijfer = getal[0]
        aantal_nullen = 0
        while cijfer == '0' and aantal_nullen < len(getal) - 1:
            aantal_nullen += 1
            cijfer = getal[aantal_nullen]
        getal = (' ' * aantal_nullen) + getal[aantal_nullen:]
        print(f'  {getal}')

#de regel gelijkheidstekens
herhalingen = len(m) + 1
print('=' * herhalingen)

#uitkomst
print(f' {som}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( string ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Julie Amez/mathemagisch.py"",""fullName"":""Julie Amez"",""id"":""11756"",""status"":""correct"",""submissionID"":""5997762"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T16:31:45.000Z"",""labels"":""bcbt""}"
513,/home/maxiem/Downloads/files/Christophe Segers/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

number = input(""Number: "")

sum_result = 0
for index in range(len(number)):
    next_number = int(number[:index] + (number[index+1:] if index < len(number) - 1 else """"))
    sum_result += next_number
    print(f'{next_number:={""+"" if index == len(number) -1 else """"}{len(number) + 1}d}')
print(""=""*(len(number)+1))
print(f'{sum_result:{len(number)+1}d}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( identifier ) ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ( ERROR ( identifier ) ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( string ) ) ( ERROR ( string ) ) ( string ) ) ) ) ) ),"{""filename"":""Christophe Segers/mathemagisch.py"",""fullName"":""Christophe Segers"",""id"":""11758"",""status"":""correct"",""submissionID"":""5992669"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T10:29:58.000Z"",""labels"":""stat""}"
514,/home/maxiem/Downloads/files/Denzel Van Gucht/mathemagisch.py,"getal = input("""")
index = 0
z = 0
voorloopnullen = False
for _ in range(len(getal) - 1):
    x = ''.join(getal[i] for i in range(len(getal)) if i != index)
    if x[0] == '0':
        voorloopnullen = True
        if voorloopnullen:
            x = x.lstrip(""0"")
            if len(x) == len(getal) - 2:
                x = x.rjust(len(getal) - 1)
            elif x == """":
                x = ""0""
                x = x.rjust(len(getal) - 1)
    y = int(x)
    print(f'  {str(x)}')
    index += 1
    z += y
m = ''.join(getal[i] for i in range(len(getal) - 1) if i != -1)
print(f'+ {m}')
print('=' * (len(getal) + 1))
print(f' {z + int(m)}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( unary_expression ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Denzel Van Gucht/mathemagisch.py"",""fullName"":""Denzel Van Gucht"",""id"":""8302"",""status"":""correct"",""submissionID"":""6021424"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T10:50:31.000Z"",""labels"":""chem""}"
515,/home/maxiem/Downloads/files/Jana Gussé/mathemagisch.py,"# invoerwaarden
getal = str(input())

som = 0
l = len(getal)
schrap = """"
getal_int = 0
printstring =""""
counter = 0
stop = 0
y=0

for x in range(l):
    if x == 0:
        schrap = getal[1:l]
    elif x == l-1:
        schrap = getal[0:l-1]
    else:
        schrap = getal[0:x] + getal[x+1:l]
    getal_int = int(schrap)
    som = som + getal_int
    while (stop != 1) and (counter < len(schrap)):
        if schrap[counter] == ""0"":
            counter = counter + 1
        else:
            stop = 1
    if counter == 0:
        printstring = schrap
    else:
        printstring = "" "" * (counter) + schrap[counter:l-1]
    if printstring == "" "" * (counter):
        printstring = "" "" * (counter-1) + ""0""
    if x == l-1:
        print(""+"", printstring)
    else:
        print("" "", printstring)
    stop = 0
    counter = 0
    printstring = """"

gelijkstring = ""="" * (l+1)

# printen van de rekensom
print(gelijkstring)
print("""", som)",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( while_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( string ) ( ERROR ( parenthesized_expression ( identifier ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Jana Gussé/mathemagisch.py"",""fullName"":""Jana Gussé"",""id"":""11763"",""status"":""correct"",""submissionID"":""6022570"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T12:04:25.000Z"",""labels"":""keuz""}"
516,/home/maxiem/Downloads/files/Emma Bekaert/mathemagisch.py,"m = str(input(""Geef een getal van minstens 4 cijfers. ""))
#while loop met telkens de n-de karakter die geschrapt wordt, dan dat resultaat omgezet in int en uitgeprint
n = 0
som = 0
spatie = "" ""
while n != len(m):
    getal_nieuw = m[:n] + m[n+1:]
    if int(getal_nieuw) != 0:
        n += 1
        getal_nieuw_int = int(getal_nieuw)
        som += getal_nieuw_int
        if n == len(m):
            print(f""+ {getal_nieuw}"")
        else:
            print(f"" {(len(str(int(m)-1)) - len(str(getal_nieuw.lstrip('0')))) * spatie}{getal_nieuw.lstrip('0')}"")
    else:
        n += 1
        print(f""{len(str(int(m))) * spatie}0"")
print((n+1)*""="")
print(f"" {som}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Emma Bekaert/mathemagisch.py"",""fullName"":""Emma Bekaert"",""id"":""11767"",""status"":""correct"",""submissionID"":""5945015"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T21:39:53.000Z"",""labels"":""geog""}"
517,/home/maxiem/Downloads/files/Marit Eyckmans/mathemagisch.py," #invoer
m = input()
n = len(m)

#bewerkingen uitvoeren
som = 0
for i in range(n - 1):
    getal = m[:i] + m[i + 1:]
    som += int(getal)
    if getal[0] == ""0"":
        getal = getal.replace(""0"", "" "", n -2)
    print(f'  {getal}')
getal = m[:(n - 1)]
som += int(getal)

#uitvoer
print(f'+ {getal}')
print(""="" * (n + 1))
print(f' {som}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Marit Eyckmans/mathemagisch.py"",""fullName"":""Marit Eyckmans"",""id"":""11769"",""status"":""correct"",""submissionID"":""6024292"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:00:04.000Z"",""labels"":""fyss""}"
518,/home/maxiem/Downloads/files/Nathalia Busschodts/mathemagisch.py,"getal = str(input())

i = 0
som = 0
spaties = """"

for i in range(1, len(getal)):
    if i == 1 and getal[1] == ""0"":
        nieuw_getal = getal[0:i - 1] + getal[i + 1:]
        while nieuw_getal[0] == ""0"" and len(nieuw_getal) > 1:
            nieuw_getal = nieuw_getal[1:]
            spaties = "" "" * len(getal[0:-3])
        print(f""   {spaties}{nieuw_getal}"")
        som += int(nieuw_getal)

    else:
        nieuw_getal = getal[0:i - 1] + getal[i:]

        print(f""  {nieuw_getal}"")
        som += int(nieuw_getal)

nieuw_getal = getal[0:-1]
som += int(nieuw_getal)

print(f""+ {nieuw_getal}"")

is_teken_aantal = len(str(som))
is_teken = ""="" * (is_teken_aantal + 1)

print(f""{is_teken}\n {som}"")
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( subscript_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ( escape_sequence ) ) ) ) ) ),"{""filename"":""Nathalia Busschodts/mathemagisch.py"",""fullName"":""Nathalia Busschodts"",""id"":""11771"",""status"":""correct"",""submissionID"":""5987116"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T15:12:28.000Z"",""labels"":""bcbt""}"
519,/home/maxiem/Downloads/files/Oliver Mechthold/mathemagisch.py,"#inlezen van het cijfer
cijfer = input()

#lengte cijfer bepalen, nodig voor loop en cijfers mooi onder elkaar te krijgen
lengte = len(cijfer)
totaal = 0

#for loop
for y in range(lengte):
    cijfer_eind = '' #via for loop telkens cijfer apart bepalen en via cijfer_eind laten uitlezen
    for x in range(0, lengte):
        if x != y:
            cijfer_eind += cijfer[x]
    if y < lengte - 1:
        print(f""{str(int(cijfer_eind)):>{lengte+1}s}"") #laatste stuk code nodig voor space en mooi onder elkaar te zetten
        totaal += int(cijfer_eind)
    if y == lengte - 1:
        print(f""+ {str(int(cijfer_eind)):>6s}"")
        totaal += int(cijfer_eind)
    y += 1
print(f""{'='*(lengte+1)}"")
totaal = str(totaal)
print(f""{totaal:>{lengte+1}s}"")",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Oliver Mechthold/mathemagisch.py"",""fullName"":""Oliver Mechthold"",""id"":""11778"",""status"":""correct"",""submissionID"":""6009733"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T14:26:14.000Z"",""labels"":""keuz""}"
520,/home/maxiem/Downloads/files/Karen Leers/mathemagisch.py,"number = input(""Give the number (>3 digits): "")

som = 0
n = len(number)
line = '='*(n+1)

count = 0
while count != len(number):
    old = list(number)
    old[count] = """"
    new = int("""".join(old))
    new = str(new)
    som += int(new)
    if count == len(number)-1:
        print('+', new.rjust(n-1, ' '))
    else: print(new.rjust(n+1, ' '))
    count += 1

print(line)
print('', som)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( new_expression ( ERROR ) ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( call_expression ( call_expression ( call_expression ( call_expression ( binary_expression ( new_expression ( ERROR ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( ERROR ( identifier ) ) ( arguments ( string ) ( new_expression ( ERROR ) ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( ERROR ( identifier ) ) ( arguments ( new_expression ( ERROR ) ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( ERROR ( identifier ) ( number ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Karen Leers/mathemagisch.py"",""fullName"":""Karen Leers"",""id"":""11779"",""status"":""correct"",""submissionID"":""6029490"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:54:48.000Z"",""labels"":""biol""}"
521,/home/maxiem/Downloads/files/Viktor Van Baeveghem/mathemagisch.py,"invoer = input()
lengte = len(invoer)
som = 0

for positie in range(lengte):
    uitvoer = invoer[0:positie] + invoer[positie + 1:lengte]
    som += int(uitvoer)
    if positie < lengte - 1:
        print(""  "", end='')
    else:
        print(""+ "", end='')
    uitvoergetal = int(uitvoer)
    uitvoer = str(uitvoergetal)
    aantalspaties = lengte - len(uitvoer) - 1
    print("" "" * aantalspaties + uitvoer)
print('=' * (lengte + 1))
print("" "" + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Viktor Van Baeveghem/mathemagisch.py"",""fullName"":""Viktor Van Baeveghem"",""id"":""11782"",""status"":""correct"",""submissionID"":""6015568"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:33:04.000Z"",""labels"":""chem""}"
522,/home/maxiem/Downloads/files/Arno Leroy/mathemagisch.py,"# So, we want a number and we want to erase each number starting from first to last.
# We then want to add these together and create a nice sum and formula.
# First we will put the input:

number = str(input())

# All / nearly all calculations will be dependent on the length of the number

length = len(number)

# To calculate the total sum, create a 0 variable:

total = 0

# Generate a for loop to make the numbers.

for i in range(length):
    new = number[:i] + number[i+1:]
    total += int(new)

    # We would like to keep it clean: an integer doesn't need zero's in front of it!
    # To take care of that, we will calculate the spaces (x) necessary.
    # To do this, we will transform the strain to an integer

    new = int(new)

    x = ' ' * (length - len(str(new)))

    if i == (length-1):
        print(f'+{x}{new}')
    else:
        print(f' {x}{new}')

print('=' * (length+1))
print(' ' + str(total))
",( program ( ERROR ( ERROR ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( ERROR ( ERROR ) ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( ERROR ( ERROR ) ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( number ) ( identifier ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( member_expression ( identifier ) ( property_identifier ) ) ( ERROR ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( new_expression ( ERROR ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( new_expression ( identifier ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( string ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( member_expression ( identifier ) ( ERROR ( ERROR ) ) ( property_identifier ) ) ) ) ) ( ERROR ( ERROR ( expression_statement ( sequence_expression ( this ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( identifier ) ( ERROR ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Arno Leroy/mathemagisch.py"",""fullName"":""Arno Leroy"",""id"":""11783"",""status"":""correct"",""submissionID"":""6000018"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T00:31:33.000Z"",""labels"":""biol""}"
523,/home/maxiem/Downloads/files/Dries Coopman/mathemagisch.py,"#invoer van het getal:
getal = input()

som = 0

for index, cijfer in enumerate(getal):
    var = len(getal) - 1
    teller = getal.count(cijfer)

    if teller != 1:
        var_x = getal[:index] + """" + getal[index + len(cijfer):]

    else:
        var_x = getal.replace(cijfer, """")

    som += int(var_x)
    var_y = var_x.lstrip(""0"")
    if var_y == """":
        var_y = var_y.replace("""",""0"")




    if index == (len(getal) - 1):
        print(f'+ ' + f'{var_y:>{var}}')
    else:
        print(f'  ' + f'{var_y:>{var}}')


print((len(getal) + 1) * '=')
print(f' {som}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( variable_declaration ( ERROR ) ( variable_declarator ( identifier ) ) ) ( expression_statement ( binary_expression ( parenthesized_expression ( identifier ) ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( string ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ) ) ) ) ) ( ERROR ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( identifier ) ( identifier ) ( ERROR ) ( ERROR ( string ) ( object ( pair ( property_identifier ) ( ERROR ) ( object ( shorthand_property_identifier ) ) ) ) ( string ) ( string ) ( object ( pair ( property_identifier ) ( ERROR ) ( object ( shorthand_property_identifier ) ) ) ) ( string ) ( string ) ( object_pattern ( shorthand_property_identifier_pattern ) ) ) ) ),"{""filename"":""Dries Coopman/mathemagisch.py"",""fullName"":""Dries Coopman"",""id"":""11784"",""status"":""correct"",""submissionID"":""6015383"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:16:53.000Z"",""labels"":""keuz""}"
524,/home/maxiem/Downloads/files/Lotte Brusselmans/mathemagisch.py,"#geef de input
m = input()
#de lengte wordt weergegeven door n characters
n = len(m)

som = 0
#we bekijken nu elk getal afzonderlijk binnen de lengte van m
for i in range(n):
    #we willen i overslaan. Dit doen we door een interval [:i] te creëren (i valt hier buiten)
    #het is een halfopen interval. en vervolgens een tweede interval [i+1:]
    #deze plakken we aan elkaar
    getal = m[:i] + m[i+1:]
    getal_int = int(getal)
    som += getal_int

    #als we aan het laatste getal komen willen we een plus toevoegen. Omdat we van 0 beginnen tellen, is dit
    #n-1
    if i == (n-1):
        #we willen rechts uitlijnen over n+1 posities. Bij het + statement zijn er al 2 spaties
        #verwerkt door de plus zelf en de spatie na de plus
        print(f""+ {getal_int:>{n-1}}"")
    else:
        print(f""{getal_int:>{n+1}}"")

print((n+1)* '=')
print(f""{som:>{n+1}}"")",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( member_expression ( identifier ) ( property_identifier ) ) ) ( expression_statement ( subscript_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( member_expression ( identifier ) ( property_identifier ) ) ( identifier ) ( identifier ) ( number ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( member_expression ( identifier ) ( property_identifier ) ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lotte Brusselmans/mathemagisch.py"",""fullName"":""Lotte Brusselmans"",""id"":""11786"",""status"":""correct"",""submissionID"":""5976152"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T10:35:58.000Z"",""labels"":""bcbt""}"
525,/home/maxiem/Downloads/files/Jitske Verheecke/mathemagisch.py,"#invoer
getal=input()

#berekening
lengte=len(getal)
som=0
for i in range(lengte-1):
    element=getal[i]
    getal_zonder= getal[:i]+ getal[i+1:]
    som+=int(getal_zonder)
    print(str(int(getal_zonder)).rjust(lengte +1))
deel=getal[:lengte-1]
getal_zonder=int(deel)
som+=getal_zonder

print('+ ' +str(getal_zonder))
gelijk_aan= '='*(lengte+1)
print(gelijk_aan)
print(' '+ str(som))",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Jitske Verheecke/mathemagisch.py"",""fullName"":""Jitske Verheecke"",""id"":""11787"",""status"":""correct"",""submissionID"":""6018171"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T08:36:40.000Z"",""labels"":""fyss""}"
526,/home/maxiem/Downloads/files/Robbe Cool/mathemagisch.py,"#vraag getal
getal = input()
som = 0
#laat telkens een cijfer uit het getal weg
lengte = len(getal)
uitlijnen = lengte +1
for x in range(lengte-1):
    links = getal[:x]
    rechts = getal[x+1:]
    nieuwgetal = int(links + rechts)
    som+= nieuwgetal
    y=0
    nieuwgetal = str(nieuwgetal)

    print(f'{nieuwgetal:>{uitlijnen}s}')

x+=1
links = getal[:x]
rechts = getal[x+1:]
nieuwgetal = str(links + rechts)
som += int(nieuwgetal)
print(f'+ {nieuwgetal}')
print(uitlijnen*'=')
som = str(som)
print(f'{som:>{uitlijnen}s}')",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Robbe Cool/mathemagisch.py"",""fullName"":""Robbe Cool"",""id"":""11789"",""status"":""correct"",""submissionID"":""5983214"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T09:12:14.000Z"",""labels"":""biol""}"
527,/home/maxiem/Downloads/files/Robbe Vandenbroucke/mathemagisch.py,"getal_str = str(input())
n = int(len(getal_str))
som = 0

for i in range(0, n):
    deel_getal = int(getal_str[0: i] + getal_str[i+1:])
    som += deel_getal
    if i == int(n-1):
        print(f'+ {deel_getal:}')
    else:
        blanco = int(len(getal_str)-len(str(deel_getal)))
        print(f'{(blanco +1) * "" ""}{deel_getal}')

lijn = (n+1) * ""=""

print(lijn)
print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Robbe Vandenbroucke/mathemagisch.py"",""fullName"":""Robbe Vandenbroucke"",""id"":""11794"",""status"":""correct"",""submissionID"":""5730373"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-09-28T14:13:08.000Z"",""labels"":""keuz""}"
528,/home/maxiem/Downloads/files/Wout Houbart/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# input vragen
getal = input('Geef een getal in (minstens 4 cijfers): ')

# inlezen van variabelen
spaties = len(getal) + 1
sum_1 = 0
laatste_cijfer = getal[:-1]
i = 2
reeks = '123456789'

# loop tot en met voorlaatste cijfer van het getal
for karakter in getal[0]:
    index = getal.index(karakter)
    geschrapt = getal[index + 1:]
    if geschrapt == (len(getal)-1) * '0':
        geschrapt = '0'
        print(f""{geschrapt:>{spaties}s}"")
        sum_1 += int(geschrapt)
    else:
        geschrapt = geschrapt.lstrip('0')
        print(f""{geschrapt:>{spaties}s}"")
        sum_1 += int(geschrapt)

for karakter in getal[1:-1]:
    index = getal.index(karakter, i - 1, i)
    geschrapt = getal[0:index] + getal[index + 1:]
    geschrapt = geschrapt.lstrip('0')
    print(f""{geschrapt:>{spaties}s}"")
    sum_1 += int(geschrapt)
    i += 1

# schrappen van laatste cijfer
geschrapt = laatste_cijfer
sum_2 = sum_1 + int(laatste_cijfer)
laatste_regel = '+' + ' ' + geschrapt

# opmaak output
print(f""{laatste_regel:>{spaties}s}"")
print((len(getal) + 1) * '=')
print(f""{str(sum_2):>{spaties}s}"")

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( number ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Wout Houbart/mathemagisch.py"",""fullName"":""Wout Houbart"",""id"":""11796"",""status"":""correct"",""submissionID"":""5983490"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T09:42:51.000Z"",""labels"":""bcbt""}"
529,/home/maxiem/Downloads/files/Ruben Kalfsvel/mathemagisch.py,"getal = input()
lengte = len(str(getal))
getal2 = 0
som = 0
for i in range(lengte):
    getal2 = int(getal[:i] + getal[(i + 1):])
    som += getal2
    if i == lengte - 1:
        print('+ ' + str(getal2))
    else:
        print(' ' * ((lengte + 1) - len(str(getal2))) + str(getal2))
print('=' * (lengte + 1))
print(' ' + str(som))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Ruben Kalfsvel/mathemagisch.py"",""fullName"":""Ruben Kalfsvel"",""id"":""8274"",""status"":""correct"",""submissionID"":""5978319"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T13:31:47.000Z"",""labels"":""fyss""}"
530,/home/maxiem/Downloads/files/Laure-Ines Lebon/mathemagisch.py,"# invoer
invoer = str(input('getal = '))

# verwerking
lengte = len(invoer)
som = 0
index = 0  # = posities van getallen in ingevoerd getal

while index != lengte:
    getal = invoer[:index] + invoer[index + 1:]  # telkens een getal weglaten
    integer = int(getal)

    string = str(integer)

    # termen
    if index < (lengte - 1):
        print(f'{string:>{lengte + 1}s}')  # + extra spaties aan linkerkant

    # laatste term met + (index = 8 = lengte - 1)
    else:
        print(f'+{string:>{lengte}s}')

    index += 1
    som += integer


gelijk = ((lengte + 1) * '=')  # uitvoer
som = str(som)  # uitvoer


print(f'{gelijk}')
print(f'{som:>{lengte + 1}s}')
",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ( ERROR ) ) ( identifier ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( parenthesized_expression ( assignment_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ( ERROR ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Laure-Ines Lebon/mathemagisch.py"",""fullName"":""Laure-Ines Lebon"",""id"":""11795"",""status"":""correct"",""submissionID"":""6031985"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:55:18.000Z"",""labels"":""bcbt""}"
531,/home/maxiem/Downloads/files/Ayla Van Damme/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

#invoer
g = str(input())     #getal
n = 0               # index nummer
s = 0               # som van de getallen
l = len(g)          #lengte van het getal
#berekening
while n != (len(g)):        #zolang niet alle cijfers doorlopen zijn
    getal = g[:n] + g[n+1:]     #n weglaten
    intgetal = int(getal)       #omzetten tot in int voor som
    
    ge = str(intgetal)
    if n < (l - 1):            # voor alle getallen behalve de laatste
        print(f'{ge:>{l+1}s}')   #alle getallen rechts uitlijnen
    else:                       #laatste getal
        print(f'+{ge:>{l}s}')
    n += 1              #index van cijfer verhogen
    s += intgetal       #ieder getal optellen
s = str(s)              # som omzetten in een string
u = (n + 1) * ""=""       # lijntje maken
print(f""{u}"")
print(f'{s:>{l+1}s}')



",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ayla Van Damme/mathemagisch.py"",""fullName"":""Ayla Van Damme"",""id"":""11799"",""status"":""correct"",""submissionID"":""5995267"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T13:31:26.000Z"",""labels"":""bcbt""}"
532,/home/maxiem/Downloads/files/Julie Vandenberghe/mathemagisch.py,"getal = input()
positie = 0
som = 0
n = len(getal)

for positie, cijfer in enumerate(getal):
    kleingetal = (getal[:positie] + getal[positie+1:]).lstrip('0')
    if kleingetal == '':
        kleingetal = '0'
    som += int(kleingetal)
    if positie == n-1:
        print('+ {}'.format(kleingetal))
    else:
        print(f""{kleingetal:>{n+1}s}"")

print(f""{(n+1)*'=':>{n+1}s}"")
print(f""{str(som):>{n+1}s}"")
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Julie Vandenberghe/mathemagisch.py"",""fullName"":""Julie Vandenberghe"",""id"":""11804"",""status"":""correct"",""submissionID"":""6007735"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T12:55:26.000Z"",""labels"":""keuz""}"
533,/home/maxiem/Downloads/files/Warre Missiaen/mathemagisch.py,"x = input(""What is the number?"")
y = x
am = len(y)
z = 1
q = 1
if x[1] == '0' and x[2] !='0':
    z = 0
exsum = 0
for ch in range(1, am):
    a = x[ch]
    a = int(a)
    exsum += a
if exsum == 0:
    q = 0

number = 0
count = 0
for ch in range(0, am):
    number += 1
    y = list(y)
    if number == am:
        y[ch] = ''
        y = ''.join(y)
        y = int(y)
        count += y
        print(f'+ {y}')
        a = (am+1)*'='
        print(a)
        print(f' {count}')
    else:
        y[ch] = ''
        y = ''.join(y)
        if z == 0 and number ==1:
            y = int(y)
            print(f'   {y}')
        elif q ==0 and number==1:
            y = int(y)
            w = (am-1)*""x""
            w = w.replace(""x"","" "")
            print(w,y)

        else:
            y = int(y)
            print(f'  {y}')
            y = int(y)
        count += y
        y = str(y)
        y = list(y)
        y = x





",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( subscript_expression ( string ) ( ERROR ( identifier ) ( identifier ) ) ( number ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Warre Missiaen/mathemagisch.py"",""fullName"":""Warre Missiaen"",""id"":""11807"",""status"":""correct"",""submissionID"":""6000297"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T06:07:23.000Z"",""labels"":""fyss""}"
534,/home/maxiem/Downloads/files/Sien De Neve/mathemagisch.py,"g = input()
g2 = g[1:]
n = str()
s = int(g2)
if g == '70000000000':
    
    print('  '     +     
  '         0' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  ' 
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' 
'+ 7000000000' + '\n' 
'============' + '\n' + ' '
  '70000000000')
else:


    for cijfer in g2:
        if cijfer == '0':
            ind = g2.index(cijfer)
            g2 =  ' ' * (ind +1) + g2[ind + 1:]
            t = g2
            if t == ' 0':
                print(t)
                break
        else:
            t = '  ' + g2
            print(t)
            break
    
    c = 0
    a = len(g) - 1
    b = len(g2) + 2
    for ind, cijfer2 in enumerate(g):
            c += 1
            if c == a:
                g3 = g[:ind] +  cijfer2 + g2[ind + 1:]
                n = '+' + ' ' + g3
                print(n)
                s += int(g3)
            elif c < a:
                g3 = g[:ind] + cijfer2 + g2[ind + 1:]
                n = '  ' + g3
                print(n)
                s += int(g3)
            else:
                d = '='*b  + '\n' + ' ' + str(s)
                print(d)

        
        ",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( ERROR ( string ( escape_sequence ) ) ) ( string ) ) ( ERROR ( string ( escape_sequence ) ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( break_statement ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( break_statement ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( string ( escape_sequence ) ) ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Sien De Neve/mathemagisch.py"",""fullName"":""Sien De Neve"",""id"":""7986"",""status"":""correct"",""submissionID"":""5995572"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T13:52:15.000Z"",""labels"":""chem""}"
535,/home/maxiem/Downloads/files/Lisa Trenson/mathemagisch.py,"m = input(""Geef het getal: "")
n = len(m)
herhalingen = n+1
positie = 0
som = 0

for positie in range(n):
    if positie == n-1:
        cijfer = m[0:positie] + m[positie + 1:n]
        som += int(cijfer)
        print(f""+ {cijfer}"")
    else:
        cijfer = m[0:positie] + m[positie + 1:n]
        som += int(cijfer)
        y = cijfer[0]
        aantal_nullen = 0
        while y == ""0"" and aantal_nullen < len(cijfer) - 1:
            aantal_nullen += 1
            y = cijfer[aantal_nullen]
        cijfer = ("" "" * aantal_nullen) + cijfer[aantal_nullen:]
        print(f""  {cijfer}"")
        
print(herhalingen * '=')
print(f"" {som}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( string ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lisa Trenson/mathemagisch.py"",""fullName"":""Lisa Trenson"",""id"":""11813"",""status"":""correct"",""submissionID"":""6015829"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T21:03:58.000Z"",""labels"":""bcbt""}"
536,/home/maxiem/Downloads/files/Rune Lagaisse/mathemagisch.py,"# input
m = input('Give a number with at least 4 digits:')
m_len = len(str(m)) # length of the input number is necessary for printing down the line 

#loop 
sum = 0 # initiate sum
for i in range(m_len): # for the length of the number: 
    line = int(m[:i] + m[i + 1:]) #remove the letter corresponding to the index number 
    sum += line # calc sum of all suppressed numbers 
    if i != m_len - 1: # this is to print the plus, we only want the plus in front of the second to last printed statement (right above the ==== line)
        print(str(line).rjust(m_len + 1)) # rjust routlines strings on the right, we outline based on length of input  + 1 (for the plus see further)
    else: 
        print(f'+{str(line).rjust(m_len)}') # the second to lasts line we need a + before the number 

print('=' * (m_len + 1)) # print line of ===== at end that is one charcacter longer than m 
print(str(sum).rjust(m_len + 1)) #sum of all suppressed numbers ",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( this ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ) ( identifier ) ) ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( call_expression ( number ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ),"{""filename"":""Rune Lagaisse/mathemagisch.py"",""fullName"":""Rune Lagaisse"",""id"":""11818"",""status"":""correct"",""submissionID"":""6008997"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T13:50:48.000Z"",""labels"":""biol""}"
537,/home/maxiem/Downloads/files/Luna Vanden Eede/mathemagisch.py,"getal = int(input()) 
getal >= 1000

positie = 0
while positie < len(getal):
    print(getal - getal[positie])
    positie += 1

print(getal)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Luna Vanden Eede/mathemagisch.py"",""fullName"":""Luna Vanden Eede"",""id"":""11826"",""status"":""runtime error"",""submissionID"":""6028745"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:15:49.000Z"",""labels"":""geog""}"
538,/home/maxiem/Downloads/files/Wout Bogaert/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# getal opvragen
getal = input()

# lengte string = lengte getal
lengte_getal = len(getal)

som = 0
for i in range(0, lengte_getal):
    geschrapt_getal = getal[0:i] + getal[i + 1:]
    if i != lengte_getal - 1:
        while geschrapt_getal[0] == '0' and len(geschrapt_getal) != 1:
            geschrapt_getal = geschrapt_getal.replace('0', '', 1)
        print(f""{geschrapt_getal:>{lengte_getal + 1}s}"") # rechts uitlijnen tot n + 1 posities
    else:
        print(f""+{geschrapt_getal:>{lengte_getal}s}"")
    # som nog zelf uitrekenen
    som += int(geschrapt_getal)

# n + 1 aantal gelijkheidstekens
streep = (lengte_getal + 1) * ""=""
print(f""{streep}"")
print(f"" {som:}"")
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( number ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Wout Bogaert/mathemagisch.py"",""fullName"":""Wout Bogaert"",""id"":""11827"",""status"":""correct"",""submissionID"":""5976388"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T11:01:05.000Z"",""labels"":""fyss""}"
539,/home/maxiem/Downloads/files/Wannes Soenen/mathemagisch.py,"getal = input()
som = 0
for i in range(len(getal)):
    stukjes = getal[:i] + getal[i +1:]
    som += int(stukjes)
    if i < len(getal) -1:
        print('  ', end='')
    else:
        print('+ ', end='')
    stuukjes = int(stukjes)
    stukjes = str(stuukjes)
    spaties = len(getal) - len(stukjes) -1
    print(' ' * spaties + stukjes)
print('=' * (len(getal) +1))
print(' ' + str(som))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Wannes Soenen/mathemagisch.py"",""fullName"":""Wannes Soenen"",""id"":""11828"",""status"":""correct"",""submissionID"":""6014573"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T19:11:23.000Z"",""labels"":""chem""}"
540,/home/maxiem/Downloads/files/Nathan Tops/mathemagisch.py,"# begingetal invoeren waar je telkens een cijfer uit gaat weglaten (van links naar rechts)
eerste_getal = input()

# uitkomst op nul zetten
som = 0

# telkens een cijfer uit begingetal weglaten (van links naar rechts)
for a in range(len(eerste_getal)-1):
    get1 = eerste_getal[:a] + eerste_getal[a+1:]
    som += int(get1)

    # nu gaan we extra loop maken voor als begincijfer 0 is en voor als alle cijfers nul zijn
    n = 0
    while get1[n] == ""0"" and n != len(get1)-1:
        get1 = "" ""*(n+1) + get1[n+1:]
        n += 1
    print(""  "" + get1)
print(f'+ {eerste_getal[:len(eerste_getal)-1] + eerste_getal[len(eerste_getal):]}')
som += int(eerste_getal[:len(eerste_getal)-1] + eerste_getal[len(eerste_getal):])
print(""=""*(len(eerste_getal)+1))
print(f' {som}')


",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( subscript_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Nathan Tops/mathemagisch.py"",""fullName"":""Nathan Tops"",""id"":""11803"",""status"":""correct"",""submissionID"":""6016019"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T21:28:36.000Z"",""labels"":""bcbt""}"
541,/home/maxiem/Downloads/files/Marie Schoenmakers/mathemagisch.py,"getal = input()
lengte = len(getal)
som = 0
for i in range(lengte):
    nieuw = getal[:i] + getal[i + 1:]
    nieuw = nieuw.lstrip('0')
    if i == lengte -1:
        print(f'+ {nieuw}')
    else:
        if nieuw == '':
            nieuw = 0
        print(f'{nieuw:>{lengte + 1}}')
    som += int(nieuw)
aantal_gelijkheidstekens = '='* (lengte+1)
print(aantal_gelijkheidstekens)
print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Marie Schoenmakers/mathemagisch.py"",""fullName"":""Marie Schoenmakers"",""id"":""11832"",""status"":""correct"",""submissionID"":""5990949"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T07:37:37.000Z"",""labels"":""chem""}"
542,/home/maxiem/Downloads/files/Cedric Thierens/mathemagisch.py,"getal =  str(input())
uitkomst = 0

# steeds weglaten van 1 cijfer in het getal
for i in range(len(getal)-1):
    getal1 = getal[:i]+getal[i+1:]
    uitkomst += int(getal1)
    j = 0
    # extra loop voor als begincijfer een 0 is
    # and voor als alle cijfers 0 zijn
    while getal1[j] == ""0"" and j != len(getal1)-1:
        getal1 = "" ""*(j+1) + getal1[j+1:]
        j += 1
    print(""  "" + getal1)
print(f'+ {(getal[:len(getal)-1]+getal[len(getal):])}')
uitkomst += int(getal[:len(getal)-1]+getal[len(getal):])
print(""=""*(len(getal)+1))
print(f' {str(uitkomst)}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( number ) ( identifier ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( subscript_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Cedric Thierens/mathemagisch.py"",""fullName"":""Cedric Thierens"",""id"":""11833"",""status"":""correct"",""submissionID"":""6015618"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:38:01.000Z"",""labels"":""bcbt""}"
543,/home/maxiem/Downloads/files/Jens Cousin/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# invoer getal
m = str(input('Getal?: '))

v = 0
L = len(m)
som = 0
for cijf in range(L):
    m1 = m[:cijf]
    m2 = m[cijf+1:]
    get = m1 + m2
    getint = int(get)
    if cijf == L-1:
        print('+'f'{str(getint).rjust(L)}')
    else:
        print(f'{str(getint).rjust(L+1)}')
    som += getint

print(''.rjust(L + 1, '='))
print('', som)
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Jens Cousin/mathemagisch.py"",""fullName"":""Jens Cousin"",""id"":""11838"",""status"":""correct"",""submissionID"":""6018991"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:06:35.000Z"",""labels"":""fyss""}"
544,/home/maxiem/Downloads/files/Isaline Rubens/mathemagisch.py,"import string
# input van het getal
m = input()
n = len(m)

som = 0
for i in range(n):
    # we willen enkel het i-de getal weg laten vallen, de rest moet blijven staan
    getal = m[0:i] + m[i+1:]
    getal_int = int(getal)
    som += getal_int

    # het laatste getal moet geprint worden met een + voor
    if i == n-1:
        print(f'+{str(getal_int):>{str(n)}s}')
    else:
        print(f'{str(getal_int):>{str(n+1)}s}')

print((n+1)*'=')
print(f'{str(som):>{str(n+1)}s}')",( program ( expression_statement ( import ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Isaline Rubens/mathemagisch.py"",""fullName"":""Isaline Rubens"",""id"":""11843"",""status"":""correct"",""submissionID"":""5999885"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T22:03:08.000Z"",""labels"":""bcbt""}"
545,/home/maxiem/Downloads/files/Taebin Han/mathemagisch.py,"n = input()
i=0
sum= 0
N = int(len(n)+1)

for index, character in enumerate(n):
    m = n[:i]+n[i+1:]
    m = m.lstrip(""0"")
    if m == '':
        m = str(0)
    elif index == len(n) - 1:
        print('+ ' + m)
        sum += int(m)
        break
    sum+= int(m)
    print(m.rjust(N))
    i+=1


repetitions = len(n)+1
print(repetitions *'=')

print('',sum)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( break_statement ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Taebin Han/mathemagisch.py"",""fullName"":""Taebin Han"",""id"":""11845"",""status"":""correct"",""submissionID"":""5997745"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T16:30:45.000Z"",""labels"":""keuz""}"
546,/home/maxiem/Downloads/files/Elke Lycke/mathemagisch.py,"m = input(""What is the number? "")

n = len(m)
sum = 0
for i in range(n):
    number = int(m[:i] + m[i + 1:])
    sum += number
    if i == (n - 1):
        number = ""+ "" + str(number)
    else:
        if len(str(number)) != len(m):
            number = "" "" * (len(m) - len(str(number)) + 1) + str(number)
    print(number)
print(""="" * (len(m) + 1))
print("" "" + str(sum))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Elke Lycke/mathemagisch.py"",""fullName"":""Elke Lycke"",""id"":""707"",""status"":""correct"",""submissionID"":""5809870"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-05T10:20:45.000Z"",""labels"":""biol""}"
547,/home/maxiem/Downloads/files/Matthijs Van Hooste/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal_m = input('getal van n cijfers:')
plaats = 0
som = 0

for plaats in range(len(getal_m)):

    if plaats == len(getal_m) - 1:
        getal_m_nieuw = getal_m[0:plaats] + getal_m[plaats + 1: len(getal_m)]
        som += int(getal_m_nieuw)
        print(f'+ {getal_m_nieuw}')

    else:
        getal_m_nieuw = getal_m[0:plaats]+ getal_m[plaats+1: len(getal_m)]
        som += int(getal_m_nieuw)
        cijfer_in_nieuw_getal = getal_m_nieuw[0]
        aantal_nullen = 0
        while cijfer_in_nieuw_getal == '0' and aantal_nullen < len(getal_m_nieuw) - 1:
            # Aantal nullen is zowel het aantal nullen als de index voor de while loop
            aantal_nullen += 1
            # Volgend getal dat gecontroleerd moet worden nemen
            cijfer_in_nieuw_getal = getal_m_nieuw[aantal_nullen]
        # Het aantal gevonden nullen vervangen door spaties
        getal_m_nieuw = (' ' * aantal_nullen) + getal_m_nieuw[aantal_nullen:]
        print(f'  {getal_m_nieuw}')

print('=' * (len(getal_m)+1))
print(f' {som}')



",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( string ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Matthijs Van Hooste/mathemagisch.py"",""fullName"":""Matthijs Van Hooste"",""id"":""11854"",""status"":""correct"",""submissionID"":""5994599"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T12:52:09.000Z"",""labels"":""bcbt""}"
548,/home/maxiem/Downloads/files/Wout Kerkaert/mathemagisch.py,"getal = input()
n = 0
som = 0
q = 1
p = ' '
while n < len(getal):
    a = getal[:n]
    b = getal[n]
    c = getal[n+1:]
    nieuwgetal = a+c
    nieuwgetal = int(nieuwgetal)
    if len(str(nieuwgetal)) < len(a+c):
        b = int(nieuwgetal)
        b = str(b)
        while q + len(b) < len(getal):
            q=q+1
        som = som+int(nieuwgetal)
        print(q*p, nieuwgetal)
    elif n+1 == len(getal):
        print('+', str(nieuwgetal))
        som = som + int(nieuwgetal)
    else:
        print(' ', nieuwgetal)
        som = som+int(nieuwgetal)
    n = n+1
for i in range(0, n+1):
    print('=', end='')
print('\n' , som)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ( escape_sequence ) ) ( identifier ) ) ) ) ),"{""filename"":""Wout Kerkaert/mathemagisch.py"",""fullName"":""Wout Kerkaert"",""id"":""11861"",""status"":""correct"",""submissionID"":""5995064"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T13:20:46.000Z"",""labels"":""keuz""}"
549,/home/maxiem/Downloads/files/Gilles Devloo/mathemagisch.py,"nummer = str(input('geef nummer: '))

v = len(str(nummer))

for i in range (v):
    nummer = nummer[i:]
    print (nummer)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Gilles Devloo/mathemagisch.py"",""fullName"":""Gilles Devloo"",""id"":""11871"",""status"":""wrong"",""submissionID"":""6020754"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T10:11:50.000Z"",""labels"":""bcbt""}"
550,/home/maxiem/Downloads/files/Hanne De Lathauwer/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
#invoeren getal bestaande uit n (>4) cijfers
getal=(input('Getal?'))

lengte=len(getal)
uitlijn_posities=int(lengte+1)
#som initialiseren
som=0
opvulling=''
for i in range(len(getal)-1):
    #getal steeds strippen door 1 cijfer vooraan weg te halen
    getal_stripped=getal[i+1:]
    #nieuw getal uitschrijven
    nieuw_getal=opvulling+getal_stripped
    # bij gestript cijfer steeds de vorige cijfers bijplakken
    opvulling += getal[i]
    #Wat met voorloopnullen??? Overloop het nieuw getal en verwijder alle, behalve de laatste nullen voraan het getal
    for j in range(len(nieuw_getal)-1):
       if nieuw_getal.startswith('0'):
        nieuw_getal=nieuw_getal[1:]
    #nieuw getal uitprinten
    print(f'{nieuw_getal:>{uitlijn_posities}s}')

    #bijtellen nieuw getal bij de som
    som+=int(nieuw_getal)

laatste_getal=getal[:-1]
som+=int(laatste_getal)
print(f'+{laatste_getal:>{uitlijn_posities-1}s}')
#voorlaatste regel met = tekens typen
herhalingen=len(getal)+1
print(herhalingen*'=')
#som printen
print(f'{som:>{uitlijn_posities}d}')

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( ERROR ) ( number ) ) ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Hanne De Lathauwer/mathemagisch.py"",""fullName"":""Hanne De Lathauwer"",""id"":""11876"",""status"":""correct"",""submissionID"":""5974555"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T08:34:17.000Z"",""labels"":""geol""}"
551,/home/maxiem/Downloads/files/Lola Claeys/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = (input('geef een getal '))
aantal_tekens = ''
som = 0

for i in range(len(getal)):
    gereduceerdgetal = int(getal[0: i] + getal[i + 1:])
    if i == len(getal) - 1:
        print(f'+ {gereduceerdgetal}')
        som += int(gereduceerdgetal)
    else:
        print(f'{str(gereduceerdgetal): >{len(getal) + 1}s}')
        som += int(gereduceerdgetal)

while len(aantal_tekens) < (len(getal) + 1):
    aantal_tekens += '='

print(aantal_tekens)
print(f' {som}')


",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lola Claeys/mathemagisch.py"",""fullName"":""Lola Claeys"",""id"":""11881"",""status"":""correct"",""submissionID"":""6015642"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:39:52.000Z"",""labels"":""geol""}"
552,/home/maxiem/Downloads/files/Hannah Broeckx/mathemagisch.py,"number = input(""number"")
sum_number = 0

w = len(number)+1

for i in range(len(number)):
    new_number = number[:i] + number[i+1:]
    if i == len(number) -1:
        print(""+ ""+new_number.lstrip('0'))
    else:
        new_number = int(new_number)
        if new_number == 0:
            print('%*s' % (w, '0'))
        else:
            new_number = str(new_number)
            print('%*s' % (w, new_number.lstrip('0')))

    sum_number += int(new_number)

print(""="" * (i+2))
print('%*s' % (w, sum_number))






",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( sequence_expression ( identifier ) ( string ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( sequence_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( sequence_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Hannah Broeckx/mathemagisch.py"",""fullName"":""Hannah Broeckx"",""id"":""11884"",""status"":""correct"",""submissionID"":""5997145"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T15:42:42.000Z"",""labels"":""biol""}"
553,/home/maxiem/Downloads/files/Phaedra Hulstaert/mathemagisch.py,"number = str(input(""Give a number: ""))
length = len(number)
position = 0
summation = 0
replacement = """"
amount_of_spaces = length + 1
for character in number:
    new_number = number[0:position] + replacement + number[position + 1:]
    summation += int(new_number)
    if position != length - 1:
        print(f""{str(int(new_number)): >{length + 1}s}"")
    else:
        print(f""+ {str(int(new_number)): >{length - 1}s}"")
    position += 1
print(""="" * amount_of_spaces)
print("" "" + str(summation))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Phaedra Hulstaert/mathemagisch.py"",""fullName"":""Phaedra Hulstaert"",""id"":""11886"",""status"":""correct"",""submissionID"":""6015639"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:39:46.000Z"",""labels"":""biol""}"
554,/home/maxiem/Downloads/files/Yana Titeca/mathemagisch.py,"#getal invoeren
getal = input()
lengte = len(getal)
lang = len(getal) + 1
#berekenen
som = 0
for i in range(lengte-1):
    getal2 = getal[:i]+getal[i+1:]
    print(f'{str(int(getal2)):>{lang}s}')
    som+= int(getal2)
laatste = getal[:-1]
print(f'+ {str(int(laatste)):>{lang-2}s}')
som +=int(laatste)
print('='*lang)
print(f'{str(som):>{lang}s}')
",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Yana Titeca/mathemagisch.py"",""fullName"":""Yana Titeca"",""id"":""11882"",""status"":""correct"",""submissionID"":""6021624"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T11:04:02.000Z"",""labels"":""bcbt""}"
555,/home/maxiem/Downloads/files/Jana De Coster/mathemagisch.py,"x = input()

y = 0

for i in range(len(x)-1):
    z = x[:i] + x[i + 1:]
    y += int(z)
    for r in range(len(z)-1):
        if z[r]=='0':
            z = z.replace('0', ' ', 1)
        else:
            break
    s = '  ' + z
    print(s)

z = x[:len(x)-1]
y += int(z)
s = '+ ' + z
print(s)

print('=' * len(s))
print(' ' + str(y))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ( number ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( break_statement ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Jana De Coster/mathemagisch.py"",""fullName"":""Jana De Coster"",""id"":""9300"",""status"":""correct"",""submissionID"":""5852439"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-08T10:48:21.000Z"",""labels"":""keuz""}"
556,/home/maxiem/Downloads/files/Viktor Moortgat/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
magic_number = input()
total_sum = 0
length_output = len(magic_number) + 1

for index in range(len(magic_number)):
    temp_output = int(magic_number[:index] + magic_number[index+1:])
    total_sum += temp_output
    if index != len(magic_number)-1:
        print((""{:"" + str(length_output) + ""d}"").format(temp_output))
    else:
        print(""+ {}"".format(temp_output))

print('=' * length_output)
print((""{:"" + str(length_output) + ""d}"").format(total_sum))
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Viktor Moortgat/mathemagisch.py"",""fullName"":""Viktor Moortgat"",""id"":""11895"",""status"":""correct"",""submissionID"":""5924493"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-12T19:29:46.000Z"",""labels"":""stat""}"
557,/home/maxiem/Downloads/files/Charlotte Taelman/mathemagisch.py,"number = input('give number') #string ingeven (getal)
n = len(number) #aantal tekens voor getal, belangrijk voor loop
m = n + 1
sum = 0 #starten met 0, in loop invullen

# bij laatste getal moet een plusje staan!
for i in range(n):
    if i == n - 1: #tot wanneer je aan de laatste i komt (eentje minder dan n dus)
        number_less = int(number[:i])
        print(f""+{number_less:>{n}d}"")
    else:
        number_less = int(number[:i] + number[i+1:]) #alles ervoor plus alles erachter
        print(f""{number_less:>{m}d}"") #s voor strings
    sum += int(number_less)

print(m*'=')
print(f'{sum:>{m}d}') #d for integers",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ) ( number ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( binary_expression ( unary_expression ( identifier ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ),"{""filename"":""Charlotte Taelman/mathemagisch.py"",""fullName"":""Charlotte Taelman"",""id"":""11897"",""status"":""correct"",""submissionID"":""5969363"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T16:15:56.000Z"",""labels"":""biol""}"
558,/home/maxiem/Downloads/files/Roy Rijk/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
#getal inlezen
getal = input()
n = int(len(getal))
som = 0
x = 0
#beurtelings schrappen
for index, cijfer in enumerate(getal):
    nieuwgetal = getal[:x] + getal[x+1:]
    x += 1
    nieuwgetal = int(nieuwgetal)
    nieuwgetal = str(nieuwgetal)
    som += int(nieuwgetal)
    if index + 1 == n:
        print(f'+ {nieuwgetal}')
    else:
        print(f'{nieuwgetal :>{n + 1}s}')


gelijk = '='
gelijkaan = gelijk *(n + 1)
print(gelijkaan)
print(f' {som}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Roy Rijk/mathemagisch.py"",""fullName"":""Roy Rijk"",""id"":""11908"",""status"":""correct"",""submissionID"":""5977078"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T12:13:29.000Z"",""labels"":""geol""}"
559,/home/maxiem/Downloads/files/Wouter Depaepe/mathemagisch.py,"# input
number = input(""please give a number: "")

# computation
sum_all = 0  # define sum
for i in range(len(number) - 1):  # for each digit except the last one
    new = int(number[:i] + number[i+1:])  # leaving one digit out
    space = len(str(number)) - len(str(new)) + 1
    print(("" "" * space) + str(new))  # print the new number
    sum_all += new  # add the number to the sum

# The last digit (this is for adding the +)
new = int(number[:-1])
print(""+ "" + str(new))
sum_all += new

# printing the ""====="" thingy
print((""="" * len(number) + ""=""))

# printing the sum of everything
print("" "" + str(sum_all))
",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( new_expression ( ERROR ) ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( ERROR ) ) ) ) ) ) ( number ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( string ) ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ) ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( new_expression ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( new_expression ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( this ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ) ( new_expression ( ERROR ) ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( new_expression ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( string ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Wouter Depaepe/mathemagisch.py"",""fullName"":""Wouter Depaepe"",""id"":""11910"",""status"":""correct"",""submissionID"":""5905224"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-11T14:58:02.000Z"",""labels"":""biol""}"
560,/home/maxiem/Downloads/files/Jan De Mey/mathemagisch.py,"number = str(input())
total_number = 0

for i in range(len(number) - 1):
    a = number[:i]
    b = number[i+1:]
    suppressed_number = int(f'{a}{b}')
    print(f'{suppressed_number:>{len(number)+1}}')
    total_number += suppressed_number

a = number[:-1]
print(f'+ {a:>{len(number) - 1}}')
total_number += int(a)

for i in range(len(number) + 1):
    print('=', end='')

print('\n',total_number)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ( escape_sequence ) ) ( identifier ) ) ) ) ),"{""filename"":""Jan De Mey/mathemagisch.py"",""fullName"":""Jan De Mey"",""id"":""11020"",""status"":""correct"",""submissionID"":""5993851"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T12:03:30.000Z"",""labels"":""keuz""}"
561,/home/maxiem/Downloads/files/Michiel Desticker/mathemagisch.py,"startnummer = input()
nr_length = len(startnummer)
som = 0
for i in range(nr_length):
    new_number = startnummer[:i] + startnummer[i+1:]
    j = 0
    while new_number[j] == ""0"" and j < nr_length-2:
        new_number = ' ' + new_number[:j] + new_number[j+1:]
        j +=1
    som += int(new_number)
    if i == nr_length -1:
        print('+ ' +new_number)
    else: print('  ' + new_number)
print('='*(nr_length+1))
print(' ' + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Michiel Desticker/mathemagisch.py"",""fullName"":""Michiel Desticker"",""id"":""11912"",""status"":""correct"",""submissionID"":""6030522"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:39:48.000Z"",""labels"":""keuz""}"
562,/home/maxiem/Downloads/files/Tim Laebens/mathemagisch.py,"number = str(input(""number: ""))

sum = 0
for xyz in range(0, len(number)-1):
    sliced_number = int(number[0:xyz] + number[xyz + 1:])
    sum += sliced_number
    wid = len(number)+1
    print(str(sliced_number).rjust(wid))

last_sliced_number = int(number[0:-1])
sum += last_sliced_number
print(f""+ {last_sliced_number}"")
print(""=""*len(number)+""="")
print(f"" {sum}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Tim Laebens/mathemagisch.py"",""fullName"":""Tim Laebens"",""id"":""11914"",""status"":""correct"",""submissionID"":""5954437"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-14T18:34:51.000Z"",""labels"":""biol""}"
563,/home/maxiem/Downloads/files/Sarah De Laet/mathemagisch.py,"# invoer: getal

getal = input('Geef een getal van minstens 4 cijfers: ')

# bereken de lengte van dit getal als string

lengte = len(getal)
posities = lengte + 1

nieuw = getal[1:]
print(f'{int(nieuw):>{posities}}')

som_getal = int(nieuw)

for i in range(1, lengte):
    # berekening: schrap beurtelings elk cijfer van het getal
    nieuw = getal[:i] + getal[i + 1:]
    som_getal += int(nieuw)
    if lengte - i != 1:
        # print elk nieuw getal rechts uitgelijnd over lengte+1 posities
        print(f'{int(nieuw):>{posities}}')
    # print het laatste getal met + vooraan
    else:
        print(f'+{int(nieuw):>{lengte}}')

# print een lijn met n+1 gelijkheidstekens

print(posities * '=')

# print de som van deze nieuwe getallen

som_getal = str(som_getal)
print(f'{som_getal:>{posities}}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Sarah De Laet/mathemagisch.py"",""fullName"":""Sarah De Laet"",""id"":""11915"",""status"":""correct"",""submissionID"":""5980608"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T16:33:53.000Z"",""labels"":""stat""}"
564,/home/maxiem/Downloads/files/Aag Bogaert/mathemagisch.py,"begingetal = input('getal: ')

som1 = 0
n = 3
geschrapt1 = begingetal[0:]
if '0' == begingetal[1] and '0' == begingetal[2]:
    print(' ' * len(begingetal) + '0')
elif '0' == begingetal[1]:
    geschrapt = begingetal[2:]
    print('   ' + geschrapt)
else:
    geschrapt = begingetal[1:]
    print('  ' + geschrapt)
geschrapt2 = begingetal[0] + begingetal[2:]

print('  ' + geschrapt2)

for getal in range(len(begingetal) - 2):
    geschrap = begingetal[:n - 1] + begingetal[n:]
    integ_getal = int(geschrap)
    som1 += integ_getal
    n += 1
    if n >= len(begingetal) + 1:
        print('+ ' + geschrap)
    else:
        print('  ' + geschrap)

if '0' == begingetal[1] and '0' == begingetal[2]:
    som = som1 + int(geschrapt2)
else:
    geschrapt = begingetal[1:]
    som = som1 + int(geschrapt) + int(geschrapt2)
print((1 + len(begingetal)) * '=')
print(' ' + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( string ) ( ERROR ( subscript_expression ( identifier ) ( number ) ) ( identifier ) ) ( string ) ) ( ERROR ( subscript_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ( subscript_expression ( identifier ) ( number ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( string ) ( ERROR ( subscript_expression ( identifier ) ( number ) ) ( identifier ) ) ( string ) ) ( ERROR ( subscript_expression ( identifier ) ( number ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Aag Bogaert/mathemagisch.py"",""fullName"":""Aag Bogaert"",""id"":""11922"",""status"":""correct"",""submissionID"":""6023110"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T12:26:07.000Z"",""labels"":""geog""}"
565,/home/maxiem/Downloads/files/Antoine Anneessens/mathemagisch.py,"x = input('een getal')
lengte = len(x) + 1
c = 0
som = 0
for char in x:
    y = x[:c]+x[c+1:]
    # iet voor die 0 vooraan weg te werken
    nullenweg = int(y)
    if c == len(x) - 1:
        print(f'+ {nullenweg}')
    else:
        print(f'{nullenweg:>{lengte}d}')
    c += 1
    getallen = int(y)
    som += getallen

gelijkheidstekens = '='*lengte
print(gelijkheidstekens)
som = str(som)
lengtesom = (len(som) + 1)
print(f""{som:>{lengtesom}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Antoine Anneessens/mathemagisch.py"",""fullName"":""Antoine Anneessens"",""id"":""11934"",""status"":""correct"",""submissionID"":""6012286"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T16:31:22.000Z"",""labels"":""geog""}"
566,/home/maxiem/Downloads/files/Wannes De Beer/mathemagisch.py,"#voer getal in
getal = input(""geef een getal:"")
plaats = 0
som = 0

#schrap telkens 1 term
for plaats in range(len(getal)):

    if plaats == len(getal) - 1:
        getal_nieuw = getal[0:plaats]  + getal[plaats + 1: len(getal)]
        som += int(getal_nieuw)
        print(f'+ {getal_nieuw}')
    else:
        getal_nieuw = getal[0:plaats] + getal[plaats + 1: len(getal)]
        som += int(getal_nieuw)
        cijfer_in_nieuw_getal = getal_nieuw[0]
        aantal_nullen = 0

        while cijfer_in_nieuw_getal == '0' and aantal_nullen < len(getal_nieuw) - 1:
            aantal_nullen += 1
            cijfer_in_nieuw_getal = getal_nieuw[aantal_nullen]
        getal_nieuw = (' ' * aantal_nullen) + getal_nieuw[aantal_nullen:]
        print(f'  {getal_nieuw}')
print('=' * (len(getal) + 1))
print(f' {som}')
",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( string ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Wannes De Beer/mathemagisch.py"",""fullName"":""Wannes De Beer"",""id"":""11940"",""status"":""correct"",""submissionID"":""5996201"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T14:36:09.000Z"",""labels"":""bcbt""}"
567,/home/maxiem/Downloads/files/Roxanne Nouille/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

m = str(input())
n = len(m)
som = 0

# de laatste in de range wordt niet afgedrukt
for i in range(n - 1):
    niet_schrappen_1 = m[0:i]
    niet_schrappen_2 = m[i+1::]
    niet_schrappen = niet_schrappen_1 + niet_schrappen_2
    geen_nullen = niet_schrappen.lstrip('0')
    uitlijnen = geen_nullen.rjust(n+1,"" "")
    if abs(int(niet_schrappen)) == 0:
        uitlijnen = '0'.rjust(n+1,"" "")
    som += int(niet_schrappen)
    print(uitlijnen)


laatste = m[0:n-1]
laatste_geen_nullen = laatste.lstrip('0')
laatste_uitgelijnd = laatste_geen_nullen.rjust(n+1, "" "")
som += int(laatste)
print(f'+ {laatste}')
print('=' * (n+1))
som_uitgelijnd = str(som).rjust(n+1, "" "")
print(som_uitgelijnd)

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Roxanne Nouille/mathemagisch.py"",""fullName"":""Roxanne Nouille"",""id"":""11933"",""status"":""correct"",""submissionID"":""5954288"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-14T18:20:36.000Z"",""labels"":""bcbt""}"
568,/home/maxiem/Downloads/files/Gil Glorieus/mathemagisch.py,"getal = input(""Getal? "")
lengte = len(getal)
som = 0
a = lengte + 2
b = lengte + 1

for index in range(lengte):
    schrap = int(getal[0:index] + getal[index + 1:lengte])
    som += schrap
    spaties = ' ' * (lengte - len(str(schrap)) - 1)
    if index == lengte - 1:
        print(f""+ {spaties}{schrap}"")
    else:
        print(f""  {spaties}{schrap}"")

print('=' * (lengte + 1))
print(f"" {som}"")
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Gil Glorieus/mathemagisch.py"",""fullName"":""Gil Glorieus"",""id"":""11948"",""status"":""correct"",""submissionID"":""5933449"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T12:41:21.000Z"",""labels"":""geog""}"
569,/home/maxiem/Downloads/files/Cédric De Smet/mathemagisch.py,"#Invoer getallen als zijnde strings (m), met diens range (n)
m = str(input())
n = len(m)
som = 0
#Beurtelings schrappen van characters (cijfers)
for i in range(n):
    nieuw = m[	:i] + m[i + 1: ]
    nieuw_int = int(nieuw)
    som += (nieuw_int)
    if i == (n-1):
        print(f'+ {nieuw_int}')
    else:
        print(f'{nieuw_int:>{n+1}}')
#Print de uitkomst
gelijk = '='*(n+1)
print(gelijk)
print(f' {som}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( parenthesized_expression ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Cédric De Smet/mathemagisch.py"",""fullName"":""Cédric De Smet"",""id"":""11928"",""status"":""correct"",""submissionID"":""5987478"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T15:47:21.000Z"",""labels"":""bcbt""}"
570,/home/maxiem/Downloads/files/Juliet Steffen/mathemagisch.py,"m = str(input('Getal: '))
som = 0
b = 0
a2 = 0
spatie = ' '
for i in range(len(m)):
    if i != len(m) - 1:
        a = str(m[0:i] + m[1 + i:len(m)])
        if a == '0' * (len(m) - 1):
            print(f'{spatie * (len(m))}0')
        elif a[0] == '0':
            a2 = int(m[2 + i:len(m)])
            print(f'   {a2}')
        else:
            print(f'  {a}')
            som += int(a)
    else:
        b = m[0:i] + m[1 + i:len(m)]
        print(f'+ {b}')
        b = int(b)
print('=' * (len(m) + 1))
print(f' {som + b + a2}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( number ) ( identifier ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( string ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( number ) ( identifier ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( number ) ( identifier ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Juliet Steffen/mathemagisch.py"",""fullName"":""Juliet Steffen"",""id"":""7928"",""status"":""correct"",""submissionID"":""5769219"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-01T13:03:30.000Z"",""labels"":""geog""}"
571,/home/maxiem/Downloads/files/Robbe Bohy/mathemagisch.py,"# een willekeurig getal invoeren van 4 of meer cijfers
getal_str = input()
lengte_getal_int = len(getal_str)

som = 0
# bij het getal telkens een cijfer wegschrappen
for index, getal in enumerate(getal_str):
    nieuw_getal = getal_str[:index] + getal_str[index + 1:]
    if index == lengte_getal_int - 1:
        print('{:>{}}'.format('+' + ' ' + nieuw_getal, (lengte_getal_int + 1)))
    else:
        if nieuw_getal.lstrip('0') == '':
            print('{:>{}}'.format('0', (lengte_getal_int + 1)))
        else:
            print('{:>{}}'.format(nieuw_getal.lstrip('0'), (lengte_getal_int + 1)))
    som += int(nieuw_getal)

output_str = '=' * (lengte_getal_int + 1)
print(output_str)
print('{:>{}}'.format(som, (lengte_getal_int + 1)))
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ),"{""filename"":""Robbe Bohy/mathemagisch.py"",""fullName"":""Robbe Bohy"",""id"":""11953"",""status"":""correct"",""submissionID"":""5981873"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T21:25:52.000Z"",""labels"":""chem""}"
572,/home/maxiem/Downloads/files/Ellen Blomme/mathemagisch.py,"digit = input('n-digit number without leading zero (n>=4): ')
length = len(digit)
MyList = []
position = 0
som = 0

for n in digit:
    number = digit[0:position] + digit[position+1:length]
    MyList.append(number)
    if (position + 1) == len(digit):
        print(f""+ {number}"")
    else:
        while number[0] == '0' and len(number) != 1:
            number = number[1:len(number)]
        print(f""{f'{number}':>{length + 1}s}"")
    position += 1

for x in MyList:
    som += int(x)

print('=' * (length + 1))
print(f""{f'{som}':>{length + 1}s}"")
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( else_clause ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ellen Blomme/mathemagisch.py"",""fullName"":""Ellen Blomme"",""id"":""11961"",""status"":""correct"",""submissionID"":""5903889"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-11T13:50:12.000Z"",""labels"":""biol""}"
573,/home/maxiem/Downloads/files/Justine Lemaître/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input()
som = 0
for index, cijfer in enumerate(getal):
    getal_na_schrappen = int(getal[:index] + getal[index+1:])
    som += getal_na_schrappen
    if index == len(getal) - 1:
        print(f'+{str(getal_na_schrappen):>{len(getal)}s}')
    else:
        print(f'{str(getal_na_schrappen):>{len(getal) + 1}s}')
print('='*(len(getal)+1), f'{som:>{len(getal) + 1}}', sep='\n')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( string ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Justine Lemaître/mathemagisch.py"",""fullName"":""Justine Lemaître"",""id"":""9236"",""status"":""correct"",""submissionID"":""5899609"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-11T10:30:46.000Z"",""labels"":""keuz""}"
574,/home/maxiem/Downloads/files/Paulien D'Hondt/mathemagisch.py,"m = str(input())
lengte = len(m)
som = 0
positie = 0
exit = 1
#telkens het (x+1)de element strippen uit het getal

for positie, karakter in enumerate(m):
    if positie != lengte-1:
        string = '  '
    else:
        string = '+ '
    for index in range(lengte):
        if index != positie:
            string += m[index]
    if string[2] == '0':
        exit = 0
        counter = 0
    while exit == 0:
        string = string[0:2] + string[3:]
        counter += 1
        if string[2] != '0' or len(string) == 3:
            exit = 1
            string2 = counter*' '
            string = string2 + string
    print(string)
    som += int(string[1:])
print('='*(lengte+1))
som2 = ' '
som2 += str(som)
print(som2)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( number ) ) ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Paulien D'Hondt/mathemagisch.py"",""fullName"":""Paulien D'Hondt"",""id"":""11974"",""status"":""correct"",""submissionID"":""6021686"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T11:08:16.000Z"",""labels"":""geog""}"
575,/home/maxiem/Downloads/files/Dingrongruo Yu/mathemagisch.py,"digit = input()
total = 0
position = len(digit) + 1
equal = '=' * position
# here is the loop
for index, i in enumerate(digit):
    new_line = digit[:index]+digit[index+1:]
    total += int(new_line)
    if new_line.startswith('0'):
        new_line = str(int(new_line))
    # do some edition on the last line 
    if index == len(digit) - 1:
        print('+'+f'{new_line:>{position-1}s}')
    else:
        print(f'{new_line:>{position}s}')
# output
print(equal)
print(f'{str(total):>{position}s}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Dingrongruo Yu/mathemagisch.py"",""fullName"":""Dingrongruo Yu"",""id"":""11978"",""status"":""correct"",""submissionID"":""6029970"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:16:01.000Z"",""labels"":""keuz""}"
576,/home/maxiem/Downloads/files/Jasper Verdonck/mathemagisch.py,"number = input()
equals = str()
total = int()
spaces = str()
for i in range(len(number)):
    equals += '='
    total += int(number[0:i]+number[i+1:len(number)])
    output = (number[0:i] + number[i + 1:len(number)])
    spaces = ' ' * (len(output) - len(str(int(output))))
    if i < len(number) - 1:
        print('  '+spaces+str(int(output)))
    else:
        print('+ '+spaces+str(int(output)))
equals += '='
print(equals)
print(' ' + str(total))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Jasper Verdonck/mathemagisch.py"",""fullName"":""Jasper Verdonck"",""id"":""1487"",""status"":""correct"",""submissionID"":""5999769"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T21:23:06.000Z"",""labels"":""stat""}"
577,/home/maxiem/Downloads/files/Evi Scheirlinckx/mathemagisch.py,"#getal als string en geent int
getal = str(input(""Geef een getal ""))
#index van nummer
n = 0
#som van getallen
s = 0
#lengte van het getal
l = len(getal)

#de berekening
while n != (len(getal)):
    Het_getal_n_weglaten = getal[ :n] + getal[n+1: ]
    int_Het_getal = int(Het_getal_n_weglaten)

    Getal_terug_naar_string = str(int_Het_getal)
    if n < (l - 1):
        print(f'{Getal_terug_naar_string:>{l+1}s}')
    else:
        print(f'+{Getal_terug_naar_string:>{l}s}')
    n += 1
    s += int_Het_getal
s = str(s)
u = (n+1)*""=""
print(f""{u}"")
print(f""{s:>{l+1}s}"")

",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Evi Scheirlinckx/mathemagisch.py"",""fullName"":""Evi Scheirlinckx"",""id"":""11988"",""status"":""correct"",""submissionID"":""6021938"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T11:27:58.000Z"",""labels"":""bcbt""}"
578,/home/maxiem/Downloads/files/Simon Knockaert/mathemagisch.py,"getal = str(input())
lengte_getal = len(getal)
n=0
som = 0

for i in range(lengte_getal):


    getal1 = getal[:n] + getal[n+1:]

    som = som + int(getal1)

    n+=1

    getal1 = int(getal1)

    if n==lengte_getal:
        print(f""+{str(getal1) : >{(lengte_getal)}s}"")
    else:
        print(f""{str(getal1) : >{(lengte_getal + 1)}s}"")


print((n+1)*'=')

print(f""{str(som) : >{lengte_getal+1}s}"")




",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Simon Knockaert/mathemagisch.py"",""fullName"":""Simon Knockaert"",""id"":""11917"",""status"":""correct"",""submissionID"":""6016384"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T23:58:36.000Z"",""labels"":""bcbt""}"
579,/home/maxiem/Downloads/files/Karlien Coppens/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# input the digit, written without leading zeros
digit = input()
total = 0
position = len(digit) + 1
equal = '=' * position
# here is the loop
for index, i in enumerate(digit):
    new_line = digit[:index]+digit[index+1:]
    total += int(new_line)
    if new_line.startswith('0'):
        new_line = str(int(new_line))
    # do some edition on the last line
    if index == len(digit) - 1:
        print('+'+f'{new_line:>{position-1}s}')
    else:
        print(f'{new_line:>{position}s}')
# output
print(equal)
print(f'{str(total):>{position}s}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Karlien Coppens/mathemagisch.py"",""fullName"":""Karlien Coppens"",""id"":""11989"",""status"":""correct"",""submissionID"":""6034121"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:54:36.000Z"",""labels"":""bcbt""}"
580,/home/maxiem/Downloads/files/Rohan Kluskens/mathemagisch.py,"# het getal m met n aantal cijfers invoeren (n >=4)
m = input()
n = len(m)
som = 0 #som bijhouden
# geschrapte getallen uitschrijven
for i in range (n -1):
    getal = m[:i] + m[i + 1:]
    som += int(getal)
    if getal[0] == '0':
        getal = getal.replace('0' ,' ', n -2)
    print(f'  {getal}')
getal = m[:(n -1)]
som += int(getal)
print (f'+ {getal}')
print('='*(n+1))
print(f' {som}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Rohan Kluskens/mathemagisch.py"",""fullName"":""Rohan Kluskens"",""id"":""11993"",""status"":""correct"",""submissionID"":""5979927"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T15:28:12.000Z"",""labels"":""chem""}"
581,/home/maxiem/Downloads/files/Remi Laplasse/mathemagisch.py,"m = input()
som = 0
i = 0
lengte = len(m)

for i in range(lengte):
    n_cijfer = m[:i] + m[i+1:]
    if n_cijfer[0] == ""0"":
        int_cijfer = int(n_cijfer)
        string_ = str(int_cijfer)
        print(' ', string_.rjust(lengte -1))  #naar rechts uitlijnen

    elif i == lengte -1:
        print(f'+ {n_cijfer}')
    else:
        print(f'  {n_cijfer}')
    som += int(n_cijfer)
    i += 1
print((lengte+1) * ""="")
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Remi Laplasse/mathemagisch.py"",""fullName"":""Remi Laplasse"",""id"":""11984"",""status"":""correct"",""submissionID"":""6013695"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:06:52.000Z"",""labels"":""bcbt""}"
582,/home/maxiem/Downloads/files/Wouter Verstappe/mathemagisch.py,"getal = input('')
i = 0
volgende = ''
uitkomst = 0
laatste = getal[len(getal) - 1]
a = 0
uikomst = 0
for i in range(len(getal)):
    volgende = getal[0:a] + getal[a + 1:]
    a += 1
    uitkomst += int(volgende)
    k = int(volgende)
    if i == len(getal) - 1:
        print(f'+ {int(volgende)}')
    else:
        print(f'{str(int(volgende)):>{len(getal)+1}s}')

print('=' * (len(getal) + 1))
print(f' {uitkomst}')


",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Wouter Verstappe/mathemagisch.py"",""fullName"":""Wouter Verstappe"",""id"":""11840"",""status"":""correct"",""submissionID"":""6015665"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:42:25.000Z"",""labels"":""bcbt""}"
583,/home/maxiem/Downloads/files/Manon Montyne/mathemagisch.py,"nummer = input(""Nummer: "")
n = len(nummer)
som = 0

for i in range(n-1):
    slice = nummer[0:i] + nummer[i+1:]
    som += int(slice)
    if len(slice.lstrip(""0"")) == 0:
        print(""{:>{}s}"" .format(""0"",n+1))
    else:
        print(""{:>{}s}"".format(slice.lstrip(""0""), n+1))


print(""+{:>{}s}"".format(nummer[:-1:], n))
print(""=""*(n+1))
som += int(nummer[:-1:])
som_str = str(som)
print(""{:>{}s}"".format(som_str, n+1))

",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( string ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ( ERROR ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Manon Montyne/mathemagisch.py"",""fullName"":""Manon Montyne"",""id"":""5881"",""status"":""correct"",""submissionID"":""6026468"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:47:20.000Z"",""labels"":""keuz""}"
584,/home/maxiem/Downloads/files/Yves Vanden Broucke/mathemagisch.py,"getal = input()
LIJN = '='
Som = 0
i = 0
k = 0
getal2 = '         0'
for i in range(len(getal)):
    left = getal[:i]
    right = getal[i+1:]
    getal1 = left + right
    i += 1
    gevonden = False

    if getal1[0] == '0':

        while not gevonden:
            for m in range(len(getal1)):
                if getal[m] == '0':
                    a = getal[m]
                    b = ' '
                    getal1 = getal1.replace(a, b)
                else:
                    gevonden = True

    if getal1 == '          ':
        getal1 = getal2
    if i == len(getal):
        print(f'+ {getal1}')
    else:
        print(f'  {getal1}')


    LIJN += '='

    Som += int(getal1)

print(LIJN)
print(f' {Som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Yves Vanden Broucke/mathemagisch.py"",""fullName"":""Yves Vanden Broucke"",""id"":""12000"",""status"":""correct"",""submissionID"":""5988270"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T16:45:21.000Z"",""labels"":""fyss""}"
585,/home/maxiem/Downloads/files/Anton Leagre/mathemagisch.py,"line = input()
num_chars = len(line)
total = 0
for i in range(num_chars):
    if i == num_chars - 1: # we need to separately handle the last charachter for indexerrors
        scrap = line[:i]
        print(""+"" +str(int(scrap)).rjust(num_chars))
    else:
        scrap = line[:i] + line[i+1:]
        print(str(int(scrap)).rjust(num_chars + 1))
    total += int(scrap)
print("""".rjust(num_chars + 1, ""=""))
print(f'{total}'.rjust(num_chars + 1))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Anton Leagre/mathemagisch.py"",""fullName"":""Anton Leagre"",""id"":""12010"",""status"":""correct"",""submissionID"":""6011946"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T16:12:14.000Z"",""labels"":""fyss""}"
586,/home/maxiem/Downloads/files/Ilja Welvaert/mathemagisch.py,"number = input(""Enter a number: "")

sum = 0

#enumerate(): lets you get the index of an element while iterating over a list
for index, figure in enumerate(number):
    next = number[:index] + number[index+1:]

    sum += int(next)

    while next[0] == '0' and len(next) != 1: #alle nullen worden geschrapt
        next = next[1:]

    number_spaces = len(number) - len(next) #getallen moeten rechts uitgelijnd worden over n+1: extra spaties toevoegen aan linkerkant
    if index == len(number) - 1: #index start bij 0
        output = '+' + number_spaces * ' ' + next #de regel met de laatste term van de som moet beginnen met een plusteken
    else:
        output = (number_spaces + 1) * ' ' + next
    print(output)

print(len(output) * '=', ' ' + str(sum), sep='\n')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( call_expression ( identifier ) ( arguments ) ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( binary_expression ( identifier ) ( string ) ) ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Ilja Welvaert/mathemagisch.py"",""fullName"":""Ilja Welvaert"",""id"":""12015"",""status"":""correct"",""submissionID"":""6025839"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:32:34.000Z"",""labels"":""biol""}"
587,/home/maxiem/Downloads/files/Anthony Gryseels/mathemagisch.py,"# definieren van de parameter en input
m = str(input())
som = 0
# definieren van het eindpunt
eindpunt = m[:-1]
# opzetten van de loop
for pos, _ in enumerate(m):
    getal = m[:pos]+ m[pos+1:]
    if getal[0] == '0':
        getal = getal[1:]
        if getal == '000000000':
            getal = '0'
    if pos != (len(m) - 1):
        print((len(m) - len(getal)) * ' ',getal)
    else:
        print(f'+', getal)
    som += int(getal)

print((len(m) + 1) * '=')
print(f' {som}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Anthony Gryseels/mathemagisch.py"",""fullName"":""Anthony Gryseels"",""id"":""12020"",""status"":""correct"",""submissionID"":""6029322"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:47:15.000Z"",""labels"":""bcbt""}"
588,/home/maxiem/Downloads/files/Emma Bossuyt/mathemagisch.py,"#variabelen inlezen
getal = str(input(""Lees het getal in:""))


#elk cijfer in getal beurtelings schrappen en som berekenen: enumerate(): lets you get the index of an element while iterating over a list
som = 0
for index, cijfer in enumerate(getal):
    volgend_getal = getal[:index] + getal[index+1:]
    som += int(volgend_getal)

    #er mogen geen nullen voor het volgende getal staan
    while volgend_getal[0] == '0' and len(volgend_getal) != 1:
        volgend_getal = volgend_getal[1:]

    #volgende getallen moeten rechts uitgelijnd worden over n+1 (n = aantal cijfers) posities door indien nodig extra spaties toe te voegen aan de linkerkant.
    aantal_spaties = len(getal) - len(volgend_getal)
    #voor het laatste getal moet een '+' staan
    if index == len(getal) - 1:
        output = '+' + aantal_spaties * ' ' + volgend_getal
    else:
        output = (aantal_spaties + 1) * ' ' + volgend_getal
    print(output)

print(len(output) * '=',
      ' ' + str(som),
      sep='\n')",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( call_expression ( number ) ( arguments ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( assignment_expression ( member_expression ( identifier ) ( property_identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( binary_expression ( identifier ) ( string ) ) ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Emma Bossuyt/mathemagisch.py"",""fullName"":""Emma Bossuyt"",""id"":""12021"",""status"":""correct"",""submissionID"":""5980364"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T16:09:37.000Z"",""labels"":""biol""}"
589,/home/maxiem/Downloads/files/Maaike Dhondt/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# input:
m = input('enter a n-digit number (n>=4): ')
n = len(m)

# find the numbers of n-1 digits
# make the sum of the numbers
# print the numbers, last one with a +sing in front
# print n times '='-sings
# print the sum
# rechts (>) uitgelijnd, n+1 string (s) spaces {:>{n+1}s}

total = 0
for i in range(n):
    number = int(m[:i] + m[i+1:])  # i is left out every time, why doesn't m.replace(m[i], '') work???
    number = str(number)
    if i == n-1:
        print(f""+{number:>{n}s}"")  # last number needs a + sing, and therefore one space less
    else:
        print(f""{number:>{n+1}s}"")
    total += int(number)

line = (n+1)*'='
print(line)
print(f'{total:>{n+1}d}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( sequence_expression ( identifier ) ( identifier ) ) ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( member_expression ( string ) ( ERROR ( identifier ) ( identifier ) ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ( ERROR ( identifier ) ) ( ERROR ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Maaike Dhondt/mathemagisch.py"",""fullName"":""Maaike Dhondt"",""id"":""12022"",""status"":""correct"",""submissionID"":""5914879"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-12T11:07:10.000Z"",""labels"":""biol""}"
590,/home/maxiem/Downloads/files/Danté Bouckhout/mathemagisch.py,"getal = str(input())
m = len(getal)
som = int(0)
positieschrappen = -1
for i in range (0, m):
    positieschrappen += 1
    getalgeschrapt = (getal[0:positieschrappen] + getal[positieschrappen+1 : m]).lstrip('0')
    if getalgeschrapt == '':
        getalgeschrapt = '        0'
    else:
        som += int(getalgeschrapt)
    if i == m-1:
        print(f'+ {getalgeschrapt}')
    elif len(getalgeschrapt) < m -1:
        print(f'   {getalgeschrapt}')
    else:
        print(f'  {getalgeschrapt}')
for i in range (0, m+1):
    if i == m:
        print('=')
    else:
        print('=', end='')
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Danté Bouckhout/mathemagisch.py"",""fullName"":""Danté Bouckhout"",""id"":""11553"",""status"":""correct"",""submissionID"":""5942926"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T18:29:26.000Z"",""labels"":""fyss""}"
591,/home/maxiem/Downloads/files/Manon Durnez/mathemagisch.py,"#invoer
m = input()

#variabelen
som = 0
lengte = len(m)
index = 0

#nieuwe getal
while index < lengte:
    getal = m[0:index] + m[index + 1:]
    som += int(getal)
    index += 1

    getal = int(getal)
    getal = str(getal)

    #uitvoer getallen
    if index < lengte:
        print(f'{getal:>{len(m) + 1}s}')
    else:
        print(f'+ {getal}')

#uitvoer (n+1)= en som
print('=' * (lengte + 1))
print(f' {som}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( jsx_namespace_name ( identifier ) ( identifier ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( binary_expression ( array ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( ERROR ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Manon Durnez/mathemagisch.py"",""fullName"":""Manon Durnez"",""id"":""11822"",""status"":""correct"",""submissionID"":""6032917"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T18:42:25.000Z"",""labels"":""bcbt""}"
592,/home/maxiem/Downloads/files/Martijn De Feyter/mathemagisch.py,"getal = input()
som = 0
for n in range(len(getal)):
    nwgetal = getal[:n]+getal[n+1:]
    som += int(nwgetal)
    nwgetal = nwgetal.lstrip('0')
    if n == len(getal) - 1:
        print(f'+ {nwgetal}')
    else:
        if nwgetal == '':
            nwgetal = 0
        print(f'{nwgetal:>{len(getal) + 1}}')
print('='*(len(getal) + 1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Martijn De Feyter/mathemagisch.py"",""fullName"":""Martijn De Feyter"",""id"":""12041"",""status"":""correct"",""submissionID"":""5989767"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T20:15:58.000Z"",""labels"":""chem""}"
593,/home/maxiem/Downloads/files/Longnan Shi/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
number=input()
z = 0
for i in range(1, len(number)):
    if i == 1:
        a = int(number[i:len(number)])
        print(f""  {a}"".rjust(len(number)+1))
        z += a
        i += 1
    else:
        a = int((number[0:i-1]+number[i:len(number)]))
        print(f""  {a}"")
        z += a
        i += 1
z = z + int(number[0:-1])
print(f""+ {number[0:-1]}"")
print(""=""*(len(number)+1))
print(f"" {z}"")",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Longnan Shi/mathemagisch.py"",""fullName"":""Longnan Shi"",""id"":""12043"",""status"":""correct"",""submissionID"":""6014405"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:58:27.000Z"",""labels"":""stat""}"
594,/home/maxiem/Downloads/files/Lennard Dekeukeleire/mathemagisch.py,"number = str(input(""Give a number: ""))
length, sum = len(number), 0
while number[0] == ""0"":
    number = number[1:]
for index, character in enumerate(number):
    subnumber = number[:index] + number[index + 1:]
    sum += int(subnumber)
    while subnumber[0] == ""0"":
        subnumber = subnumber[1:]
        if subnumber == """":
            subnumber = (length - 1) * "" "" + ""0""
    if (index + 1) == length:
        print(f'+ {subnumber}')
    else:
        n = length + 1
        subnumber = subnumber.rjust(n)
        print(f'{subnumber}')

equals = ""="" * (length + 1)
print(f'{equals}')
n = length + 1
sum = str(sum).rjust(n)
print(f'{sum}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( sequence_expression ( identifier ) ( sequence_expression ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ( string ) ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( else_clause ( ERROR ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lennard Dekeukeleire/mathemagisch.py"",""fullName"":""Lennard Dekeukeleire"",""id"":""7948"",""status"":""correct"",""submissionID"":""5945138"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T22:52:32.000Z"",""labels"":""biol""}"
595,/home/maxiem/Downloads/files/Ivar Faber/mathemagisch.py,"# sla het inputgetal op als een string.
n = str(input('geef het eerste getal: '))
index = 0
rij = n
x = len(n)
som = 0
for index in range(x):
    if index == 0:
        volgende = rij[index + 1:index + x]
        if volgende[0] == '0' and volgende != '0000000000':
            volgende = ' '+ rij[index + 2:index + x]
        elif volgende == '0000000000':
            volgende = '         0'
        print('  'f'{volgende}') 
    elif index < x - 1:
        volgende = rij[ :index] + rij[index + 1:x]
        print('  'f'{volgende}')
    else:
        volgende = rij[:x - 1]
        print('+ 'f'{volgende}')
    index += 1
    som += int(volgende)
t = str('=' * (x + 1))
print(t)
print(' 'f'{som}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( assignment_expression ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( subscript_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ivar Faber/mathemagisch.py"",""fullName"":""Ivar Faber"",""id"":""12078"",""status"":""correct"",""submissionID"":""5994763"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T13:03:36.000Z"",""labels"":""fyss""}"
596,/home/maxiem/Downloads/files/Juul Janssen/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input(""getal: "")
som= 0
n = len(getal) +1
plus = ""+""


for i in range(0,n-1):
    
    deel1 = getal[:i]
    deel2 = getal[i+1:]
    # het getal wordt omgevormd naar een integer en terug voor:
    # de nullen te verwijderen voor het geval zonder het getal nul te verwijderen
    get_verwijderd = int(deel1+deel2)
    get_verwijderd = str(get_verwijderd)
    
    #bij de laatste regel wordt een plus toegevoegd bij het printen
    if i == (n-2):
        print(f""{plus}{get_verwijderd:>{n-1}s}"")
    
    else: print(f""{get_verwijderd:>{n}s}"")
    som += int(get_verwijderd)

som = str(som)
# De deellijn bestaat uit n '='
lijn = ""=""* n
print(lijn)
print(f""{som:>{n}s}"")",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ) ),"{""filename"":""Juul Janssen/mathemagisch.py"",""fullName"":""Juul Janssen"",""id"":""12118"",""status"":""correct"",""submissionID"":""6011702"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:58:47.000Z"",""labels"":""stat""}"
597,/home/maxiem/Downloads/files/Silke Vergucht/mathemagisch.py,"#invoer van gegevens + lengte getal bepalen
getal = (input('Geef het getal:'))
lengte = len(getal)

#variabelen definiëren
verwijderd_getal = 0
som_van_getallen = 0
IsGelijkAan=""""

#for lus voor verwijderen van volgende getal en printen getallen
for i in range (lengte):
    #als er voorloop nullen zijn moeten die nog weg met if of met extra while??
    getal_1 = getal[0:verwijderd_getal] + getal[verwijderd_getal + 1:]
    som_van_getallen += int(getal_1)
    verwijderd_getal += 1
    getal_1 = getal_1.lstrip(""0"")
    if len(getal_1)==0:
        getal_1 =""0""
    if i == (lengte-1):
        print(f""+{getal_1:>{lengte}s}"")
    else:
        print(f""{getal_1:>{lengte +1}s}"")
for i in range (lengte):
    IsGelijkAan=IsGelijkAan+""=""
IsGelijkAan += ""=""
print(f""{str(IsGelijkAan):>{lengte +1}s}"")
print(f""{str(som_van_getallen):>{lengte +1}s}"")",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Silke Vergucht/mathemagisch.py"",""fullName"":""Silke Vergucht"",""id"":""12119"",""status"":""correct"",""submissionID"":""5996781"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T15:14:50.000Z"",""labels"":""bcbt""}"
598,/home/maxiem/Downloads/files/Viktor Van Nauw/mathemagisch.py,"getal = input(""geef een getal"")

index = 0
resultaat = 0
lengte = len(getal) + 1

for index in range(len(getal)):
    nummer = getal[0:index] + getal[index + 1:]
    resultaat += int(nummer)
    index += 1

    if int(index) == len(getal):
        print(f'+{int(nummer):>{len(getal)}d}')
    else:
        print(f""{int(nummer):>{lengte}d}"")


print(""="" * lengte)
print(f'{resultaat:>{lengte}d}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Viktor Van Nauw/mathemagisch.py"",""fullName"":""Viktor Van Nauw"",""id"":""12105"",""status"":""correct"",""submissionID"":""6011528"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:50:08.000Z"",""labels"":""bcbt""}"
599,/home/maxiem/Downloads/files/Dounya Van Overschelde/mathemagisch.py,"m = input()
output = """"
i = 0
som = 0
for getal in m:
    m = str(m)
    if i == (len(m) - 1):
        som += int(m[:i] + '' + m[i+1:])
        output += '+ ' + m[:i] + '' + m[i+1:] + '\n' + (len(m) + 1) * '=' + '\n' + str(som).rjust(len(m)+1, ' ')
    else:
        som += int(m[:i] + '' + m[i+1:])
        if m[:i] + '' + m[i+1:] == (len(m)-1)*'0':
            output += '0'.rjust(len(m)+1, ' ') + '\n'
        else:
            output += (m[:i] + '' + m[i+1:]).lstrip(""0"").rjust(len(m)+1, ' ') + '\n'
    i += 1

print(output)
  
        
    ",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( string ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ( string ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ( string ( escape_sequence ) ) ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ( string ( escape_sequence ) ) ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( string ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( string ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( ERROR ( string ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( string ) ) ) ( string ( escape_sequence ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( binary_expression ( call_expression ( member_expression ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( string ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( string ) ) ) ( string ( escape_sequence ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Dounya Van Overschelde/mathemagisch.py"",""fullName"":""Dounya Van Overschelde"",""id"":""8231"",""status"":""correct"",""submissionID"":""5975436"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T09:35:36.000Z"",""labels"":""bcbt""}"
600,/home/maxiem/Downloads/files/Naïs Fleury/mathemagisch.py,"getal = input()
uitvoer = ''
lengte = len(getal) + 1
pos = 0
totaal = 0
for cijfer in getal:
    if pos == 0:
        nieuwgetal = getal[1:]
    else:
        nieuwgetal = getal[0:pos] + getal[pos+1:]
    if nieuwgetal[0] == str(0):
        nieuwgetal = nieuwgetal[1:]
    if int(nieuwgetal) == 0:
        nieuwgetal = '0'
    totaal += int(nieuwgetal)
    aantalspaties = lengte - len(nieuwgetal)
    if pos == len(getal) - 1:
        uitvoer += '+' + ' ' + nieuwgetal
    else:
        uitvoer += aantalspaties * ' ' +  nieuwgetal + '\n'
    pos += 1
uitvoer = uitvoer.rstrip('\n')
print(uitvoer)
print(lengte * '=')
print(f"" {totaal}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( string ) ) ( identifier ) ) ( string ( escape_sequence ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ( escape_sequence ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Naïs Fleury/mathemagisch.py"",""fullName"":""Naïs Fleury"",""id"":""8133"",""status"":""correct"",""submissionID"":""5753929"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-09-30T08:04:07.000Z"",""labels"":""bcbt""}"
601,/home/maxiem/Downloads/files/Jana Goes/mathemagisch.py,"# invoer
getal = int(input())

# berekening
index = 0
som = 0
while index != len(str(getal)):
    nieuw_getal = str(getal)[:index] + str(getal)[index + 1:]
    if nieuw_getal[0] == '0':
        if nieuw_getal[1] == '0':
            nieuw_getal = '0'
        else:
            nieuw_getal = nieuw_getal.lstrip('0')
    if index == len(str(getal)) - 1:
        print(f'+{nieuw_getal:>{len(str(getal))}s}')
    else:
        print(f'{nieuw_getal:>{(len(str(getal)) + 1)}s}')
    som += int(nieuw_getal)
    index += 1

print('=' * (len(str(getal)) + 1))
print(f'{str(som):>{(len(str(getal))) + 1}s}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( subscript_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( string ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jana Goes/mathemagisch.py"",""fullName"":""Jana Goes"",""id"":""2459"",""status"":""correct"",""submissionID"":""5994689"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T12:59:13.000Z"",""labels"":""biol""}"
602,/home/maxiem/Downloads/files/Sarvnaz Gostary/mathemagisch.py,"m = str(input())
pain = 0

lengte = len(m)
for i in range(0, lengte):
    if i == 0:
        kak = m[i+1:]
        kak = int(kak)
        pain += kak
        lengte1 = len(str(kak))
        anus = lengte-lengte1
        print(f'{(anus*"" ""+"" "")}{kak}')
    elif i > 0 and i < lengte-1:
        pis = int(m[:i]+m[i+1:])
        pain += pis
        lengte1 = len(str(pis))
        anus = lengte-lengte1
        print(f'{(anus*"" ""+"" "")}{pis}')
    else:
        spuug = int(m[:lengte-1])
        pain += spuug
        lengte1 = len(str(spuug))
        anus = lengte-lengte1
        print(f'+{(anus*"" "")}{spuug}')
print((lengte+1)*'=')
print(f' {pain}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Sarvnaz Gostary/mathemagisch.py"",""fullName"":""Sarvnaz Gostary"",""id"":""12125"",""status"":""correct"",""submissionID"":""6006625"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T12:25:21.000Z"",""labels"":""bcbt""}"
603,/home/maxiem/Downloads/files/Hanke Vermeiren/mathemagisch.py,"number = input()
int_number = int(number)
sum =0
#formule voor nummers waarvan telkens een weggelaten
for i in range(len(number)-1):
    new_number = number[:i] + number[i + 1:]
    new_number = new_number[:-1].lstrip('0') + new_number[-1]
    while len(new_number) != (len(number)) - 1:
        new_number = "" "" + new_number
    print(""  {}"".format(new_number))
    sum += int(new_number) #om van al deze nummers

# voor laatste nummer voor de som
i = len(number)
last_number = number[:i-1]
print(""+ {}"".format(last_number))

totaal = int(sum) + int(last_number)
line = ""=""
#integer omzetten in strin om lengte te bepalen
a = str(number)
m = len(a)
m = m + 1
#lijn maken
line = line * int(m)
#printen van lijn en totaal
print(line)
print("" {}"".format(totaal))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( member_expression ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Hanke Vermeiren/mathemagisch.py"",""fullName"":""Hanke Vermeiren"",""id"":""12127"",""status"":""correct"",""submissionID"":""5818869"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-06T07:44:18.000Z"",""labels"":""keuz""}"
604,/home/maxiem/Downloads/files/Lara Morren/mathemagisch.py,"#Invoer
m = input()

#definiëren som van gewijzigde strings
totaal_geschrapt = 0

#for loop van eerste cijfer van getal tot voorlaatste cijfer
for i in range(0, len(m) - 1):
    geschrapt = m[:i] + m[i+1:]
    totaal_geschrapt += int(geschrapt)

    if geschrapt[0] == ""0"":
        int_geschrapt = int(geschrapt)
        terug_string = str(int_geschrapt)
        print("" "", terug_string.rjust(len(m)-1, "" ""))
    else:
        print("" "", int(geschrapt))

#idem maar voor laatste cijfer van getal, met ""+"" in print
laatste_geschrapt = m[0:len(m)-1]
print(""+"", int(laatste_geschrapt))
int_laatste_geschrapt = int(laatste_geschrapt)

#eindsom
totaal = totaal_geschrapt + int_laatste_geschrapt

#gelijkheidstekens
print(""=""*(len(m)+1))

#uitkomst
print("""", totaal)",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( binary_expression ( identifier ) ( ERROR ) ( string ) ) ( ERROR ( string ) ) ( string ) ) ) ) ( ERROR ) ),"{""filename"":""Lara Morren/mathemagisch.py"",""fullName"":""Lara Morren"",""id"":""12088"",""status"":""correct"",""submissionID"":""5996401"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T14:50:09.000Z"",""labels"":""bcbt""}"
605,/home/maxiem/Downloads/files/Steffen De Keersmaeker/mathemagisch.py,"oorsprgetal =input(""Welk getal?"")
lengte = len(oorsprgetal)
breedte = int(lengte + 1)
som = 0

index = 0
for aantal in range(lengte):
    rij = oorsprgetal[0:aantal] + oorsprgetal[aantal+1:lengte]
    if aantal == lengte-1:
        som += int(rij)
        print(""+"", int(rij))
    else:
        print(f""{int(rij):>{breedte}d}"")
        som += int(rij)
        index += 1
streep = (lengte + 1) * '='
print(streep)
print("""", som)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Steffen De Keersmaeker/mathemagisch.py"",""fullName"":""Steffen De Keersmaeker"",""id"":""5283"",""status"":""correct"",""submissionID"":""6032912"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T18:41:59.000Z"",""labels"":""keuz""}"
606,/home/maxiem/Downloads/files/Olivia Van der Sypt/mathemagisch.py,"
n = 0
while n < 4:
    m = input()
    n = len(m)


result = []
print1 = []
for i in range(n):
    if i == n -1:
        i = n-1
    result.append(str(int(m[:i] + m[i+1:])))

for i in range(n):
    if i == n-1:
        print1.append('+ '+ ''.join(result[i]))
    else:
        print1.append(''.join(result[i]))
tussenlijn = ''
for i in range(n+1):
    tussenlijn += '='
print1.append(tussenlijn)

som = 0
for i in range(n):
    som += int(result[i])
print1.append(str(som))

for i in range(len(print1)):
    print(f""{print1[i]:>{n+1}s}"")
",( program ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Olivia Van der Sypt/mathemagisch.py"",""fullName"":""Olivia Van der Sypt"",""id"":""12120"",""status"":""correct"",""submissionID"":""5997891"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T16:47:30.000Z"",""labels"":""bcbt""}"
607,/home/maxiem/Downloads/files/hendrik kriekemans/mathemagisch.py,"g = input()
g2 = g[1:]
n = str()
s = int(g2)
if g == '70000000000':
    print('  '     +     
  '         0' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  ' 
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' 
'+ 7000000000' + '\n' 
'============' + '\n' + ' '
  '70000000000')
else:

    for cijfer in g2:
        if cijfer == '0':
            ind = g2.index(cijfer)
            g2 =  ' ' * (ind +1) + g2[ind + 1:]
            t = g2
            if t == ' 0':
                print(t)
                break
        else:
            t = '  ' + g2
            print(t)
            break
    c = 0
    a = len(g) - 1
    b = len(g2) + 2
    for ind, cijfer2 in enumerate(g):
            c += 1
            if c == a:
                g3 = g[:ind] +  cijfer2 + g2[ind + 1:]
                n = '+' + ' ' + g3
                print(n)
                s += int(g3)
            elif c < a:
                g3 = g[:ind] + cijfer2 + g2[ind + 1:]
                n = '  ' + g3
                print(n)
                s += int(g3)
            else:
                d = '='*b  + '\n' + ' ' + str(s)
                print(d)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( ERROR ( string ( escape_sequence ) ) ) ( string ) ) ( ERROR ( string ( escape_sequence ) ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( break_statement ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( break_statement ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( string ( escape_sequence ) ) ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""hendrik kriekemans/mathemagisch.py"",""fullName"":""hendrik kriekemans"",""id"":""7979"",""status"":""correct"",""submissionID"":""6029265"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:44:14.000Z"",""labels"":""chem""}"
608,/home/maxiem/Downloads/files/Sebastian Wylleman/mathemagisch.py,"Origineel_getal= input()
som = int()
lengte = len(Origineel_getal)

for i in range(lengte-1):
    cijfer_i = Origineel_getal[:i] + Origineel_getal[i+1:]
    while cijfer_i[0] == '0' and len(cijfer_i) > 1:
        cijfer_i = cijfer_i[1:]
    som += int(cijfer_i)
    print(f""  {cijfer_i:>{lengte-1}s}"")

laatste_cijfer = Origineel_getal[:lengte-1]
som += int(laatste_cijfer)
print(f'+ {laatste_cijfer}')
print((lengte+1)*'=')
print(f"" {str(som):>s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Sebastian Wylleman/mathemagisch.py"",""fullName"":""Sebastian Wylleman"",""id"":""12156"",""status"":""correct"",""submissionID"":""5921127"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-12T16:01:30.000Z"",""labels"":""keuz""}"
609,/home/maxiem/Downloads/files/Seyedomid Sobhani/mathemagisch.py,"number = input()
sum_of_numbers = 0
Suppressed_numbers = []
for i in range(len(number)):
    Suppressed_numbers.append(int(number[:i]+number[i+1:]))
    sum_of_numbers += Suppressed_numbers[i]

equal_singe = ""="" * (len(str(sum_of_numbers))+1)

for i in range(len(Suppressed_numbers)-1):
    print(' ' * ((len(str(sum_of_numbers))+1) - len(str(Suppressed_numbers[i]))) + str(Suppressed_numbers[i]))

print('+ '+str(Suppressed_numbers[-1]))


print(equal_singe)
print(' '+str(sum_of_numbers))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( arguments ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Seyedomid Sobhani/mathemagisch.py"",""fullName"":""Seyedomid Sobhani"",""id"":""12157"",""status"":""correct"",""submissionID"":""5890025"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-10T14:53:59.000Z"",""labels"":""stat""}"
610,/home/maxiem/Downloads/files/Arthur Mestdagh/mathemagisch.py,"M = int(input())
m = str(M)

l = len(m)
s = 0
S = 0
# print(f""{m:>10s}"")

for i, c in enumerate(m):
    n = m[:i] + m[(i + 1):]
    s = int(n)
    n = str(s)
    if i == (l-1):
        print('+', f""{n:>{l}}"", sep='')
    else:
        print(f""{n:>{l+1}}"")


    S += s

eind = '=' * (l+1)
s = str(S)
print(eind, f""{s:>{l+1}}"", sep='\n')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( ERROR ( identifier ) ) ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ( identifier ) ) ( string ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Arthur Mestdagh/mathemagisch.py"",""fullName"":""Arthur Mestdagh"",""id"":""12159"",""status"":""correct"",""submissionID"":""5930422"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T09:58:01.000Z"",""labels"":""keuz""}"
611,/home/maxiem/Downloads/files/Amani Sakande/mathemagisch.py,"#input
m = str(input())
n = 0
s = 0
lengte_getal = len(m)

#beurtelings cijfers schrappen
while n != lengte_getal:
    getal = m[:n] + m[n+1:]
    integer_getal = int(getal)
    string_getal = str(integer_getal)
    if n < (lengte_getal - 1):
        print(f'{string_getal:>{lengte_getal+1}s}')
    else:
        print(f'+{string_getal:>{lengte_getal}s}')
    n += 1
    s += integer_getal
s = str(s)
lijn = (n + 1) * ""=""
print(f'{lijn}')
print(f'{s:>{lengte_getal+1}s}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Amani Sakande/mathemagisch.py"",""fullName"":""Amani Sakande"",""id"":""11793"",""status"":""correct"",""submissionID"":""6029254"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:43:41.000Z"",""labels"":""bcbt""}"
612,/home/maxiem/Downloads/files/Lennert Devriendt/mathemagisch.py,"#mijn methode

m = input()
getal = m
l = len(m)
som = 0
rijen = 1
spatie = ' '
for i in range(1, l+1):
    if l > rijen:
        getal = getal[0:i-1] + getal[i:]
        if getal[0] == '0' and getal.count('0') == 1:
            aantal = spatie * getal.count('0')
            getal = getal.strip('0')
            som += int(getal)
            print(f'  {aantal}{getal}')
        elif getal == '0' * (l-1):
            print(f'{spatie * l}0')
        else:
            som += int(getal)
            print(f'  {getal}')
        rijen += 1
        getal = m
    elif l == rijen:
        getal = getal[0:i-1] + getal[i:]
        som += int(getal)
        rijen += 1
        print(f'+ {getal}')

gelijktekens = (l+1) * '='
print(gelijktekens)
print(f' {som}')",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( string ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lennert Devriendt/mathemagisch.py"",""fullName"":""Lennert Devriendt"",""id"":""7935"",""status"":""correct"",""submissionID"":""5991800"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T09:22:17.000Z"",""labels"":""geog""}"
613,/home/maxiem/Downloads/files/Manu Claessens/mathemagisch.py,"# Input
m = int(input())
m_string = str(m)
length = len(m_string)

math_solution = 0

# Loops
for index, char in enumerate(m_string):
    solution = m_string[:index] + m_string[index+1:]
    
    if solution[0] == ""0"":
        solution = solution.lstrip(""0"")
        solution = "" "" + solution
        
    if solution == "" "":
        solution = ""0""
        
    if index != length - 1:
        print(solution.rjust(length + 1))
    else:
        print(""+"", solution)
    math_solution += int(solution)

print((length + 1) * ""="")
print(str(math_solution).rjust(length + 1))",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Manu Claessens/mathemagisch.py"",""fullName"":""Manu Claessens"",""id"":""5108"",""status"":""correct"",""submissionID"":""6004515"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T11:26:35.000Z"",""labels"":""stat""}"
614,/home/maxiem/Downloads/files/Loes Breekelmans/mathemagisch.py,"getal = input('getal m:')
som = 0
b = 0 #gebruiken we om straks de else te geven
spatie = ' ' #want je moet steeds een spatie van de boord verwijdert zijn, en op laatste rij een + zetten
#alle getallen gaan op een mooie rij moeten staan

for i in range(len(getal)):
    #evenveel keer herhalen als dat het 'getal' lang is
    if i != len(getal)-1:
        #alle rijen behalve de voorlaatste
        a = str(getal[0:i] + getal[i+1:len(getal)])
        #0 tot i voor eerste deel en dan eentje weglaten dus
        #volgende is i + 1 tot (dit weet je nt) dus gwn tot
        #lengte vh getal
        if a == '0' * (len(getal)-1):
            #Als je volledige lijn nullen zijn
            print(f'{spatie * (len(getal))}0')
        elif a[0] == '0':
            #als eerste getal een nul is
            a2 = (getal[2 + i: len(getal)])
            print(f""{a2:>{len(getal)+1}s}"")
            a2 = int(a2)
            som += int(a2)
        else:
            print(f""{a:>{len(getal)+1}s}"")
            som += int(a)
    else:
        #gaat over laatste rij, want daar moeten we nog de plus bijzetten
        b = getal[0:i] + getal[1 + i:len(getal)]
        #zelfde als bij a, maar voor de laatste zin
        print(f""+ {b:>6s}"")
        b = int(b)

print('=' * (len(getal) +1))
print(f'{(som + b):> {len(getal)}}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( ERROR ( string ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( string ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( string ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( string ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( number ) ( identifier ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( number ) ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Loes Breekelmans/mathemagisch.py"",""fullName"":""Loes Breekelmans"",""id"":""12165"",""status"":""correct"",""submissionID"":""6010932"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:21:44.000Z"",""labels"":""geog""}"
615,/home/maxiem/Downloads/files/Kim Bettens/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# invoer natuurlijk getal als string
som = input()
n = len(som)
uitkomst = 0

# elimineren van volgend getal in string + printen van getal met uitlijning rechts met n+1 spaties
for i in range(len(som)):
    if i == 0:
        tussenstap = int(som[1:])
        uitkomst += tussenstap
        print(f""{tussenstap:>{n+1}d}"")
    elif i == (n-1):
        tussenstap = int(som[:i])
        uitkomst += tussenstap
        print('+', tussenstap)
    else:
        tussenstap = int(som[:i] + som[i+1:])
        uitkomst += tussenstap
        print(f""{tussenstap:>{n + 1}d}"")

# printen van gelijktekens en som, rechts uitgelijnd met n+1 spaties
print((n+1) * '=')
print(f""{uitkomst:>{n+1}d}"")",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( number ) ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Kim Bettens/mathemagisch.py"",""fullName"":""Kim Bettens"",""id"":""12166"",""status"":""correct"",""submissionID"":""6002374"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T08:59:36.000Z"",""labels"":""keuz""}"
616,/home/maxiem/Downloads/files/Kylian Baeyens/mathemagisch.py,"Getal = input()
Positie = 0
Som = 0
for Positie in range(len(Getal)):
    if Positie == len(Getal) - 1:
        x = Getal[0:Positie]+ Getal[Positie + 1:len(Getal)]
        Som += int(x)
        print(f""+ {x}"")
    else:
        x = Getal[0:Positie] + Getal[Positie+1:len(Getal)]
        Som += int(x)
        y = x[0]
        Aantal_Nullen = 0
        while y == ""0"" and Aantal_Nullen < len(x)-1:
            Aantal_Nullen += 1
            y = x[Aantal_Nullen]
        x = ( "" "" * Aantal_Nullen) + x[Aantal_Nullen:]
        print(f""  {x}"")
print( ""="" * (len(Getal)+1))
print(f"" {Som}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( string ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Kylian Baeyens/mathemagisch.py"",""fullName"":""Kylian Baeyens"",""id"":""11821"",""status"":""correct"",""submissionID"":""5999081"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T19:14:13.000Z"",""labels"":""bcbt""}"
617,/home/maxiem/Downloads/files/Fjonna De Vroe/mathemagisch.py,"# invoer
m = input()     # uit 4 of meer cijfers

# uitvoer
lengte = len(m)          # lengte van m
positie = 0
volledig = m
totaal = 0
a = 0                   # a en b, getallen schuiven op
b = 1

# printen tot laatste cijfer weg is
for positie in range(lengte):       # range gebruiken!
    m = m[:a] + m[b:]       # [] vb woord = woord[:4] + woord[5:]
    positie += 1
    a += 1
    b += 1
    if positie != lengte:
        print(f""{int(m):>{lengte + 1}}"")     # uitlijnen naar rechts
    else:
        print(f'+ {int(m)}')
    totaal += int(m)
    m = volledig

einde = (lengte + 1) * '='
print(einde)           # aantal = lengte m
print(f""{totaal:>{lengte + 1}}"")

# niet beginnen met 0!",( ERROR ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ) ) ( ERROR ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( ERROR ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( number ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ( ERROR ( ERROR ) ) ( ERROR ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( number ) ) ( augmented_assignment_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ( ERROR ( identifier ) ( number ) ( identifier ) ) ( ERROR ( number ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( identifier ) ( identifier ) ( ERROR ( identifier ) ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ( identifier ) ( ERROR ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( number ) ) ),"{""filename"":""Fjonna De Vroe/mathemagisch.py"",""fullName"":""Fjonna De Vroe"",""id"":""12116"",""status"":""correct"",""submissionID"":""5978206"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T13:25:13.000Z"",""labels"":""bcbt""}"
618,/home/maxiem/Downloads/files/Daniel Leleu/mathemagisch.py,"number = input('Enter number: ')
number2 = int(number)
while number2 < 4:
    number = input('Enter number: ')


liss = list(number)
liss2 = []
count = 0
for i in liss:
    
    n= liss.remove(i)
    
    string = [str(i) for i in liss]
    
    liss2.append(string)
    n = liss.insert(count, i)
    count+=1

liss3 = [] 
string3 = ''
for i in liss2:
    for j in i:
        string3 += j
    liss3.append(string3)
    string3 = ''

liss4 = []    
for i in liss3:
    print(i)
    integer = int(i)
    liss4.append(integer)
    
s = sum(liss4)    
for i in liss4[:-1]:
     print(i)
print(""+"", liss4[-1])
print(""======="")
print(s)
    



",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Daniel Leleu/mathemagisch.py"",""fullName"":""Daniel Leleu"",""id"":""12171"",""status"":""wrong"",""submissionID"":""6023217"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T12:30:40.000Z"",""labels"":""stat""}"
619,/home/maxiem/Downloads/files/Amila Thalakotunage/mathemagisch.py,"value_in = input('Enter the value: ')
count = 0
chars = len(value_in) + 1
for ind in range(len(value_in)-1):
    ind_value = int(value_in[:ind]+value_in[ind+1:])
    print(str(ind_value).rjust(chars))
    count += int(value_in[:ind]+value_in[ind+1:])
count += int(value_in[:-1])
print('+',int(value_in[:-1]))
print('='*(len(value_in) + 1))
print('', count)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Amila Thalakotunage/mathemagisch.py"",""fullName"":""Amila Thalakotunage"",""id"":""12187"",""status"":""correct"",""submissionID"":""6013204"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T17:34:58.000Z"",""labels"":""keuz""}"
620,/home/maxiem/Downloads/files/Emile Roels/mathemagisch.py,"m = str(input('Getal: '))
som = 0
b = 0
a2 = 0
spatie = ' '
for i in range(len(m)):
    if i != len(m) - 1:
        a = str(m[0:i] + m[1 + i:len(m)])
        if a == '0' * (len(m) - 1):
            print(f'{spatie * (len(m))}0')
        elif a[0] == '0':
            a2 = int(m[2 + i:len(m)])
            print(f'   {a2}')
        else:
            print(f'  {a}')
            som += int(a)
    else:
        b = m[0:i] + m[1 + i:len(m)]
        print(f'+ {b}')
        b = int(b)
print('=' * (len(m) + 1))
print(f' {som + b + a2}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( number ) ( identifier ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( string ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( number ) ( identifier ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( number ) ( identifier ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Emile Roels/mathemagisch.py"",""fullName"":""Emile Roels"",""id"":""7933"",""status"":""correct"",""submissionID"":""5992975"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T10:55:39.000Z"",""labels"":""geog""}"
621,/home/maxiem/Downloads/files/Hanne François/mathemagisch.py,"number = input()
n = 0
som = 0
for i in range(len(number)):
    getal = number[:n] + number[n+1:]
    while getal[0] == '0':
        getal = getal[1:]
        if getal == '0':
            break
    n += 1
    if n < len(number):
        print(f""  {getal:>{len(number) - 1}s}"")
    else:
        print(f""+ {getal}"")
    som += int(getal)
print('='* (n + 1))
print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( string ) ) ) ( break_statement ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Hanne François/mathemagisch.py"",""fullName"":""Hanne François"",""id"":""12190"",""status"":""correct"",""submissionID"":""5975900"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T10:11:39.000Z"",""labels"":""geol""}"
622,/home/maxiem/Downloads/files/Maïté Van Hecke/mathemagisch.py,"getal = input()
uitvoer = ''
lengte = len(getal) + 1
pos = 0
totaal = 0
for cijfer in getal:
    if pos == 0:
        nieuwgetal = getal[1:]
    else:
        nieuwgetal = getal[0:pos] + getal[pos+1:]
    if nieuwgetal[0] == str(0):
        nieuwgetal = nieuwgetal[1:]
    if int(nieuwgetal) == 0:
        nieuwgetal = '0'
    totaal += int(nieuwgetal)
    aantalspaties = lengte - len(nieuwgetal)
    if pos == len(getal) - 1:
        uitvoer += '+' + ' ' + nieuwgetal
    else:
        uitvoer += aantalspaties * ' ' +  nieuwgetal + '\n'
    pos += 1
uitvoer = uitvoer.rstrip('\n')
print(uitvoer)
print(lengte * '=')
print(f"" {totaal}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( string ) ) ( identifier ) ) ( string ( escape_sequence ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ( escape_sequence ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Maïté Van Hecke/mathemagisch.py"",""fullName"":""Maïté Van Hecke"",""id"":""8155"",""status"":""correct"",""submissionID"":""5877813"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-09T15:24:45.000Z"",""labels"":""bcbt""}"
623,/home/maxiem/Downloads/files/Hanno Schroyen/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

cijfer = input()

lengte = n = len(cijfer)
a = 0
som = 0

while lengte > 0:
    b = cijfer[:a] + cijfer[a+1:]
    som += int(b)
    if lengte == 1:
        print(f""+{int(b): {n}d}"")
    else:
        print(f""{int(b): {n+1}d}"")
    lengte -= 1
    a += 1

print('='*(n+1))
print(f""{som: {n+1}d}"")


",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Hanno Schroyen/mathemagisch.py"",""fullName"":""Hanno Schroyen"",""id"":""12191"",""status"":""correct"",""submissionID"":""5919877"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-12T15:02:18.000Z"",""labels"":""keuz""}"
624,/home/maxiem/Downloads/files/Ruben Vercruysse/mathemagisch.py,"def verwijder_karakter(string, n):
    """"""verwijder karakter met index 'n' uit de string 'string'""""""
    deel1 = string[:n]  # tot de letter n
    deel2 = string[n+1:]  # vanaf de letter na n
    return deel1 + deel2  # de string zonder n


def ladd(string, sub):
    """"""voeg substring toe aan linkerkantstring""""""
    return sub + string


def verwijder_voorloopnul(string):
    """"""verwijder voorloopnullen uit string""""""
    string = string.lstrip(""0"")
    if string == """":
        string = ""0""
    return string


getal = str(input())
lengte = len(getal)  # als var om code compacter te maken

i = 0
som = 0
for char in range(lengte):
    getal_zonder_i = verwijder_karakter(getal, i)
    getal_zonder_i = verwijder_voorloopnul(getal_zonder_i)

    som += int(getal_zonder_i)

    if i < lengte - 1:
        while len(getal_zonder_i) < lengte + 1:
            getal_zonder_i = ladd(getal_zonder_i, "" "")

    else:
        getal_zonder_i = ladd(getal_zonder_i, ""+ "")

    print(getal_zonder_i)
    i += 1

# regel met n+1 gelijkaan tekens toevoegen
gelijkregel = """"
for char in range(lengte + 1):
    gelijkregel += ""=""

# som rechts uitlijnen
som = str(som)
while len(som) != lengte + 1:
    som = ladd(som, "" "")

# printen gelijkregel en som
print(gelijkregel, som, sep=""\n"")  # f-string om rechtse uitlijning som mogelijk te maken
",( program ( ERROR ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ( string ) ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( return_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( expression_statement ( string ) ) ( return_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( return_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( ERROR ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ) ( identifier ) ) ( variable_declaration ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( variable_declarator ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( string ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ),"{""filename"":""Ruben Vercruysse/mathemagisch.py"",""fullName"":""Ruben Vercruysse"",""id"":""12199"",""status"":""correct"",""submissionID"":""5986395"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T14:21:11.000Z"",""labels"":""chem""}"
625,/home/maxiem/Downloads/files/Jolien van Hommelen/mathemagisch.py,"# Suppress each of the digits in an integer one by one, add the resulting numbers and you get the integer again

m = str(input())
n = len(m)
total = 0

for suppress in range(n):
    number_str = m[:suppress] + m[suppress + 1:]
    number_int = int(number_str)
    total += number_int

    # Add a ""+"" before the last number
    if suppress == n - 1:
        print(f""+"", end="""")
        n = len(m) - 1
    print(f""{number_int:>{n + 1}}"")

n = len(m)
print(f""="" * (n + 1))
print(f""{total:>{n + 1}}"")
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( string ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( assignment_expression ( identifier ) ( ERROR ) ( ERROR ( string ) ) ( object ( pair ( property_identifier ) ( ERROR ( identifier ) ) ( unary_expression ( number ) ) ) ) ) ( ERROR ) ) ) ) ),"{""filename"":""Jolien van Hommelen/mathemagisch.py"",""fullName"":""Jolien van Hommelen"",""id"":""12196"",""status"":""correct"",""submissionID"":""5993153"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T11:10:02.000Z"",""labels"":""keuz""}"
626,/home/maxiem/Downloads/files/Barend Vandenbussche/mathemagisch.py,"getal=str(input())
som=0
laatste='+ {a}'
andere='  {a}'
for i in range(len(getal)):
    if i==(len(getal)-1):
        uitvoer=''
        uitvoer+=getal[:i]
        uitvoer+=getal[(i+1):]
        som+=int(uitvoer)
        print(laatste.format(a=uitvoer))
    else:
        uitvoer=''
        uitvoer+=getal[:i]
        uitvoer+=getal[(i+1):]
        j=0
        while uitvoer[j]=='0' and j<(len(uitvoer)-1):
            uitvoer=uitvoer.replace('0',' ',1)
            j+=1
        som+=int(uitvoer)
        print(andere.format(a=uitvoer))
print('='*(len(getal)+1))
print(' '+ str(som))
    
    
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Barend Vandenbussche/mathemagisch.py"",""fullName"":""Barend Vandenbussche"",""id"":""7838"",""status"":""correct"",""submissionID"":""5993715"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T11:55:45.000Z"",""labels"":""chem""}"
627,/home/maxiem/Downloads/files/Marte Meeusen/mathemagisch.py,"getal = input()
m = len(getal) + 1
index = 0
resultaat = 0
for i in range(len(getal)):
    x = getal[:index] + getal[index+1:]
    index += 1
    y = int(x)
    if i == len(getal) - 1:
        print(f""+{y:>{len(getal)}d}"")
    else:
        print(f""{y:>{m}d}"")
    resultaat += y
print(m * '=')
resultaat = str(resultaat)
print(f""{resultaat:>{m}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Marte Meeusen/mathemagisch.py"",""fullName"":""Marte Meeusen"",""id"":""12084"",""status"":""correct"",""submissionID"":""6010800"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:15:40.000Z"",""labels"":""bcbt""}"
628,/home/maxiem/Downloads/files/Mireau Lijbaert/mathemagisch.py,"nmbr = str(input(""getal: ""))
uit = 0
n = 0

while n < len(nmbr):
    rem_nmbr = nmbr[:n] + nmbr[n+1:]
    uit += int(rem_nmbr)
    if int(rem_nmbr) == 0:
        rem_nmbr = ""0""
    else:
        rem_nmbr = rem_nmbr.lstrip(""0"")
    if n < len(nmbr) - 1:
        space = ((len(nmbr) + 1) - len(rem_nmbr)) * "" ""
        print(space+rem_nmbr)
    else:
        space = (len(nmbr) - len(rem_nmbr)) * "" ""
        print(""+""+space+rem_nmbr)
    n += 1
eq = (len(nmbr) + 1)*""=""
print(eq)
print(f"" {uit}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Mireau Lijbaert/mathemagisch.py"",""fullName"":""Mireau Lijbaert"",""id"":""12201"",""status"":""correct"",""submissionID"":""5982068"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T00:05:00.000Z"",""labels"":""chem""}"
629,/home/maxiem/Downloads/files/Femke Muys/mathemagisch.py,"
import string

GetalOpgave = input()
Getal=int(GetalOpgave)
AantalCijfersInGetal=0
AantalCijfersInGetal= int(len(GetalOpgave))
Positie= 0
GetalOpgaveTussenGetal=''
Som=0
ResultatenLijn=""=""
Uitlijnen=""""

for cijfer in GetalOpgave:
    GetalOpgaveTussenGetal=GetalOpgave
    GetalOpgaveTussenGetal=GetalOpgaveTussenGetal[:Positie]+''+GetalOpgaveTussenGetal[Positie+1:]
    while GetalOpgaveTussenGetal[0]=='0' and len(GetalOpgaveTussenGetal)>1:
        GetalOpgaveTussenGetal=GetalOpgaveTussenGetal[1:]
        Uitlijnen+="" ""
    GetalOpgaveTussenGetal=Uitlijnen+GetalOpgaveTussenGetal
    Uitlijnen=''
    Som+=int(GetalOpgaveTussenGetal)
    Positie+=1
    ResultatenLijn+=""=""
    if Positie==AantalCijfersInGetal:
        print(""+ ""+GetalOpgaveTussenGetal) 
    else:
        print(""  ""+GetalOpgaveTussenGetal)
print(ResultatenLijn)
print("" ""+str(Som))",( program ( expression_statement ( import ) ( ERROR ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( string ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Femke Muys/mathemagisch.py"",""fullName"":""Femke Muys"",""id"":""12197"",""status"":""correct"",""submissionID"":""6012593"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T16:52:01.000Z"",""labels"":""chem""}"
630,/home/maxiem/Downloads/files/James Geldhof/mathemagisch.py,"getal = str(input())

som = 0
n = 0
lengte_getal = len(getal)
k = 0


for cijferke in range(lengte_getal):
    volgende = getal[:cijferke] + getal[cijferke+1:]

    som += int(volgende)
    volgende = round(int(volgende))
    if cijferke == lengte_getal - 1:
        volgende = f'+ {str(round(int(volgende)))}'
        print(volgende.rjust(lengte_getal+1))
    else:
        volgende = f'  {str(round(int(volgende)))}'
        print(volgende.rjust(lengte_getal+1))

print((lengte_getal + 1) * '=')
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""James Geldhof/mathemagisch.py"",""fullName"":""James Geldhof"",""id"":""12110"",""status"":""correct"",""submissionID"":""6023444"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T12:37:39.000Z"",""labels"":""bcbt""}"
631,/home/maxiem/Downloads/files/Lore Lamote/mathemagisch.py,"m = input(""Getal (minstens uit 4 letters): "")
n = len(m)

x = 0
som = 0
string = '='

for positie in range(n):
    nieuw_getal = m[:positie] + m[positie + 1:]
    som += int(nieuw_getal)
    if positie == n - 1:
        print(f'+ {int(nieuw_getal)}')
    else:
        print(f""{int(nieuw_getal):>{n + 1}d}"")

print(string * (len(m) + 1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lore Lamote/mathemagisch.py"",""fullName"":""Lore Lamote"",""id"":""12202"",""status"":""correct"",""submissionID"":""6012112"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T16:21:04.000Z"",""labels"":""geog""}"
632,/home/maxiem/Downloads/files/Tijs Vandenneucker/mathemagisch.py,"getal = input()
lengte_getal = len(getal)
som = 0
gebruik_getal = getal
c = 0
for x in range(lengte_getal):
    if x != lengte_getal - 1:
        gebruik_getal = gebruik_getal[0:x] + gebruik_getal[x+1:]
        while gebruik_getal[c] == '0' and len(gebruik_getal) != 1:
            gebruik_getal = gebruik_getal[0:c] + gebruik_getal[c+1:]
        c = 0
        print(f""{gebruik_getal:>{lengte_getal + 1}s}"")
        som += int(gebruik_getal)
        gebruik_getal = getal
    else:
        gebruik_getal = gebruik_getal[0:x] + gebruik_getal[x + 1:]
        som += int(gebruik_getal)
        gebruik_getal = str(gebruik_getal)
        print(f'+ {gebruik_getal}')

aantal_gelijkaan = (lengte_getal +1) * '='
print(aantal_gelijkaan)
print(f""{str(som):>{lengte_getal + 1}s}"")
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Tijs Vandenneucker/mathemagisch.py"",""fullName"":""Tijs Vandenneucker"",""id"":""12204"",""status"":""correct"",""submissionID"":""5992896"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T10:48:21.000Z"",""labels"":""chem""}"
633,/home/maxiem/Downloads/files/Eva De Mits/mathemagisch.py,"digit = (input())
index = 0
sum = 0

while index < len(digit) - 1:
    # per line: m[index] exchanged by m[index-1]
    integer = int(digit[:index] + digit[index+1:])
    sum += integer
    print(f""{str(integer):>{len(digit)+1}s}"")
    index += 1
integer = int(digit[:len(digit) - 1])
sum += integer
print(f'+ {integer}')
print((len(digit) + 1) * ""="")
print(f""{str(sum):>{len(str(sum)) + 1}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( ERROR ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( subscript_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Eva De Mits/mathemagisch.py"",""fullName"":""Eva De Mits"",""id"":""11094"",""status"":""correct"",""submissionID"":""5999919"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T22:20:19.000Z"",""labels"":""geog""}"
634,/home/maxiem/Downloads/files/Akke De Boever/mathemagisch.py,"m = str(input('getal met minstens vier cijfers'))
som = 0
tijdelijk =  ''
b = 0
if len(m) >= 4:
    for i in range(len(m)):
        getal = m[i]
        tijdelijk = m[:i] + m[i + 1:]
        tijdelijk = int(tijdelijk)
        b = len(str(tijdelijk))
        som += int(tijdelijk)
        if i == len(m) - 1:
            print('+' + (len(m) - b) * ' ' + f'{tijdelijk}')
        else:
            print(((len(m) + 1) - b) * ' ' + f'{tijdelijk}')
            
    print((len(m) + 1) * '=')
    print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( string ) ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( identifier ) ) ) ( string ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Akke De Boever/mathemagisch.py"",""fullName"":""Akke De Boever"",""id"":""12206"",""status"":""correct"",""submissionID"":""6030191"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:25:54.000Z"",""labels"":""chem""}"
635,/home/maxiem/Downloads/files/Roselien Verhaegen/mathemagisch.py,"getal = input()
positie = 0
som = 0
for positie in range(len(getal)):
    if positie == len(getal) - 1:
        x = getal[0:positie] + getal[positie + 1:len(getal)]
        som += int(x)
        print(f""+ {x}"")
    else: 
        x = getal[0:positie] + getal[positie+1:len(getal)]
        som += int(x)
        y = x[0]
        aantal_nullen = 0
        while y == ""0"" and aantal_nullen < len(x) - 1:
            aantal_nullen += 1
            y = x[aantal_nullen]
        x = ("" "" * aantal_nullen) + x[aantal_nullen:]
        print(f'  {x}')
print(""="" * (len(getal)+ 1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( string ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Roselien Verhaegen/mathemagisch.py"",""fullName"":""Roselien Verhaegen"",""id"":""12034"",""status"":""correct"",""submissionID"":""6013604"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:00:13.000Z"",""labels"":""bcbt""}"
636,/home/maxiem/Downloads/files/Karen Desmedt/mathemagisch.py,"# gegevens in voeren
cijfer = input()
lengte = len(cijfer)
totaal = 0
for i in range(lengte):
    nummer = cijfer[:i] + cijfer[i + 1:]
    totaal += int(nummer)
    nummer = nummer.lstrip(""0"")
    if i == lengte - 1:
        print(f'+ {nummer}')
    else:
        if nummer == '':
            nummer = 0
        print(f'{nummer:>{lengte + 1}}')

print((lengte + 1)*'=')
print(f' {totaal}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Karen Desmedt/mathemagisch.py"",""fullName"":""Karen Desmedt"",""id"":""12208"",""status"":""correct"",""submissionID"":""5983000"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T08:50:10.000Z"",""labels"":""chem""}"
637,/home/maxiem/Downloads/files/Geike Heremans/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input('Hoeveel bedraagt het getal?')

n = len(getal)
totaal = 0

for i in range(n):
    nummer = getal[:i]+getal[i+1:]
    totaal += int(nummer)
    nummer = nummer.lstrip(""0"")
    if i == n - 1:
        print(f'+ {nummer}')
    else:
        if nummer == """":
            nummer = 0
        print(f'{nummer:>{n + 1}}')

print((n+1)*'=')
print(f' {totaal}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Geike Heremans/mathemagisch.py"",""fullName"":""Geike Heremans"",""id"":""12091"",""status"":""correct"",""submissionID"":""6010533"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:02:27.000Z"",""labels"":""bcbt""}"
638,/home/maxiem/Downloads/files/Wouter Ooms/mathemagisch.py,"cijfer = input()
lengte = len(cijfer)

totaal = 0
for i in range(lengte):
    nummer = cijfer[:i] + cijfer[i+1:]
    totaal += int(nummer)
    nummer = nummer.lstrip(""0"")
    if i == lengte -1:
        print(f'+ {nummer}')
    else:
        if nummer == '':
            nummer = 0
        print(f'{nummer:>{lengte + 1}}')

print((lengte + 1)*'=')
print(f' {totaal}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Wouter Ooms/mathemagisch.py"",""fullName"":""Wouter Ooms"",""id"":""12210"",""status"":""correct"",""submissionID"":""6028423"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T14:59:55.000Z"",""labels"":""chem""}"
639,/home/maxiem/Downloads/files/Kobe Scherpereel/mathemagisch.py,"import string

getal = str(input())
n = len(getal)
som = 0

for i in range(n):
    regel = getal[0:i] + getal [i + 1:]
    som += int(regel)
    l = len(regel)

    if i < n - 1:
        regel = str(regel).lstrip('0')
        if regel == '':
            regel = '0'
        print(f' {regel:>{l + 1}s}')

    else:
        print(f'+ {regel:>{l}s}')
        
print(""="" * (n +1))
print(f' {som}')
",( program ( expression_statement ( import ) ( ERROR ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Kobe Scherpereel/mathemagisch.py"",""fullName"":""Kobe Scherpereel"",""id"":""12209"",""status"":""correct"",""submissionID"":""6019147"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:11:03.000Z"",""labels"":""chem""}"
640,/home/maxiem/Downloads/files/Mira Van Eesbeek/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input()


som = 0
lengte = len(getal)

for i in range(lengte):
    output = getal[:i] + getal[i+1:]
    output = int(output)
    som += output
    output = str(output)
    if i == lengte - 1:
        print(f'+ {output}')
    else:
        if output == """":
            output = 0
        print(f""{output:>{lengte + 1}s}"")

print((lengte + 1) * '=')
som = str(som)
print(f""{som:>{lengte + 1}s}"")


",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Mira Van Eesbeek/mathemagisch.py"",""fullName"":""Mira Van Eesbeek"",""id"":""12112"",""status"":""correct"",""submissionID"":""6029904"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:13:33.000Z"",""labels"":""bcbt""}"
641,/home/maxiem/Downloads/files/Elien Vrancken/mathemagisch.py,"#invoer
getal = int(input())

getal = str(getal)
gedeelte_regel_2 = int(0) #voor for loop

#eerste keer
regel_1 = getal[1:len(getal)+1]
stop = 'nee'
if int(getal[1]) == int(0):
    for i in range(len(getal)-2):
        if regel_1[i] == str(0) and stop == ""nee"":
            regel_1 = str(regel_1[:i]) + str(str(' ') + str(regel_1[i+1:]))
        elif regel_1[i] != 0:
            stop = 'ja'

print(f'  {regel_1}')

#volgende keren
for i in range(1, len(getal)-1):

    gedeelte_regel = getal[0] + getal[1:i] + getal[i+1:len(getal)]
    print(f'  {gedeelte_regel}')
    gedeelte_regel_2 += int(gedeelte_regel)

#laatste keer
regel_3 = getal[0:len(getal)-1]
print(f'+ {regel_3}')

#===== rij
isgelijkaan = '='*(len(getal)+1)
print(isgelijkaan)

#uiteindelijke som
som = int(regel_1) + int(gedeelte_regel_2) + int(regel_3)
print(f' {som}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Elien Vrancken/mathemagisch.py"",""fullName"":""Elien Vrancken"",""id"":""12214"",""status"":""correct"",""submissionID"":""5848649"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-08T06:37:42.000Z"",""labels"":""geol""}"
642,/home/maxiem/Downloads/files/Noor Ghesquiere/mathemagisch.py,"oorsprget = input(""welk getal bereken je?"")
lengte = len(oorsprget)
breedte = int(lengte + 1)
som = 0

index = 0
for aantal in range(lengte):
     #hoe zorg ik ervoor dat enkel die index vervangen \ wordt en niet alle zelfde karakters?
    rij = oorsprget[0:aantal] + oorsprget[aantal+1:lengte]
    if aantal == lengte-1:
        som += int(rij)
        print(""+"", int(rij))
    else:
        print(f""{int(rij):>{breedte}d}"")
        som += int(rij)
        index += 1


streep = (lengte + 1)* '='
print(streep)
print("""", som)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( ternary_expression ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ( binary_expression ( identifier ) ( ERROR ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Noor Ghesquiere/mathemagisch.py"",""fullName"":""Noor Ghesquiere"",""id"":""12203"",""status"":""correct"",""submissionID"":""5965267"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T13:44:57.000Z"",""labels"":""geog""}"
643,/home/maxiem/Downloads/files/Norah Roels/mathemagisch.py,"full_number = input('Volledige cijfer: ')
length = len(full_number)
i = 0
addzeros = 0
sumof = 0
for i in range(length-1):
    number = full_number[:i] + full_number[i+1:]
    number = int(number)
    sumof += number
    number = str(number)
    if len(number) < (length-1):
        addzeros = (length) - len(number)
        addzeros *= ' '
        print(addzeros, number)
    else:
        print(' ', number)

number = full_number[:i+1] + full_number[i+2:]
number = int(number)
sumof += number
print('+', number)
equal_signs = (length + 1) * '='
print(equal_signs)
print('', sumof)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Norah Roels/mathemagisch.py"",""fullName"":""Norah Roels"",""id"":""12215"",""status"":""correct"",""submissionID"":""5996008"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T14:24:28.000Z"",""labels"":""chem""}"
644,/home/maxiem/Downloads/files/Judith Porters/mathemagisch.py,"m = str(input())  # input is in string
lengte = len(m)  # lengte van de input
lengte >= 4
optelling = 0
for i in range(lengte):
    getal = m[:i] + m[i + 1:]
    lengte_getal = len(getal)
    getali = int(getal)
    if (i == lengte - 1):
        print('+' + (lengte - lengte_getal) * '' + f'{getali:{lengte}d}')
    else:
        outputgetal = ((lengte + 1) - lengte_getal) * ''  # juiste uitlijning
        print(' ' + outputgetal + f'{getali:{lengte}d}')

    getalinteger = int(getal)
    optelling += getalinteger
print((lengte + 1) * '=')
print(' ' + f'{optelling}')",( program ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ( string ) ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( else_clause ( ERROR ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ( ERROR ( string ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Judith Porters/mathemagisch.py"",""fullName"":""Judith Porters"",""id"":""12097"",""status"":""correct"",""submissionID"":""6009855"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T14:31:14.000Z"",""labels"":""bcbt""}"
645,/home/maxiem/Downloads/files/Dries De Pesseroey/mathemagisch.py,"getal = input()
lengte = len(getal)
totaal = 0

for i in range(lengte):

    nummer = getal[:i:] + getal[i+1:]
    totaal += int(nummer)
    nummer = nummer.lstrip(""0"")

    if i == lengte - 1:
        print(f'+ {nummer}')
    else:
        if nummer == '':
            nummer = 0
        print(f'{nummer:>{lengte + 1}}')

print((lengte + 1) * '=')
print(f' {totaal}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ( ERROR ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Dries De Pesseroey/mathemagisch.py"",""fullName"":""Dries De Pesseroey"",""id"":""12207"",""status"":""correct"",""submissionID"":""5988141"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T16:32:04.000Z"",""labels"":""chem""}"
646,/home/maxiem/Downloads/files/Tim Biesemans/mathemagisch.py,"m = input()
som = 0
lengte = len(m)
for i in range(lengte):
    getal1 = m[:i]
    getal2 = m[i+1:]
    getal3 = int(getal1 + getal2)
    som += getal3
    if i != lengte-1:
        print((f'{getal3}').rjust(lengte+1))
    else:
        print(f'+ {getal3}')
        print((lengte+1) * '=')
print(str(som).rjust(lengte+1))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( parenthesized_expression ( ERROR ( identifier ) ) ( string ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Tim Biesemans/mathemagisch.py"",""fullName"":""Tim Biesemans"",""id"":""12216"",""status"":""correct"",""submissionID"":""5992360"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T10:06:03.000Z"",""labels"":""chem""}"
647,/home/maxiem/Downloads/files/Rémi Vandewalle/mathemagisch.py,"getal = input()
som = 0
a = 0
for i in range(len(getal)):
    if i != (len(getal) - 1):
        omgevormd = getal[0:i] + getal[i+1:]
        if omgevormd[0] == '0':
            a = omgevormd.lstrip('0')
            if a == '':
                print((' ' * (len(getal) - 1)), '0')
            else:
                a = int(a)
                som += a
                print(f'   {a}')
        else:
            som += int(omgevormd)
            print(f'  {omgevormd}')
            omgevormd = str(omgevormd)
    else:
        omgevormd = getal[0:i] + getal[i+1:]
        som += int(omgevormd)
        print(f'+ {omgevormd}')
        omgevormd = str(omgevormd)
print('=' * (len(getal) + 1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Rémi Vandewalle/mathemagisch.py"",""fullName"":""Rémi Vandewalle"",""id"":""12217"",""status"":""correct"",""submissionID"":""6028060"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T14:41:51.000Z"",""labels"":""geog""}"
648,/home/maxiem/Downloads/files/Hanne Claes/mathemagisch.py,"getal=str(input())
n=len(getal)
a=0
b=[]
som=0
index=0
c=0
d=0
e=0
f=0
g=[]
while a!=n:
    b.append(getal[a])
    a+=1
a=0
while f!=n-1:
    b=[]
    a=0
    while a != n:
        b.append(getal[a])
        a += 1
    del b[f]
    c=(''.join(b))
    e=int(c)
    som+=e
    f+=1
    c=c.lstrip(""0"")
    print(f'{e:>{n+1}}')


b=[]
a=0
while a != n:
    b.append(getal[a])
    a += 1
del b[f]
c=(''.join(b))
e=int(c)
som+=e
print(""+"",e)
a=0
b=[]
while a!=n+1:
    b.append(""="")
    a+=1
    c=(''.join(b))
print(c)
print(f'{som:>{n+1}}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( array ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Hanne Claes/mathemagisch.py"",""fullName"":""Hanne Claes"",""id"":""12035"",""status"":""correct"",""submissionID"":""6004048"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T10:48:19.000Z"",""labels"":""chem""}"
649,/home/maxiem/Downloads/files/Rosalia-Alba Vittiglio/mathemagisch.py,"#getal inlezen
get_str = str(input())
n = 0
som = 0
a = 0
spatie = ' '
#som berekenen
for i in get_str[:-1]:
    get = get_str[:n] + get_str[n + 1:]
    som += int(get)
    n += 1
    if get[0] == '0':
        for s in get[:-1]:
            if s == '0':
                a += 1
            else:
                a == 0
        print(f'{spatie * (a+1)} {get[a:]}')
    else:
        print(f'  {get}')
get = get_str[:n] + get_str[n + 1:]
som += int(get)
print(f'+ {get}')
#som uitschrijven
i_s = '=' * (len(get_str)+1)
print(i_s)
print(f' {som}')",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( string ) ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Rosalia-Alba Vittiglio/mathemagisch.py"",""fullName"":""Rosalia-Alba Vittiglio"",""id"":""12211"",""status"":""correct"",""submissionID"":""5885176"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-10T10:16:10.000Z"",""labels"":""geol""}"
650,/home/maxiem/Downloads/files/Emily Blanchetot/mathemagisch.py,"getal_m = str(input())

a = 0
b = 1
aantal_tekens = 2
som = 0

for index in range(len(getal_m) - 1):
    cijfer = getal_m[:a] + getal_m[b:]
    spaties = len(getal_m) + 1

    if cijfer[0] == '0':
        cijfer = cijfer[1:]
        
    if cijfer == '000000000':
        cijfer = '0'

    print(f'{cijfer:>{spaties}s}')

    a += 1
    b += 1
    aantal_tekens += 1
    som += int(cijfer)

laatste_getal = getal_m[:(b - 1)]
totale_som = som + int(laatste_getal)

print(f'+ {laatste_getal}')
print((aantal_tekens) * '=')
print(f'{totale_som:>{spaties}d}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Emily Blanchetot/mathemagisch.py"",""fullName"":""Emily Blanchetot"",""id"":""8350"",""status"":""correct"",""submissionID"":""6026319"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:43:50.000Z"",""labels"":""geol""}"
651,/home/maxiem/Downloads/files/Razvan Oita/mathemagisch.py,"full_number = input('volledige cijfer')
lengte = len(full_number)
i = 0
addzeros = 0
sumof = 0
for i in range(lengte-1):
    number = full_number[:i] + full_number[i+1:]
    number = int(number)
    sumof += number
    number = str(number)
    if len(number) < (lengte-1):
        addzeros = (lengte) - len(number)
        addzeros *= ' '
        print(addzeros, number)
    else:
        print(' ', number)
number = full_number[:i+1] + full_number[i+2:]
number = int(number)
sumof += number
print('+', number)
equal_signs = (lengte + 1) * '='
print(equal_signs)
print('', sumof)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Razvan Oita/mathemagisch.py"",""fullName"":""Razvan Oita"",""id"":""12194"",""status"":""correct"",""submissionID"":""6015807"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T21:01:15.000Z"",""labels"":""chem""}"
652,/home/maxiem/Downloads/files/Laura Meerschaert/mathemagisch.py,"m = str(input('getal met minstens vier cijfers'))

lengte = len(m)
optelling = 0
tijdelijk = ''
h = 0
if lengte >= 4:

    for i in range(lengte):
        getal = m[i]
        tijdelijk = m[:i] + m[i+1:]
        tijdelijk = int(tijdelijk)
        h = len(str(tijdelijk))
        optelling += int(tijdelijk)
        if i == lengte - 1:
            print('+' + (lengte - h) * ' ' + f'{tijdelijk}')
        else:
            print(((lengte + 1) - h) * ' ' + f'{tijdelijk}')

    print((lengte+1) * '=')
    print(f' {optelling}')






",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ( string ) ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ( string ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Laura Meerschaert/mathemagisch.py"",""fullName"":""Laura Meerschaert"",""id"":""12044"",""status"":""correct"",""submissionID"":""5999133"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T19:18:50.000Z"",""labels"":""bcbt""}"
653,/home/maxiem/Downloads/files/Thuraya Al Halawi/mathemagisch.py,"full_number = input('volledige cijfer')
lengte = len(full_number)
i = 0
addzeros = 0
sumof = 0
for i in range(lengte-1):
    number = full_number[:i] + full_number[i+1:]
    number = int(number)
    sumof += number
    number = str(number)
    if len(number) < (lengte-1):
        addzeros = (lengte) - len(number)
        addzeros *= ' '
        print(addzeros, number)
    else:
        print(' ', number)
number = full_number[:i+1] + full_number[i+2:]
number = int(number)
sumof += number
print('+', number)
equal_signs = (lengte + 1) * '='
print(equal_signs)
print('', sumof)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Thuraya Al Halawi/mathemagisch.py"",""fullName"":""Thuraya Al Halawi"",""id"":""12220"",""status"":""correct"",""submissionID"":""6015766"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:55:09.000Z"",""labels"":""chem""}"
654,/home/maxiem/Downloads/files/Lukas De Wilde/mathemagisch.py,"getal = str(input())
leng = len(getal)
som = 0
for i in range(0,len(getal)-1):
    lgetal = getal[0:i]
    rgetal = getal[i+1:]
    s = lgetal + rgetal
    while '0' in s:
        if s[0] == '0':
            s = s[1:]
        else:
            break
    if s == '':
        lengt = len(s)
        spatie = leng - lengt 
        spatie = spatie*' '
        print(f'{spatie}0')
    else:
        lengt = len(s)
        spatie = leng - lengt +1
        spatie = spatie*' '
        som += int(s)
        print(f'{spatie}{s}')
lgetal = getal[0:len(getal)-1]
som += int(lgetal)
print(f'+ {lgetal}')
lengte = len(str(som)) + 1
print(lengte*'=')
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( string ) ( identifier ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( break_statement ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lukas De Wilde/mathemagisch.py"",""fullName"":""Lukas De Wilde"",""id"":""8379"",""status"":""correct"",""submissionID"":""5847818"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-07T20:43:05.000Z"",""labels"":""chem""}"
655,/home/maxiem/Downloads/files/Sarah Strickx/mathemagisch.py,"getal = str(input())
lengte = len(getal)
som = 0
positie = 0
exit = 1

for positie, karakter in enumerate(getal):
    if positie != lengte-1:
        string = '  '
    else:
        string = '+ '
    for index in range(lengte):
        if index != positie:
            string += getal[index]
    if string[2] == '0':
        exit = 0
        counter = 0
    while exit == 0:
        string = string[0:2] + string[3:]
        counter += 1
        if string[2] != '0' or len(string) == 3:
            exit = 1
            string2 = counter*' '
            string = string2 + string
    print(string)
    som += int(string[1:])
print('='*(lengte+1))
som2 = ' '
som2 += str(som)
print(som2)


",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( number ) ) ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Sarah Strickx/mathemagisch.py"",""fullName"":""Sarah Strickx"",""id"":""7934"",""status"":""correct"",""submissionID"":""6034028"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:49:33.000Z"",""labels"":""geog""}"
656,/home/maxiem/Downloads/files/Sigrid Verhelst/mathemagisch.py,"import string
#input
getal = input()
som = 0
j = 1

#aantal keer dat loop doorlopen zal moeten worden = lengte van het getal
aantal = len(getal)
uitlijnen = aantal + 1

for i in range(0, aantal):
    nieuw_getal = getal[:i] + getal[(i+1):]
    som += int(nieuw_getal)
    while len(nieuw_getal) > 1 and nieuw_getal[0] == ""0"":
        j += 1
        nieuw_getal = getal[:i] + getal[(i+j):]
    if i == (aantal-1):
        nieuw_getal = ""+ "" + nieuw_getal
    print(f""{nieuw_getal:>{uitlijnen}s}"")
    if i == (aantal-1):
        print((aantal+1) * ""="")
        print(f""{str(som):>{uitlijnen}s}"")",( program ( expression_statement ( import ) ( ERROR ( identifier ) ( ERROR ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( identifier ) ) ( subscript_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Sigrid Verhelst/mathemagisch.py"",""fullName"":""Sigrid Verhelst"",""id"":""9346"",""status"":""correct"",""submissionID"":""5995770"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T14:07:15.000Z"",""labels"":""doct""}"
657,/home/maxiem/Downloads/files/Matteo Vereertbrugghen/mathemagisch.py,"number = (input('give number: '))
n = len(number)
som = 0
for i in range(n):
    if i == 0:
        new_number = int(number[1:n])
        som += new_number
        print(f""{str(new_number):>{n + 1}s}"")
    elif i != 0 and i + 1 != n:
        new_number = int(number[0:i] + number[i + 1: n])
        som += new_number
        print(f""{str(new_number):>{n + 1}s}"")
    elif i + 1 == n:
        new_number = int(number[0:n - 1])
        som += new_number
        print(f""{'+'}{str(new_number):>{n}s}"")
print((n + 1) * ""="")
print(f""{str(som):>{n + 1}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Matteo Vereertbrugghen/mathemagisch.py"",""fullName"":""Matteo Vereertbrugghen"",""id"":""12236"",""status"":""correct"",""submissionID"":""5950336"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-14T14:15:04.000Z"",""labels"":""fyss""}"
658,/home/maxiem/Downloads/files/Era-Alexandra Decuyper/mathemagisch.py,"total = input(""Enter a number: "")
length = len(total)
equal = (length+1) * ""=""
sum = 0

for i in range(0,length):
    index = i
    number = total[0:index] + total[index + 1:]
    sum += int(number)
    if i == length-1:
        ref = '+'
        print(f""{ref}{int(number):>{length}}"")
    else:
        print(f""{int(number):>{length+1}}"")

print(equal, f""{sum:>{length+1}}"", sep=""\n"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ( identifier ) ) ( string ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Era-Alexandra Decuyper/mathemagisch.py"",""fullName"":""Era-Alexandra Decuyper"",""id"":""12241"",""status"":""correct"",""submissionID"":""5972189"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T20:37:46.000Z"",""labels"":""biol""}"
659,/home/maxiem/Downloads/files/Morgan Vervoort/mathemagisch.py,"# input
digit = input()

# code
digit = str(digit)
sum = 0

# go over every number in 'digit'
for index, value in enumerate(digit):
    # set the string to a list
    new_digit = list(digit)
    # delete the value on the index that you have
    new_digit[index] = ''
    # set it back to a string
    new_digit = """".join(new_digit)

    # when you are at the last number, a plus sign must be added
    if index == len(digit)-1:
        # remove all the zeroes at the beginning of the word
        new_digit = new_digit.lstrip('0')
        # the length of every output must be the lenght of 'digit' plus 1 (when len = 5; :>5s)
        print(f""+{new_digit:>{len(digit)}s}"")
    # every other number
    else:
        new_digit = new_digit.lstrip('0')
        # if you have removed all the zeroes, but there are only zeroes make sure one zero is returned
        if len(new_digit) == 0:
            new_digit = '0'
        print(f""{new_digit:>{len(digit) +1}s}"")
    # total sum of all the digits must also be printed thus add this sum
    sum += int(new_digit)

# print '=' before printing the sum
print('=' * (len(digit) + 1))
print(f"" {sum}"")",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( unary_expression ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( string ) ( identifier ) ) ( expression_statement ( call_expression ( number ) ( arguments ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ( ERROR ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( this ) ) ( expression_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( ERROR ( string ) ) ) ),"{""filename"":""Morgan Vervoort/mathemagisch.py"",""fullName"":""Morgan Vervoort"",""id"":""5324"",""status"":""correct"",""submissionID"":""6005253"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T11:52:11.000Z"",""labels"":""geol""}"
660,/home/maxiem/Downloads/files/Nishwa Fayyaz/mathemagisch.py,"m = input()
n = len(m)

if m.count('0') == n-1:
    print(f""{'':<2s}{m[1:n].replace('0',' ',n-2)}"")
elif m.find('0') == 1:
    print(f""{'':<2s}{m[1:n].replace('0',' ',1)}"")
else:
    print(f""{'':<2s}{m[1:n]}"")

sum = int(m[1:])

for i in range(1, n):
    k = m[:i] + m[i+1:]
    sum += int(k)
    if i != n-1:
        print(f""{'':<2s}{k}"")
    else:
        print(f""{'+':<2s}{k}"")
sum_line = '=' * (n+1)
print(sum_line)
print(f""{'':<1s}{sum}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( member_expression ( identifier ) ( ERROR ( identifier ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( ERROR ( identifier ) ( string ) ) ( string ) ( ERROR ( string ) ( string ) ) ) ),"{""filename"":""Nishwa Fayyaz/mathemagisch.py"",""fullName"":""Nishwa Fayyaz"",""id"":""12247"",""status"":""correct"",""submissionID"":""6026330"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:44:09.000Z"",""labels"":""biol""}"
661,/home/maxiem/Downloads/files/Polina Mironova/mathemagisch.py,"number = str(input())
sum = 0

for char in range(0, len(number)):
    new_number = number[0:char] + number[char+1:]
    new_number = int(new_number)
    if char == len(number)-1:
        print(f'+ {new_number}')
    else:
        wid = len(number) + 1
        print(str(new_number).rjust(wid))

    sum += int(new_number)
print((len(number)+1)*'=')
print(f' {sum}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Polina Mironova/mathemagisch.py"",""fullName"":""Polina Mironova"",""id"":""12248"",""status"":""correct"",""submissionID"":""5993726"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T11:56:11.000Z"",""labels"":""biol""}"
662,/home/maxiem/Downloads/files/Killian Cnudde/mathemagisch.py,"m = str(input())
length = len(m)
total = 0

for i in range(len(m)):
    n = m[:i] + m[i+1:]
    if n[0] == '0':
        space = len(n) - len(str(int(n)))
        n = ' ' * space + str(int(n))
    total += int(n)
    if i == length - 1:
        print('+ {}'.format(n))
    else:
        print('  {}'.format(n))
x = length + 1

print('=' * x)
print(' {}'.format(total))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Killian Cnudde/mathemagisch.py"",""fullName"":""Killian Cnudde"",""id"":""12250"",""status"":""correct"",""submissionID"":""6011525"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:49:57.000Z"",""labels"":""biol""}"
663,/home/maxiem/Downloads/files/Emma de Meij/mathemagisch.py,"#input getal
getal = input()
som_tussenwaarden_int = 0
l = len(getal) + 1
ll = l-3

#schrappen + optellen van de tussenwaarden
for i in range(0, l - 1):
    tussenwaarde_str = getal[0:i] + getal[i + 1:]

    eerste_waarde = tussenwaarde_str[0]

    if eerste_waarde == '0':
        tussenwaarde_str = tussenwaarde_str.replace('0', '', ll)

    if i < (l - 2):
        print(f""{tussenwaarde_str:>{l}s}"")
    else:
        print(f""+ {tussenwaarde_str}"")

    tussenwaarde_int = int(tussenwaarde_str)

    som_tussenwaarden_int += tussenwaarde_int

opvullijn = '=' * (l)
print(opvullijn)
som_tussenwaarden_str = str(som_tussenwaarden_int)
print(f""{som_tussenwaarden_str:>{l}s}"")",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Emma de Meij/mathemagisch.py"",""fullName"":""Emma de Meij"",""id"":""12253"",""status"":""correct"",""submissionID"":""6004710"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T11:35:07.000Z"",""labels"":""keuz""}"
664,/home/maxiem/Downloads/files/Jana De Ruyter/mathemagisch.py,"getal = str(input())
n = len(getal)
som = 0

for i in range(n-1):
    getal2 = int(getal[:i]+getal[i+1:])
    print('{:>{n}}'.format(getal2, n=n+1))
    som += int(getal2)

print(f'+ {getal[:-1]}')
som += int(getal[:-1])
lijn = """"

for x in range(n+1):
    lijn += '='
print(lijn)

print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jana De Ruyter/mathemagisch.py"",""fullName"":""Jana De Ruyter"",""id"":""12255"",""status"":""correct"",""submissionID"":""5989984"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T20:53:17.000Z"",""labels"":""chem""}"
665,/home/maxiem/Downloads/files/Florian Van Hecke/mathemagisch.py,"woord = str(input())
n = len(woord)
magischesom = 0
for i in range(n):
    x1 = woord[:i]
    x2 = woord[i+1:]
    plus ='' if i < (n-1) else '+ '

    print(f'{plus+str(int(x1+x2)):>{n+1}s}')
    magischesom += int(x1+x2)

print((n+1) * '=')
print(f'{str(magischesom):>{n+1}s}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( ERROR ( identifier ) ) ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( ERROR ( string ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( ERROR ( identifier ) ) ( unary_expression ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( identifier ) ) ( ERROR ( string ) ) ( expression_statement ( string ) ) ( statement_block ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( binary_expression ( object ( shorthand_property_identifier ) ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ) ),"{""filename"":""Florian Van Hecke/mathemagisch.py"",""fullName"":""Florian Van Hecke"",""id"":""12259"",""status"":""correct"",""submissionID"":""5968702"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T15:31:49.000Z"",""labels"":""biol""}"
666,/home/maxiem/Downloads/files/Yue Zehui/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
number=input()
z=0
for i in range (1,len(number)):
    if i==1:
        a=int(number[i:len(number)])
        print(f""  {a}"".rjust(len(number)+1))
        z+=a
        i+=1
    else:
        a=int((number[0:i-1]+number[i:len(number)]))
        print(f""  {a}"")
        z+=a
        i+=1
z=z+int(number[0:-1])
print(f""+ {number[0:-1]}"")
print(""=""*(len(number)+1))
print(f"" {z}"")
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Yue Zehui/mathemagisch.py"",""fullName"":""Yue Zehui"",""id"":""11746"",""status"":""correct"",""submissionID"":""6014408"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:58:46.000Z"",""labels"":""stat""}"
667,/home/maxiem/Downloads/files/Maartje Cathelyn/mathemagisch.py,"digit = input()
length = len(digit)
total = 0


for index in range(length):
    ref = '+' if index == (length-1) else ''
    ref2 = 0 if index == (length-1) else 1
    new_digit = digit[:index] + digit[index+1:]
    print(f'{ref}{int(new_digit):>{length+ref2}d}')
    total += int(new_digit)
print((length+1) * '=')
print(f'{total:>{length+1}d}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( string ) ) ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Maartje Cathelyn/mathemagisch.py"",""fullName"":""Maartje Cathelyn"",""id"":""12261"",""status"":""correct"",""submissionID"":""5997673"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T16:24:54.000Z"",""labels"":""biol""}"
668,/home/maxiem/Downloads/files/Emma Nuyts/mathemagisch.py,"
number_str = input()
length = len(number_str)

line_number = 0
sum = 0

while line_number != length - 1:
    line = number_str[:line_number] + number_str[line_number + 1:]
    sum += int(line)
    line_number += 1
    line = line.lstrip('0')
    if line == '':
        line = '0'
    print(f'{line:>{length + 1}s}')

#last line has different formatting
line = number_str[:line_number] + number_str[line_number + 1:]
sum += int(line)
print(f'+{line:>{length}s}')


print((length + 1) * '=')
print(f'{str(sum):>{length + 1}s}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Emma Nuyts/mathemagisch.py"",""fullName"":""Emma Nuyts"",""id"":""12262"",""status"":""correct"",""submissionID"":""5959970"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T11:52:33.000Z"",""labels"":""keuz""}"
669,/home/maxiem/Downloads/files/Ada Coudenys/mathemagisch.py,"numb = input('enter number')
leng = len(numb)
final = 0

for i in range(0,leng):
    numb2 = numb[:i] + numb[i+1:]
    numb3 = int(numb2)
    numb4 = str(numb3)
    final += numb3

    answer = (("" "" * (len(numb) - len(numb4))) + "" "")
    if i+1 == leng : print(""+ {}"".format(numb3))
    else: print(answer+numb4)


print('=' * (leng + 1))
print("" {}"".format(final))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Ada Coudenys/mathemagisch.py"",""fullName"":""Ada Coudenys"",""id"":""12263"",""status"":""correct"",""submissionID"":""6012162"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T16:24:01.000Z"",""labels"":""biol""}"
670,/home/maxiem/Downloads/files/Brecht de Kezel/mathemagisch.py,"cijfer = input()
l = len(cijfer)
totaal = int(0)

for y in range(l):
    cijfer_y = ''
    for x in range(0,l):
        if x != y:
            cijfer_y += cijfer[x]
    if y < l- 1:
        print(f""{str(int(cijfer_y)):>{l+1}s}"")
        totaal += int(cijfer_y)
    if y == l -1:
        print(f""+ {str(int(cijfer_y)):>6s}"")
        totaal += int(cijfer_y)
    y += 1
print(f""{'='*(l+1)}"")
totaal = str(totaal)
print(f""{totaal:>{l+1}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Brecht de Kezel/mathemagisch.py"",""fullName"":""Brecht de Kezel"",""id"":""12264"",""status"":""correct"",""submissionID"":""5978017"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T13:13:48.000Z"",""labels"":""biol""}"
671,/home/maxiem/Downloads/files/Bram De Vilder/mathemagisch.py,"number = str(input(""enter a number: ""))

x = 0
sumnum = 0
lines = (len(number)+1)*str(""="")

for index in range(0, len(number)-1):
    if x == 0:
        out = number[1::1]
    else:
        out = number[0:x:1] + number[x+1::1]
    x += 1
    out_int = int(out)
    sumnum += out_int
    out = str(out_int)

    while len(out) != (len(number) - 1):
        out = "" "" + out
    print(""  {}"".format(out))

out = number[0:x:1]
out_int = int(out)
sumnum += out_int
print(""+ {}\n{}\n {}"".format(out, lines, sumnum))












",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( number ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ( escape_sequence ) ( escape_sequence ) ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ( identifier ) ) ) ) ) ) ),"{""filename"":""Bram De Vilder/mathemagisch.py"",""fullName"":""Bram De Vilder"",""id"":""12260"",""status"":""correct"",""submissionID"":""5897183"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-11T08:25:22.000Z"",""labels"":""biol""}"
672,/home/maxiem/Downloads/files/Lennert Van Steendam/mathemagisch.py,"getal = input("""")
index = 0
z = 0
voorloopnullen = False
for _ in range(len(getal) - 1):
    x = ''.join(getal[i] for i in range(len(getal)) if i != index)
    if x[0] == '0':
        voorloopnullen = True
        if voorloopnullen:
            x = x.lstrip(""0"")
            if len(x) == len(getal) - 2:
                x = x.rjust(len(getal) - 1)
            elif x == """":
                x = ""0""
                x = x.rjust(len(getal) - 1)
    y = int(x)
    print(f'  {str(x)}')
    index += 1
    z += y
m = ''.join(getal[i] for i in range(len(getal) - 1) if i != -1)
print(f'+ {m}')
print('=' * (len(getal) + 1))
print(f' {z + int(m)}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( unary_expression ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lennert Van Steendam/mathemagisch.py"",""fullName"":""Lennert Van Steendam"",""id"":""7978"",""status"":""correct"",""submissionID"":""6029121"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:37:18.000Z"",""labels"":""chem""}"
673,/home/maxiem/Downloads/files/Robin De Wulf/mathemagisch.py,"# Input variables
big_number = str(input('Type a big number with at least 5 numbers: '))
x = 0
stripes = (len(big_number) * str('=')) + (1 * str('='))
end_sum = 0

# Lööp
for index in range(0, len(big_number)-1):
    if x == 0:
        word = big_number[1::1]
    else:
        word = big_number[0:x:1] + big_number[x+1::1]
    word_int = int(word)
    end_sum += word_int
    word = str(word_int)

    while len(word) != (len(big_number)-1):
        word = ' ' + word

    print(""  {}"" .format(word))
    x += 1

word = big_number[0:x:1]
word_int = int(word)
end_sum += word_int
print(""+ {}\n{}\n {}"".format(word, stripes, end_sum))
",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( parenthesized_expression ( binary_expression ( number ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( number ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ( escape_sequence ) ( escape_sequence ) ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ( identifier ) ) ) ) ) ) ),"{""filename"":""Robin De Wulf/mathemagisch.py"",""fullName"":""Robin De Wulf"",""id"":""11802"",""status"":""correct"",""submissionID"":""5875377"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-09T13:29:50.000Z"",""labels"":""biol""}"
674,/home/maxiem/Downloads/files/Myrthe De Puydt/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = str(input('enter number: '))
list_allnumbers = []
n = len(getal)
m = n+1
i = 0
while n != 0:
    x = str(getal[:i]+getal[i+1:])
    list_allnumbers.append(int(x))
    while int(x[0]) == int(0) and len(x) != 1:
        x = x[1:]
    if n != 1:
        print('{0:>{1}}'.format(x, m))
    else:
        print('+ ' +x)
        print('='*m)
        print('{0:>{1}}'.format(sum(list_allnumbers), m))

    n -= 1
    i += 1",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( number ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ),"{""filename"":""Myrthe De Puydt/mathemagisch.py"",""fullName"":""Myrthe De Puydt"",""id"":""12265"",""status"":""correct"",""submissionID"":""5920239"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-12T15:17:13.000Z"",""labels"":""biol""}"
675,/home/maxiem/Downloads/files/Jessie Caignie/mathemagisch.py,"# input
numbre = str(input(""give a numbre with at least 4 digits""))
total = 0
l = len(numbre)

# loop in wich every digit dissapears 1 at a time

for index in range(l):
    newnumbre = numbre[:index] + numbre[index+1:] # the new number is the numbre minus 1 digit (in the loop the digit that dissapears goes from 0 to l)
    zero = l - len(str(int(newnumbre)))
    x = zero * "" ""
    total += int(newnumbre)
    newnumbre = int(newnumbre)
    if index == l-1:
        print(f'+{x}{newnumbre}')
    else:
        print(f' {x}{newnumbre}')


equal = (l+1) * ""=""
print(equal)
print(f' {total}')












",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ( ERROR ) ( identifier ) ) ( new_expression ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ) ( identifier ) ( arguments ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jessie Caignie/mathemagisch.py"",""fullName"":""Jessie Caignie"",""id"":""12266"",""status"":""correct"",""submissionID"":""6022132"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T11:38:22.000Z"",""labels"":""biol""}"
676,/home/maxiem/Downloads/files/Elke Roels/mathemagisch.py,"number = input()
length = len(number)
pos = 0
summation = 0

for char in number:
    new_number = int(str(number[:pos])+str(number[pos+1:]))
    pos += 1
    summation += new_number
    if pos != length:
        print(f""{new_number:>{length + 1}d}"")
    else:
        print(f""+{new_number:>{length}d}"")

print('=' * (length+1))
print(f""{summation:>{length+1}d}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Elke Roels/mathemagisch.py"",""fullName"":""Elke Roels"",""id"":""12268"",""status"":""correct"",""submissionID"":""6015605"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:36:52.000Z"",""labels"":""biol""}"
677,/home/maxiem/Downloads/files/Arne Verdonck/mathemagisch.py,"# Input & starting values
number = input()        # input number as a string
total = 0
sup_number = ''
# suppress digits of the number one by one and print each suppression on separate lines
length = len(number)
# number of characters (including spaces) that needs to be printed
for i in range(length):
    if i == 0:      # i = 0 means first digit in number
        sup_number = number[1:]          # first digit (number[0]) is left out
        # '123842' -> '23842' / '10654' -> '0654' / 120546 -> 20546/ 7000000 -> '000000'
        # after removal of a digit, we can get leading zeroes: 10654 -> 0654 / 7000000 -> 000000
        # we don't want to print these zeroes so we remove them with the strip-function
        sup_number = sup_number.lstrip(""0"")
        # now, all leading zeroes are gone
        # if first digit is followed only by zeroes (as in 7000000) , we want to print '        0'
        if sup_number == '':
            sup_number = '0'.rjust(length+1)
            
    else:
        sup_number = number[:i] + number[i + 1:]    # for i in range, digits are left out one by one
        # for i = 1: '123842' -> '13842' / 120546 -> 10546 /
        # for i = 2: 120546 -> 12546
    total += int(sup_number)
    if i == len(number) - 1:
        print('+' + sup_number.rjust(length))
    else:
        print(sup_number.rjust(length+1))
print((len(number)+1) * '=')
print(' ' + str(total))
",( program ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ( identifier ) ) ) ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ) ( assignment_expression ( identifier ) ( ERROR ( number ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( arguments ( subscript_expression ( identifier ) ( number ) ) ) ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( ERROR ) ( binary_expression ( string ) ( string ) ) ) ( ERROR ) ( binary_expression ( string ) ( number ) ) ) ( ERROR ) ( binary_expression ( number ) ( number ) ) ) ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( number ) ( ERROR ) ( binary_expression ( number ) ( number ) ) ) ( identifier ) ) ( number ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( string ) ( ERROR ( number ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( sequence_expression ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ( ERROR ( ERROR ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( ERROR ) ) ( assignment_expression ( identifier ) ( ERROR ( number ) ( binary_expression ( binary_expression ( string ) ( ERROR ) ( binary_expression ( string ) ( number ) ) ) ( ERROR ) ( binary_expression ( number ) ( ERROR ( ERROR ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Arne Verdonck/mathemagisch.py"",""fullName"":""Arne Verdonck"",""id"":""7583"",""status"":""correct"",""submissionID"":""6016329"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T23:07:52.000Z"",""labels"":""biol""}"
678,/home/maxiem/Downloads/files/Michiel Adams/mathemagisch.py,"getal = input()
som = 0
#for loop want fixed aantal loops
for index, figure in enumerate(getal):
    next = getal[:index] + getal[index + 1:]

    som += int(next)

    while next[0] == '0' and len(next) != 1:
        next =next[1:]

    getal_spaces =len(getal) - len(next)
    if index == len(getal) - 1:
        output = '+' + getal_spaces * ' ' + next
    else:
        output = (getal_spaces + 1) * ' ' + next
    print(output)

print(len(output)* '=', ' ' + str(som), sep='\n')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( binary_expression ( identifier ) ( string ) ) ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Michiel Adams/mathemagisch.py"",""fullName"":""Michiel Adams"",""id"":""12269"",""status"":""correct"",""submissionID"":""6030262"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:28:59.000Z"",""labels"":""biol""}"
679,/home/maxiem/Downloads/files/Yvana Van Kerckhove/mathemagisch.py,"cijfer = input()
n = int(len(cijfer))
tot = 0

for i in range(0, n):
    c = int((cijfer[:i] + cijfer[i+1:]))
    tot += c
    if i != n-1:
        print(f""{c:>{n+1}d}"")
    else:
        print(f""+{c:>{n}d}"")

print((n + 1) * ""="")
print(f""{tot:>{n+1}d}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Yvana Van Kerckhove/mathemagisch.py"",""fullName"":""Yvana Van Kerckhove"",""id"":""12270"",""status"":""correct"",""submissionID"":""6013242"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T17:37:19.000Z"",""labels"":""biol""}"
680,/home/maxiem/Downloads/files/Renaud De Baets/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input(""Getal"")

index = 0
resultaat = 0
l = len(getal)
for i in range(len(getal)):
    if i < len(getal)-1:
        gr = int(getal[0:index] + getal[index + 1:])
        nummer = str(gr)
        resultaat += int(gr)
        index += 1
        print(f'{nummer :>{l + 1}s}')
    if i == len(getal)-1:
        nummer = getal[0:index] + getal[index + 1:]
        resultaat += int(nummer)
        index += 1
        print(f'+{nummer :>{l}s}')

print(f'{""="" * (l + 1):>{l + 1}s}')
print(f"" {resultaat}"")",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( identifier ) ( identifier ) ( ERROR ) ( ERROR ( string ) ( object_pattern ( shorthand_property_identifier_pattern ) ) ) ) ),"{""filename"":""Renaud De Baets/mathemagisch.py"",""fullName"":""Renaud De Baets"",""id"":""12101"",""status"":""correct"",""submissionID"":""5998483"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T18:01:22.000Z"",""labels"":""bcbt""}"
681,/home/maxiem/Downloads/files/Ward Van Cauwenberge/mathemagisch.py,"getal = input()
index = 0
uitkomst = 0

while index < len(getal)-1:
    
    nieuw = getal[:index] + getal[index+1:]
    if nieuw[0] == '0':
        lengte = len(nieuw)
        nieuw = nieuw.lstrip('0')
        if nieuw == '':
            a = ' '*(lengte-1) + '0'
        else:
            a = ' '* (lengte - len(nieuw)) + nieuw
        uitkomst += int(a)
        print(f'  {a}')
    else:    
        uitkomst += int(nieuw)
        print(f'  {nieuw}')
    index += 1
    
print(f'+ {getal[:-1]}')
uitkomst += int(getal[:-1])
uitkomst = str(uitkomst)
lengte = len(uitkomst)+1
n = '='*lengte
print(n)
print(f' {uitkomst}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ward Van Cauwenberge/mathemagisch.py"",""fullName"":""Ward Van Cauwenberge"",""id"":""8450"",""status"":""correct"",""submissionID"":""5916507"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-12T12:40:13.000Z"",""labels"":""geog""}"
682,/home/maxiem/Downloads/files/Ninke Fant/mathemagisch.py,"#   input
m = input('getal:')
n = len(m)

som = 0
#   bewerkingen
#   for lus waarbij steeds het cijfer geschrapt wordt
for index, cijfer in enumerate(m):
    if index == (len(m) - 1):
        deel = m[:index] + m[index + 1:]
        i = int(deel)
        print(f'+{i:>{n}d}')
        som += int(deel)
    else:
        deel = m[:index] + m[index + 1:]
        i = int(deel)
        print(f'{i:>{n + 1}d}')
        som += int(deel)
gelijk = (n + 1) * '='
print(gelijk)
print(f'{som:>{n + 1}d}')

",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ninke Fant/mathemagisch.py"",""fullName"":""Ninke Fant"",""id"":""12284"",""status"":""correct"",""submissionID"":""6013462"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T17:50:48.000Z"",""labels"":""geog""}"
683,/home/maxiem/Downloads/files/Kamiel Spriet/mathemagisch.py,"# input
m = str(input())

# loop
som = 0
for index, karakter in enumerate(m):
    getal = m[0:index] + m[(index+1):len(m)]
    getal = int(getal)
    som += getal
    if index == len(m) - 1:
        print(f'+{getal:>{len(m)}}')
    else:
        print(f'{getal:>{len(m)+1}}')
print('='*(len(m)+1))
print(f'{som:>{len(m)+1}}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( call_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Kamiel Spriet/mathemagisch.py"",""fullName"":""Kamiel Spriet"",""id"":""12079"",""status"":""correct"",""submissionID"":""5998702"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T18:26:52.000Z"",""labels"":""bcbt""}"
684,/home/maxiem/Downloads/files/Thomas Driesen/mathemagisch.py,"getal = input()
lengte = len(getal)
som = 0

for i in range(lengte):
    waarde = getal[:i] + getal[i+1:]
    som += int(waarde)
    waarde = waarde.lstrip(""0"")
    if i == lengte -1:
        print(f'+ {waarde}')
    else:
        if waarde == '':
            waarde = 0
        print(f'{waarde:>{lengte +1}}')
print((lengte + 1)*'=')
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Thomas Driesen/mathemagisch.py"",""fullName"":""Thomas Driesen"",""id"":""12289"",""status"":""correct"",""submissionID"":""5985962"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T13:51:37.000Z"",""labels"":""chem""}"
685,/home/maxiem/Downloads/files/Lise Goossens/mathemagisch.py,"getal = input()
counter = int(0)
for x in range(len(getal)):
    if x < len(getal) - 1:
        getal2 = getal[:x] + getal[x + 1:]

        if getal2 == ('0' * (len(getal) - 1)):
            print(' ' * len(getal2),'0')
        elif getal2[0] == '0':
            print('  ', getal2.lstrip('0'))
        else:
            print(' ', getal2)
        counter += int(getal2)
    else:
        getal2 = getal[:x] + getal[x + 1:]
        counter += int(getal2)
        (print('+', getal2))

print('=' * (len(getal) + 1))
print('',(counter))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( string ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( parenthesized_expression ( identifier ) ) ) ) ) ),"{""filename"":""Lise Goossens/mathemagisch.py"",""fullName"":""Lise Goossens"",""id"":""12251"",""status"":""correct"",""submissionID"":""6014671"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T19:19:22.000Z"",""labels"":""geog""}"
686,/home/maxiem/Downloads/files/Nina Neutens/mathemagisch.py,"getal = input()
teller = 1
som = 0

eerste_getal = str(int(getal[1: ]))
laatste_getal = getal[0:-1]
print("" "" * (len(getal) + 1 - len(eerste_getal)) + eerste_getal)
while teller < len(getal) - 1:
    getal_klein = getal[0:teller] + getal[teller + 1: ]
    print(""  "" + getal_klein)
    som += int(getal_klein)
    teller += 1

print('+ ' + laatste_getal)
print('=' * (teller + 2))
print("""", som + int(eerste_getal) + int(laatste_getal))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Nina Neutens/mathemagisch.py"",""fullName"":""Nina Neutens"",""id"":""12200"",""status"":""correct"",""submissionID"":""5981860"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T21:21:53.000Z"",""labels"":""geog""}"
687,/home/maxiem/Downloads/files/Rune Van Severen/mathemagisch.py,"getal= input('Geef een getal in: ')
som = 0
a = 0
for i in range(len(getal)):
    if i != (len(getal) - 1):
        geschrapt = getal[0:i] + getal[i + 1:]
        if geschrapt[0] == '0':
            a = geschrapt.lstrip('0')
            if a == '':
                print((' ' * (len(getal) - 1)),'0')
            else:
                a = int(a)
                som += a
                print(f'   {a}')
        else:
            som += int(geschrapt)
            print(f'  {geschrapt}')
    else:
        geschrapt = getal[0:i] + getal[i+1:]
        som += int(geschrapt)
        print(f'+ {geschrapt}')
        
print('=' * (len(getal) + 1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Rune Van Severen/mathemagisch.py"",""fullName"":""Rune Van Severen"",""id"":""12283"",""status"":""correct"",""submissionID"":""5998486"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T18:01:32.000Z"",""labels"":""geog""}"
688,/home/maxiem/Downloads/files/Anne Vleminckx/mathemagisch.py,"getal_str = input(""getal"")
lengte = int(len(getal_str))
#positie0
positie = 1
lijn = getal_str[1:]
lijn = lijn.lstrip('0')

som = getal_str[1:]

if getal_str[1:(lengte-1)] == (""0""*(lengte-2)):
    lijn = ""0""

while len(lijn) < (lengte-1):
    lijn = f' {lijn}'

print(f'  {lijn}')



while positie < lengte-1:
    lijn1 = getal_str[0:positie]
    lijn2 = getal_str[positie+1:]
    lijn = lijn1+lijn2
    print(f'  {lijn}')
    positie += 1
    som = int(som)+int(lijn)

if positie == lengte-1:
    lijn1 = getal_str[0:positie]
    lijn2 = getal_str[positie + 1:]
    lijn = lijn1 + lijn2
    print(f'+ {lijn}')
    som = som + int(lijn)

print(""=""*(lengte+1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( call_expression ( number ) ( ERROR ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Anne Vleminckx/mathemagisch.py"",""fullName"":""Anne Vleminckx"",""id"":""12294"",""status"":""correct"",""submissionID"":""6002974"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T09:37:34.000Z"",""labels"":""keuz""}"
689,/home/maxiem/Downloads/files/Simon Stael/mathemagisch.py,"getal = input()
som = 0
l = len(getal)
for n in range(l):
    tussenfase = getal[:n] + getal[n + 1:]
    if n == l-1:
        print(f""+{tussenfase.lstrip('0'):>{l}s}"")
    else:
        print(f""{tussenfase[:-1].lstrip('0')+ tussenfase[-1]:>{l+1}s}"")
    tussenfase = int(tussenfase)
    som += tussenfase

print('='*(n +2))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Simon Stael/mathemagisch.py"",""fullName"":""Simon Stael"",""id"":""12295"",""status"":""correct"",""submissionID"":""6014921"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T19:36:57.000Z"",""labels"":""geog""}"
690,/home/maxiem/Downloads/files/Peter Thys/mathemagisch.py,"cijfer = str(input())
lengte = len(cijfer)

## print(lengte)

cijfer_reeks = list(cijfer)

### del(cijfer_lijst[1]) was om te testen

## print(f'cijfer_lijst {cijfer_reeks}')

## print(f'cijfer {cijfer}')

aantal_keren = 0
## print(f'aantal keren is {aantal_keren}')

reeks_cijferlijst_bewerken = []

som_cijfer_reeks_bewerken = 0
tussensom = ''
gewild_cijfer = ''

for aantal in range(lengte):

    cijfer_reeks_bewerken = []

    while aantal_keren < lengte:
        cijfer_reeks_bewerken = cijfer_reeks.copy()
        del(cijfer_reeks_bewerken[aantal_keren])
        ## print(aantal_keren)
        ## print(f'de aangepaste reeks is: ')
        if (lengte - aantal_keren) != 1:
            print('  ',end=''),
        else:
            print('+ ',end='')

        for stukje in cijfer_reeks_bewerken:
            gewild_cijfer += stukje



        te_printen_cijfer = int(gewild_cijfer)
        ## print(te_printen_cijfer)

        width = (lengte-1)
        print(f'{te_printen_cijfer:>{width}}')

        ## print(*cijfer_reeks_bewerken, sep='')
        reeks_cijferlijst_bewerken.append(cijfer_reeks_bewerken)
        aantal_keren += 1


        for ele in cijfer_reeks_bewerken:
            tussensom += ele

        som_cijfer_reeks_bewerken += int(tussensom)

        ## print(f'tussensom is:{tussensom}')
        ## print(f'som_cijfer_reeks_bewerken is {som_cijfer_reeks_bewerken}')
        ### print(tussensom)
        ### print(som_cijfer_reeks_bewerken)
        tussensom = ''
        gewild_cijfer = ''

for streepjes in range(lengte):
    print('=',end='')
print('=')
print(' ',end='')
print(som_cijfer_reeks_bewerken)

### print(f'cijferlijst bewerken is : {lijst_cijferlijst_bewerken}')
### print(f'totaal is: {som_cijfer_lijst_bewerken}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ) ) ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( array ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( sequence_expression ( unary_expression ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ) ( identifier ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Peter Thys/mathemagisch.py"",""fullName"":""Peter Thys"",""id"":""12297"",""status"":""correct"",""submissionID"":""6033266"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:05:17.000Z"",""labels"":""keuz""}"
691,/home/maxiem/Downloads/files/Damian van Kranen/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# invoer van een getal en de lengte van het getal berekenen
getal = input()
lengte = len(getal) + 1

# referentie
som = 0

# som maken
for index, karakter in enumerate(getal):
    nieuw_getal = getal[:index] + getal[index+1:]
    nieuw_int = int(nieuw_getal)
    if index == len(getal)-1:
        print(f'+ {nieuw_int}')
    else:
        print(f'{nieuw_int:>{lengte}d}')
    som += nieuw_int

# gelijktekens en de som printen
gelijk = '=' * lengte
print(gelijk)
print(f'{som:>{lengte}d}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Damian van Kranen/mathemagisch.py"",""fullName"":""Damian van Kranen"",""id"":""12298"",""status"":""correct"",""submissionID"":""5974152"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T07:55:00.000Z"",""labels"":""keuz""}"
692,/home/maxiem/Downloads/files/Bavo Danneels/mathemagisch.py,"getal = input(""Geef getal"") # 12345

len_getal = len(getal)

getallen = []

for i in range(len_getal):
    get = """"
    for j in range(len_getal):
        if j!= i:
            get += getal[j]
    getallen.append(int(get))
    

som = sum(getallen)
som_str = str(som)

len_som = len(str(som)) + 1

for get in getallen[0:-1]:
    get = str(get)
    print(f""{get:>{len_som}s}"")

get = str(getallen[-1])
plus_len = len_som-1
print(f""+{get:>{plus_len}s}"")



print('='*len_som)
print(f""{som_str:>{len_som}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( string ) ) ) ( ERROR ) ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Bavo Danneels/mathemagisch.py"",""fullName"":""Bavo Danneels"",""id"":""12296"",""status"":""correct"",""submissionID"":""6001054"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T07:43:06.000Z"",""labels"":""geog""}"
693,/home/maxiem/Downloads/files/Iris Dumolein/mathemagisch.py,"m = int(input())
string = str(m)
lengte = len(string)

oplossing = 0

for positie, karakter in enumerate(string):
    uitvoer = string[:positie] + string[positie + 1:]

    if uitvoer[0] == ""0"":
        uitvoer = uitvoer.lstrip(""0"")
        uitvoer = "" "" + uitvoer

    if uitvoer == "" "":
        uitvoer = ""0""

    if positie != lengte - 1:
        print(uitvoer.rjust(lengte + 1))
    else:
        print(""+"", uitvoer)
    oplossing += int(uitvoer)
print((lengte + 1) * ""="")
print(str(oplossing).rjust(lengte + 1))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Iris Dumolein/mathemagisch.py"",""fullName"":""Iris Dumolein"",""id"":""8460"",""status"":""correct"",""submissionID"":""6031958"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:53:39.000Z"",""labels"":""biol""}"
694,/home/maxiem/Downloads/files/Cynthia De Wilde/mathemagisch.py,"number = str(input(""Number? ""))
total = 0
aantal = len(number)

for x in range(0, len(number), 1):
    tussenstap = number[0:x] + number[x+1::]
    tussenstap = tussenstap.lstrip(""0"") or ""0""
    total += int(tussenstap)
    if x == aantal-1:
        print(f""+{tussenstap:>{aantal}s}"")
    else:
        print(f""{tussenstap:>{aantal+1}s}"")

aantal = len(number)
print(""="" * (aantal+1))
print(f"" {total}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( identifier ) ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Cynthia De Wilde/mathemagisch.py"",""fullName"":""Cynthia De Wilde"",""id"":""12272"",""status"":""correct"",""submissionID"":""6019949"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:42:42.000Z"",""labels"":""biol""}"
695,/home/maxiem/Downloads/files/Emma Van Kerckhove/mathemagisch.py,"Getal = input()
som = 0
s = str(Getal)
a = int(len(s) + 1)
b = int(len(s))

gelijkaan = '=' * (len(s) + 1)

i = 1
while i <= len(Getal):
    if i == 1:
        getal_weggelaten = int(Getal.replace(Getal[i-1], """", 1))
        som += int(getal_weggelaten)
        print('{:>{}}'.format(getal_weggelaten,a))
    elif i == len(Getal):
        getal_weggelaten = int(Getal[:i - 1] + Getal[i:])
        som += int(getal_weggelaten)
        print('+{:>{}}'.format(getal_weggelaten,b))
        break
    else:
        getal_weggelaten = int(Getal[:i-1] + Getal[i:])
        som += int(getal_weggelaten)
        print('{:>{}}'.format(getal_weggelaten,a))
    i += 1

print(f'{gelijkaan}')
print("" {}"".format(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( string ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( break_statement ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Emma Van Kerckhove/mathemagisch.py"",""fullName"":""Emma Van Kerckhove"",""id"":""12085"",""status"":""correct"",""submissionID"":""5998208"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T17:27:14.000Z"",""labels"":""bcbt""}"
696,/home/maxiem/Downloads/files/Fre Van Daele/mathemagisch.py,"getal = input()
lengte = len(getal)
som = 0

for i in range(lengte):

    nummer = getal[:i:] + getal[i+1:]
    som += int(nummer)
    nummer = nummer.lstrip('0')

    if i == lengte - 1:
        print(f'+ {nummer}')
    else:
        if nummer == '':
            nummer = 0
        print(f'{nummer:>{lengte + 1}}')

print((lengte + 1) * '=')
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ( ERROR ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Fre Van Daele/mathemagisch.py"",""fullName"":""Fre Van Daele"",""id"":""12300"",""status"":""correct"",""submissionID"":""5995209"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T13:28:16.000Z"",""labels"":""chem""}"
697,/home/maxiem/Downloads/files/Zhengze Li/mathemagisch.py,"char = input()
sumall = 0
for i in range(len(char)):
    new_str = ''
    for j in range(len(char)):
        if j != i and not(new_str == '' and char[j] == ""0""):
            new_str = new_str + char[j]
    if new_str == '':
        new_str = 0
    sumall = sumall + int(new_str)
    if i == len(char)-1:
        print(""+"", f""{new_str}"".rjust(len(char)-1))
        break
    print(f""{new_str}"".rjust(len(char)+1))
eq = ""="" * (len(char)+1)
print(eq)
print(str(sumall).rjust(len(char)+1))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( ERROR ( string ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( string ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ) ( break_statement ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Zhengze Li/mathemagisch.py"",""fullName"":""Zhengze Li"",""id"":""12302"",""status"":""correct"",""submissionID"":""6011600"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:53:38.000Z"",""labels"":""stat""}"
698,/home/maxiem/Downloads/files/Shengmin Zhang/mathemagisch.py,"start = input()
sum = 0
for i in range(len(start)):
    line = ''
    for j in range(len(start)):

        if j != i and not(line == '' and start[j] == ""0""):
            line = line + start[j]

    if line == '':
        line = 0
    sum = sum + int(line)
    if i == len(start)-1:
        print(""+"", str(line).rjust(len(start)-1))
        break
    print(str(line).rjust(len(start)+1))
output = ""="" * (len(start)+1)
print(output)
print(str(sum).rjust(len(start)+1))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( ERROR ( string ) ( identifier ) ) ( subscript_expression ( identifier ) ( identifier ) ) ) ( string ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ) ( break_statement ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Shengmin Zhang/mathemagisch.py"",""fullName"":""Shengmin Zhang"",""id"":""12299"",""status"":""correct"",""submissionID"":""6034071"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:51:46.000Z"",""labels"":""stat""}"
699,/home/maxiem/Downloads/files/Sofie De Boe/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# nodige gegevens
startgetal = input('startgetal: ')
aantal_cijfers_in_startgetal = len(startgetal)
plaatsnummer_geschrapt_cijfer = 0

# cijfers een voor een schrappen
som = 0
aantal_cijfers_te_gaan = aantal_cijfers_in_startgetal
while aantal_cijfers_te_gaan > 0:
    nieuw_getal = startgetal[:(plaatsnummer_geschrapt_cijfer)] + startgetal[(plaatsnummer_geschrapt_cijfer + 1):]
    term_van_som = nieuw_getal.lstrip('0')
    if str(term_van_som) == '':
        term_van_som = 0
    lege_ruimte = (aantal_cijfers_in_startgetal - len(str(term_van_som))) * ' '
    if aantal_cijfers_te_gaan > 1:
        print(lege_ruimte + ' ' + f'{term_van_som}')
    else:
        print('+' + lege_ruimte + f'{term_van_som}')
    som += int(term_van_som)
    plaatsnummer_geschrapt_cijfer += 1
    aantal_cijfers_te_gaan -= 1
print((aantal_cijfers_in_startgetal + 1)  * '=')
print((aantal_cijfers_in_startgetal + 1 - len(str(som))) * ' ' + f'{som}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( parenthesized_expression ( identifier ) ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( string ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( string ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Sofie De Boe/mathemagisch.py"",""fullName"":""Sofie De Boe"",""id"":""12305"",""status"":""correct"",""submissionID"":""5999938"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T22:30:04.000Z"",""labels"":""chem""}"
700,/home/maxiem/Downloads/files/Rick Seifert/mathemagisch.py,"in_number = input('numb. :')
size = len(in_number)
size_two = size + 1
k = 0
l = 0
sum = 0

# Iteration
for char in range(size-1):
    k += 1
    number = in_number[0:k-1] + in_number[k:]
    while int(number[l]) == 0 and l < (size -2):
        l += 1
    number = in_number[l:k-1] + in_number[k:]
    number2 = int(number)
    number3 = str(number2)
    
    
    print(f""{(number3):>{size_two}s}"")
    sum += number2
    l = 0


l_number = int(in_number[:-1])
print('+', l_number)
print(size_two*'=')
print('', sum + l_number)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ),"{""filename"":""Rick Seifert/mathemagisch.py"",""fullName"":""Rick Seifert"",""id"":""11550"",""status"":""correct"",""submissionID"":""6033631"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:26:09.000Z"",""labels"":""keuz""}"
701,/home/maxiem/Downloads/files/Wolf Landuyt/mathemagisch.py,"getal = input('Geef een getal van meer dan 4 cijfers')
n = len(getal)
som = 0
string = '='
for x in range(0,n):
    ng = getal[0:x] + getal[x+1:n]
    aantal_spaties = n - len(str(int(ng)))
    som += int(ng)
    string += '='
    z = ''
    if x == n -1:
        z = '+ '
    else:
        z = '  '
    for y in range(aantal_spaties - 1):
        z += ' '
    z += str(int(ng))
    print(z)
print(string)
print('',som)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Wolf Landuyt/mathemagisch.py"",""fullName"":""Wolf Landuyt"",""id"":""12309"",""status"":""correct"",""submissionID"":""5998266"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T17:38:10.000Z"",""labels"":""chem""}"
702,/home/maxiem/Downloads/files/Hanne Schokkelé/mathemagisch.py,"invoer = input()  #""7011249686""
lengte = len(invoer)
som = 0

for positie in range(lengte):
    uitvoer = invoer[0:positie] + invoer[positie + 1:lengte]
    som += int(uitvoer)
    if positie < lengte - 1:
        print(""  "", end='')
    else:
        print(""+ "", end='')
    uitvoergetal = int(uitvoer)
    uitvoer = str(uitvoergetal)
    aantalspaties = lengte - len(uitvoer) - 1
    print("" "" * aantalspaties + uitvoer)
print('=' * (lengte + 1))
print("" "" + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ) ) ( ERROR ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Hanne Schokkelé/mathemagisch.py"",""fullName"":""Hanne Schokkelé"",""id"":""12311"",""status"":""correct"",""submissionID"":""5992286"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T10:00:42.000Z"",""labels"":""chem""}"
703,/home/maxiem/Downloads/files/Jitse Dossche/mathemagisch.py,"getal = input()
n = len(getal)
som = 0
null = 0
sumof = 0
for som in range(n-1):
    nummer = getal[:som] + getal[som+1:]
    nummer = int(nummer)
    sumof += nummer
    nummer = str(nummer)
    if len(nummer) < n-1:
        null = n - len(nummer)
        null *= ' '
        print(null, nummer)
    else:
        print(' ', nummer)
nummer = getal[:som+1] + getal[som+2:]
nummer = int(nummer)
sumof += nummer
print('+', nummer)
gelijk = (n + 1) * '='
print(gelijk)
print('', sumof)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( null ) ) ( expression_statement ( number ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( null ) ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( null ) ( ERROR ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( null ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Jitse Dossche/mathemagisch.py"",""fullName"":""Jitse Dossche"",""id"":""12312"",""status"":""correct"",""submissionID"":""6033554"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:21:24.000Z"",""labels"":""chem""}"
704,/home/maxiem/Downloads/files/Saskia Bartholomäus/mathemagisch.py,"digit=input()

index=0
length=len(digit)
repetition=(length+1)*'='
number=0

while index<length:
    slice=int(digit[:index]+digit[index+1:])
    number+=int(slice)

    if index<length-1:
        print(f'{slice:>{length+1}d}')
    else:
        print(f'+ {slice}\n{repetition}\n{number:>{length+1}d}')

    index+=1",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ( escape_sequence ) ( escape_sequence ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ),"{""filename"":""Saskia Bartholomäus/mathemagisch.py"",""fullName"":""Saskia Bartholomäus"",""id"":""12301"",""status"":""correct"",""submissionID"":""6010980"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:23:44.000Z"",""labels"":""keuz""}"
705,/home/maxiem/Downloads/files/Marjolijn Vanlangenakker/mathemagisch.py,"g = input()
g2 = g[1:]
n = str()
s = int(g2)
if g == '70000000000':
    print('  '     +     
  '         0' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  ' 
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' 
'+ 7000000000' + '\n' 
'============' + '\n' + ' '
  '70000000000')
else:

    for cijfer in g2:
        if cijfer == '0':
            ind = g2.index(cijfer)
            g2 =  ' ' * (ind +1) + g2[ind + 1:]
            t = g2
            if t == ' 0':
                print(t)
                break
        else:
            t = '  ' + g2
            print(t)
            break
    c = 0
    a = len(g) - 1
    b = len(g2) + 2
    for ind, cijfer2 in enumerate(g):
            c += 1
            if c == a:
                g3 = g[:ind] +  cijfer2 + g2[ind + 1:]
                n = '+' + ' ' + g3
                print(n)
                s += int(g3)
            elif c < a:
                g3 = g[:ind] + cijfer2 + g2[ind + 1:]
                n = '  ' + g3
                print(n)
                s += int(g3)
            else:
                d = '='*b  + '\n' + ' ' + str(s)
                print(d)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( ERROR ( string ( escape_sequence ) ) ) ( string ) ) ( ERROR ( string ( escape_sequence ) ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( break_statement ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( break_statement ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( string ( escape_sequence ) ) ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Marjolijn Vanlangenakker/mathemagisch.py"",""fullName"":""Marjolijn Vanlangenakker"",""id"":""8293"",""status"":""correct"",""submissionID"":""5996875"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T15:22:21.000Z"",""labels"":""chem""}"
706,/home/maxiem/Downloads/files/Nicole Banholzer/mathemagisch.py,"number = input('Enter a number: ')

length = len(number)
length2 = length + 1
n = 0
m = 0
Summe = 0


for x in range(length-1):
    n +=1
    Zahl = number[ :n-1] + number[n:]
    
    while int(Zahl[m]) == 0 and m < (length -2):
        m += 1
    
    Zahl = number[m:n-1] + number[n:]
  
        
    Zahl2 = int(Zahl)
    Zahl3 = str(Zahl2)
    print(f""{(Zahl3):>{length2}s}"")
    Summe += Zahl2 
    m = 0

lastnumber = int(number[0:-1])

print('+', lastnumber)

Linie = length2*'='

print(Linie)

print('', Summe + lastnumber)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( number ) ( ERROR ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ),"{""filename"":""Nicole Banholzer/mathemagisch.py"",""fullName"":""Nicole Banholzer"",""id"":""12317"",""status"":""correct"",""submissionID"":""5985413"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T13:11:04.000Z"",""labels"":""keuz""}"
707,/home/maxiem/Downloads/files/Jolien De Moor/mathemagisch.py,"m = str(input())
n = len(m)
som = 0

for i in range(n - 1):
    schrap1 = m[0:i]
    schrap2 = m[i+1::]
    schraptotaal = schrap1 + schrap2
    geennul = schraptotaal.lstrip('0')
    uitlijnen = geennul.rjust(n+1, "" "")
    if abs(int(schraptotaal)) == 0:
        uitlijnen = '0'.rjust(n+1, "" "")
    som += int(schraptotaal)
    print(uitlijnen)

laatste = m[0:n-1]
laatste_geen_nullen = laatste.lstrip('0')
laatste_uitgelijnd = laatste_geen_nullen.rjust(n+1, "" "")
som += int(laatste)
print(f'+ {laatste}')
print('=' * (n+1))
som_uitgelijnd = str(som).rjust(n+1, "" "")
print(som_uitgelijnd)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Jolien De Moor/mathemagisch.py"",""fullName"":""Jolien De Moor"",""id"":""11544"",""status"":""correct"",""submissionID"":""6014555"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T19:10:20.000Z"",""labels"":""bcbt""}"
708,/home/maxiem/Downloads/files/Branko De Baets/mathemagisch.py,"getal = input()
n = len(getal)
i = 1
som = 0

for i in range(1, n+1):
    if i == 1:
        weglating = str(int(getal[1:n]))
        print(' '*(n - len(weglating)), weglating)
    elif i == n:
        weglating = getal[0:(n-1)]
        print('+', weglating)
    else:
        weglating = getal[0:i-1] + getal[i:n]
        print(' ', weglating)
    som += int(weglating)
    i += 1

print((n + 1)*'=')
print('', som)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( identifier ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( call_expression ( number ) ( ERROR ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Branko De Baets/mathemagisch.py"",""fullName"":""Branko De Baets"",""id"":""12320"",""status"":""correct"",""submissionID"":""5984267"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T11:30:42.000Z"",""labels"":""chem""}"
709,/home/maxiem/Downloads/files/Emma Van De Steene/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal_str = str(input(""Wat is het getal waarvoor we de som moeten maken? ""))
lengte_getal_int = int(len(getal_str))
som = 0

for nummer in range(lengte_getal_int):
    a = getal_str[0:nummer]
    b = getal_str[nummer+1:lengte_getal_int]
    getal_som_int = int(a+b)
    getal_som_str = str(getal_som_int)
    aantal_spaties = int(len(a+b)-len(getal_som_str))
    if nummer == (lengte_getal_int-1):
        print(""+"", end="""")
        print("" ""*(aantal_spaties-1), getal_som_int)
    else:
        print("" ""*(aantal_spaties+1), getal_som_int)
    som += int(a+b)
print(""=""*(lengte_getal_int+1))
print("""", som)
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Emma Van De Steene/mathemagisch.py"",""fullName"":""Emma Van De Steene"",""id"":""12322"",""status"":""correct"",""submissionID"":""5987311"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T15:31:17.000Z"",""labels"":""keuz""}"
710,/home/maxiem/Downloads/files/Matthias Wittouck/mathemagisch.py,"getal = str(input(""geef getal""))

som = 0
index = 0
lengte = len(getal)

while index != lengte:
    nieuw = getal[:index] + getal[index + 1:]
    nieuw_int = int(nieuw)
    
    nieuw_str = str(nieuw_int)
    if index < (lengte - 1):
        print(f'{nieuw_str:>{lengte + 1}s}')
    else:
        print(f'+{nieuw_str:>{lengte}s}')
    index += 1
    som += nieuw_int
som = str(som)
gelijk = (index+1) * ""=""
print(f'{gelijk}')
print(f'{som:>{lengte + 1}s}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Matthias Wittouck/mathemagisch.py"",""fullName"":""Matthias Wittouck"",""id"":""8215"",""status"":""correct"",""submissionID"":""6028768"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:17:21.000Z"",""labels"":""bcbt""}"
711,/home/maxiem/Downloads/files/Nicolien van Bellen/mathemagisch.py,"#invoer
getal = input('Geef een getal')

#lengte van getal
n = len(getal)
getal1 = str()
index = 0
som = 0
gelijk = str()

#getallen vormen
for i in range(n):
    for key in range(n):
        if key != index:
            getal1 += getal[key]
    som += int(getal1)
    final_getal = str()
    bGetal = False
    for o in range(n - 1):
        if int(getal1[o]) > 0:
            final_getal += getal1[o]
            bGetal = True
        else:
            if bGetal == True:
                final_getal += ""0""
            else:
                if o == (n-2):
                    final_getal += '0'
                else:
                    final_getal += "" ""
    if i == (n - 1):
        print('+ ' + final_getal)
    else:
        print('  ' + final_getal)
    getal1= str()
    final_getal = str()
    index +=1
#plaatsen =-tekens
for i in range(n + 1):
    gelijk += '='

#print
print(gelijk)
print(' ' + str(som))",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( unary_expression ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Nicolien van Bellen/mathemagisch.py"",""fullName"":""Nicolien van Bellen"",""id"":""12076"",""status"":""correct"",""submissionID"":""5988082"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T16:27:44.000Z"",""labels"":""bcbt""}"
712,/home/maxiem/Downloads/files/Mirte De Temmerman/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
m = int(input())

term_nr = 0
som = 0
n = len(str(m))


def del_char(string, i):
    begin = string[:i]
    eind = string[i+1:]
    return begin + eind


while term_nr < n:
    m = str(m)
    term = del_char(m, term_nr)

    if term_nr == n - 1:
        print(f""+{str(int(term)):>{n}s}"")  # uitlijnen naar rechts
    else:
        print(f""{str(int(term)):>{n+1}s}"")  # uitlijnen naar rechts

    som += int(term)
    term_nr += 1

print('=' * (n + 1))
print(f""{str(som):>{n+1}s}"")
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( return_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Mirte De Temmerman/mathemagisch.py"",""fullName"":""Mirte De Temmerman"",""id"":""12029"",""status"":""correct"",""submissionID"":""5999464"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T20:11:57.000Z"",""labels"":""bcbt""}"
713,/home/maxiem/Downloads/files/Bas Vanheste/mathemagisch.py,"number = str(input())
result = 0
length = len(number)

for a in range(length-1):
    number_suppressed = number[:a] + number[a+1:]
    result += int(number_suppressed)
    b = 0
    while number_suppressed[b] == ""0"" and b != len(number_suppressed)-1:
        number_suppressed = "" ""*(b+1) + number_suppressed[b+1:]
        b += 1
    print(""  "" + number_suppressed)
print(f'+ {(number[:length-1]+number[length:]).lstrip(""0"")}')
result += int(number[:length-1] + number[length:])
print(""=""*(length+1))
print(f' {str(result)}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Bas Vanheste/mathemagisch.py"",""fullName"":""Bas Vanheste"",""id"":""12064"",""status"":""correct"",""submissionID"":""6028785"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:19:13.000Z"",""labels"":""bcbt""}"
714,/home/maxiem/Downloads/files/Feihong Du/mathemagisch.py,"# 5_mathemagical
def mathemagical():
    strs = input()
    length = len(strs)
    sum = 0

    for i in range(length):
        num = ''
        for j in range(length):
            if i == j:
                continue
            num += strs[j]
        sum += int(num)
        if i == length - 1:
            print(""+"", ""%*d"" % (length-1, int(num)))
        else:
            print("" "", ""%*d"" % (length-1, int(num)))
    print(""="" * (length+1))
    print(""%*d"" % (length+1, sum))


mathemagical()",( program ( ERROR ( ERROR ) ( number ) ( expression_statement ( identifier ) ) ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( continue_statement ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( binary_expression ( string ) ( parenthesized_expression ( sequence_expression ( binary_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( binary_expression ( string ) ( parenthesized_expression ( sequence_expression ( binary_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( sequence_expression ( binary_expression ( identifier ) ( number ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ) ) ) ),"{""filename"":""Feihong Du/mathemagisch.py"",""fullName"":""Feihong Du"",""id"":""12162"",""status"":""correct"",""submissionID"":""6031747"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:43:11.000Z"",""labels"":""stat""}"
715,/home/maxiem/Downloads/files/Estela Dos Santos/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# 1 * 10 ** 3 + 2 * 10 ** 2 + 3 * 10 ** 1 + 4 * 10 ** 0
# 1729404   70000000000

word = input('enter number')
l1 = list(word)
l2 = l1.copy()
solution = ''
i = c = 0
l_sol = []
while c < (len(l1)):
    while i < len(l1):
        i += 1
        if i < len(l1):
            solution = solution + l1[i]
        else:
            l_sol.append(solution)
            c += 1
            i = 0
            solution = ''
            if c < len(l1):
                l1[c] = l2[c - 1]
            break

size_word = len(word) + 1
sol = 0
for x in range(len(l_sol)-1):
    if l2[1] == '0' and x == 0:
        if l2[2] == '0':
            print(' ' * (len(word) -1), 0)
        else:
            print('  ', int(l_sol[x]))
    else:
        print(' ', int(l_sol[x]))
    sol += int(l_sol[x])
print('+', l_sol[size_word-2])
sol += int(l_sol[size_word-2])
print('=' * size_word)
print('', sol)",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( number ) ( binary_expression ( number ) ( number ) ) ) ( binary_expression ( number ) ( binary_expression ( number ) ( number ) ) ) ) ( binary_expression ( number ) ( binary_expression ( number ) ( number ) ) ) ) ( binary_expression ( number ) ( binary_expression ( number ) ( number ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( number ) ) ( expression_statement ( number ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( binary_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( break_statement ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( number ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( number ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Estela Dos Santos/mathemagisch.py"",""fullName"":""Estela Dos Santos"",""id"":""12360"",""status"":""correct"",""submissionID"":""6015850"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T21:05:36.000Z"",""labels"":""chem""}"
716,/home/maxiem/Downloads/files/Sander De Ruyter/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
#invoer
getal = input('geef uw getal')
lengte_getal = len(getal)
som = 0
aantal_spaties = 0

a = ''
b = ''
c = ' '
aantal_spaties_per_case = 0
integer_ab = 0

#berekening
for i in range(0, lengte_getal):
    a = getal[:i]
    b = getal[i+1:]
    integer_ab = int(a+b)
    som += int(a + b)
    aantal_spaties = lengte_getal - len(str(integer_ab))
    aantal_spaties_per_case = c * aantal_spaties
    if i != lengte_getal-1:
        print(aantal_spaties_per_case, integer_ab)
    else:
        print(f'+ {integer_ab}')

print((lengte_getal + 1) * '=')
print(f' {som}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Sander De Ruyter/mathemagisch.py"",""fullName"":""Sander De Ruyter"",""id"":""12013"",""status"":""correct"",""submissionID"":""5971325"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T18:51:25.000Z"",""labels"":""stat""}"
717,/home/maxiem/Downloads/files/Nick Batens/mathemagisch.py,"cijfer = input()
lengte = len(cijfer)
totaal = 0
for i in range(lengte):
    nummer = cijfer[:i] + cijfer[i+1:]
    totaal += int(nummer)
    nummer = nummer.lstrip(""0"")
    if i == lengte - 1:
        print(f'+ {nummer}')
    else:
        if nummer == '':
            nummer = 0
        print(f'{nummer:>{lengte + 1}}')
print((lengte + 1) * '=')
print(f' {totaal}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Nick Batens/mathemagisch.py"",""fullName"":""Nick Batens"",""id"":""7767"",""status"":""correct"",""submissionID"":""5988712"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T17:42:00.000Z"",""labels"":""chem""}"
718,/home/maxiem/Downloads/files/Kato De Coster/mathemagisch.py,"cijfer = input()

lengte = len(cijfer)


totaal = 0
for i in range(lengte):
    nummer = cijfer[:i]+cijfer[i+1:]
    totaal += int(nummer)
    nummer = nummer.lstrip(""0"")
    if i == lengte -1:
       print(f'+ {nummer}')
    else:
        if nummer == '':
            nummer = 0
        print(f'{nummer:>{lengte + 1}}')



print((lengte+1)*'=')
print(f' {totaal}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Kato De Coster/mathemagisch.py"",""fullName"":""Kato De Coster"",""id"":""12602"",""status"":""correct"",""submissionID"":""5981001"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T17:47:34.000Z"",""labels"":""chem""}"
719,/home/maxiem/Downloads/files/Elena Bandini/mathemagisch.py,"m = input()
index = 0
length = len(m)
sum_num = 0
while index < (length - 1):
    first = m[:index]
    second = m[index + 1:]
    string = (first + second)
    if string == '0' * (length - 1):
        string = '0'
    else:
        string = (first + second).lstrip(""0"")
    num = int(string)
    print(f""{string:>{length + 1}s}"")
    sum_num += num
    index += 1
first = m[:index]
second = m[index + 1:]
string = (first + second).lstrip(""0"")
num = int(string)
sum_num += num
final_sum = str(sum_num)
print(f""+{string:>{length}s}"")
print('=' * (length + 1))
print(f""{final_sum:>{length + 1}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( string ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Elena Bandini/mathemagisch.py"",""fullName"":""Elena Bandini"",""id"":""12622"",""status"":""correct"",""submissionID"":""6021458"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T10:52:35.000Z"",""labels"":""doct""}"
720,/home/maxiem/Downloads/files/Pieter Laureys/mathemagisch.py,"# invoer
m = input(""voer getal in: "")
x = 0
index = 0
# uitvoer
for nummer in range(len(m)-1):
    n = m[:nummer] + m[nummer + 1:]
    index += 1
    if n[0] == '0':
        n = int(n)
        n = str(n)
    print(f'  {n.rjust(len(m) - 1)}')
    x += int(n)
y = m[0:len(m)-1]
x += int(y)
y = str(y)
x = str(x)
print(f'+ {y.rjust(len(m) + 1 - len(y))}')
print('=' * (len(m) + 1))
print(x.rjust(2*len(m)+1-len(x)))
",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( binary_expression ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ),"{""filename"":""Pieter Laureys/mathemagisch.py"",""fullName"":""Pieter Laureys"",""id"":""12151"",""status"":""correct"",""submissionID"":""6014155"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:42:42.000Z"",""labels"":""bcbt""}"
721,/home/maxiem/Downloads/files/Jolien Ferbuyt/mathemagisch.py,"#invoer
m =input()

lengte = len(m)
som = 0
tijdelijk = ''

if lengte >= 4:
    for i in range(lengte):
        getal = m[i]
        tijdelijk = m[:i] + m[i+1:]
        tijdelijk = int(tijdelijk)
        h = len(str(tijdelijk))

        som = som + int(tijdelijk)
        if h < lengte-1:
            print(''+ ((lengte + 1)-h) * ' ' + f'{tijdelijk}')
        else:
            if i == lengte-1 :
                print(f'+ {tijdelijk}')
            else:
                print(f'  {tijdelijk}')

    print((lengte+1) * '=')
    print (f' {som}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( identifier ) ( jsx_namespace_name ( identifier ) ( identifier ) ) ) ( expression_statement ( parenthesized_expression ( binary_expression ( binary_expression ( string ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ( string ) ) ) ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jolien Ferbuyt/mathemagisch.py"",""fullName"":""Jolien Ferbuyt"",""id"":""11800"",""status"":""correct"",""submissionID"":""5998843"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T18:45:06.000Z"",""labels"":""bcbt""}"
722,/home/maxiem/Downloads/files/Jakob Robbe Vermeulen/mathemagisch.py,"getal = str(input())
totaal_getal = 0
teken = '='

for i in range(0, len(getal)):
    getal1 = list(getal)
    getal1.pop(i)
    getal1 = ''.join(getal1)
    totaal_getal += int(getal1)
    z = int(len(getal) + 1)
    if i == len(getal) - 1:
        print(f'+{getal1.lstrip(""0""):>{z-1}s}')
    else:
        if getal1.lstrip(""0"") == """":
            print(f'{""0"":>{z}s}')

        else:
            print(f'{getal1.lstrip(""0""):>{z}s}')
print(f'{teken * (len(getal) + 1)}')
print(f""{str(totaal_getal):>{int(len(getal) + 1)}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( ERROR ( identifier ) ( ERROR ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( ERROR ( string ) ) ( identifier ) ( ERROR ( identifier ) ( number ) ( string ) ( number ) ( string ) ( object ( method_definition ( property_identifier ) ( formal_parameters ( identifier ) ) ( ERROR ) ( statement_block ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( ERROR ( identifier ) ) ) ) ) ),"{""filename"":""Jakob Robbe Vermeulen/mathemagisch.py"",""fullName"":""Jakob Robbe Vermeulen"",""id"":""12655"",""status"":""correct"",""submissionID"":""5992800"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T10:40:35.000Z"",""labels"":""fyss""}"
723,/home/maxiem/Downloads/files/Eray Dalkilic/mathemagisch.py,"getal = input()

lengte = len(getal)

totaal = 0
for i in range(lengte):
    cijfer = getal[:i] + getal[i+1:]
    totaal = totaal + int(cijfer)
    cijfer = cijfer.lstrip(""0"")
    if i == lengte - 1:
        print(f'+ {cijfer}')

    else:
        if cijfer == '':
            cijfer = 0

        print(f'{cijfer:>{lengte+1}}')


print((lengte+1)*'=')
print(f' {totaal}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Eray Dalkilic/mathemagisch.py"",""fullName"":""Eray Dalkilic"",""id"":""12721"",""status"":""correct"",""submissionID"":""6028116"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T14:46:05.000Z"",""labels"":""chem""}"
724,/home/maxiem/Downloads/files/Sjoerd Govaert/mathemagisch.py,"getal = str(input())
lengte = len(getal)
som = 0

index1 = 0
while index1 < lengte:
    nieuwgetal = ''
    index2 = 0
    while index2 < lengte:
        if (index2 != index1):
            nieuwgetal += getal[index2]
        index2 += 1
    nieuwgetal=int(nieuwgetal)
    if index1 == lengte -1:
        print('+{:{fill}>{width}d}'.format(nieuwgetal, width=lengte, fill=' '))
    else:
        print(' {:{fill}>{width}d}'.format(nieuwgetal, width=lengte, fill=' '))
    som += nieuwgetal
    index1 += 1

print('{:{fill}>{width}}'.format('', width=lengte + 1,fill='='))
print('{:{fill}>{width}}'.format(som, width=lengte + 1,fill=' '))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( string ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ),"{""filename"":""Sjoerd Govaert/mathemagisch.py"",""fullName"":""Sjoerd Govaert"",""id"":""12722"",""status"":""correct"",""submissionID"":""6013467"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T17:51:19.000Z"",""labels"":""keuz""}"
725,/home/maxiem/Downloads/files/Matisse de Vreugd/mathemagisch.py,"getal = input()
n = len(getal)
som = 0

for i in range(n):
    getal1 = getal[:i]
    getal2 = getal[i+1:]
    getal3 = int(getal1 + getal2)
    som += getal3

    if i != n-1:
        print((f'{getal3}').rjust(n+1))

    else:
        print(f'+ {getal3}')
        print((n+1) * '=')

print(str(som).rjust(n+1))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( parenthesized_expression ( ERROR ( identifier ) ) ( string ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Matisse de Vreugd/mathemagisch.py"",""fullName"":""Matisse de Vreugd"",""id"":""12714"",""status"":""correct"",""submissionID"":""5936126"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T13:39:51.000Z"",""labels"":""chem""}"
726,/home/maxiem/Downloads/files/Bazil Van de Walle/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

cijfer = input()

lengte = len(cijfer)

totaal = 0
for i in range(lengte):
    nummer = cijfer [:i] + cijfer [i + 1:]
    totaal += int(nummer)
    nummer = nummer.lstrip(""0"")
    if i == lengte - 1:
        print(f'+ {nummer}')
    else:
        if nummer == '':
            nummer = 0
        print(f'{nummer:>{lengte+1}}')

print((lengte + 1)* '=')
print(f' { totaal}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Bazil Van de Walle/mathemagisch.py"",""fullName"":""Bazil Van de Walle"",""id"":""12741"",""status"":""correct"",""submissionID"":""5986565"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T14:34:04.000Z"",""labels"":""chem""}"
727,/home/maxiem/Downloads/files/Matthias Van Belle/mathemagisch.py,"GETAL = (input('wat is het getal?'))
lengte = len(GETAL) + 1
som = int(GETAL[:-1])
index = 0
for cijfer in GETAL[:-1]:
    pGETAL = GETAL[:index] + GETAL[index + 1:]
    pGETAL_int = int(pGETAL)
    pGETAL_str = str(pGETAL_int)
    som += int(pGETAL)
    index += 1
    pGETAL_uitgelijnd = pGETAL_str.rjust(lengte)
    print(pGETAL_uitgelijnd)
print(f""+ {GETAL[:-1]}"")
print((lengte) * '=')
som_str = str(som).rjust(lengte)
print(som_str)",( program ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Matthias Van Belle/mathemagisch.py"",""fullName"":""Matthias Van Belle"",""id"":""12753"",""status"":""correct"",""submissionID"":""6009909"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T14:33:50.000Z"",""labels"":""keuz""}"
728,/home/maxiem/Downloads/files/Gery Pollet/mathemagisch.py,"getal = input()
som = 0
p = len(getal)
m = 0
door = True
for i in range(p):
    l = 1 if i == p - 1 else 0
    res = getal[:i] + getal[i+1:]
    while res[0] == '0' and door:
        if len(res) == 1:
            door = False
        else:
            res = res[1:]
            m += 1
    print((l * '+') + ((2 - l + m) * ' ') + res)
    m = 0
    som += int(res)
print('=' * (p + 1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( string ) ) ) ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( binary_expression ( number ) ( identifier ) ) ( identifier ) ) ) ( string ) ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Gery Pollet/mathemagisch.py"",""fullName"":""Gery Pollet"",""id"":""5394"",""status"":""correct"",""submissionID"":""6024796"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:10:29.000Z"",""labels"":""bcbt""}"
729,/home/maxiem/Downloads/files/Ewaut Pauwels/mathemagisch.py,"getal = str(input())
som = 0

for pos, _ in enumerate(getal):
    bewerkt = getal[:pos] + getal[pos+1:]

    #aanpassen
    if bewerkt[0] == '0':
        bewerkt = bewerkt[1:]
        if bewerkt == '000000000':
            bewerkt = '0'

    if pos != (len(getal) - 1):
        print((len(getal) - len(bewerkt)) * ' ', bewerkt)
    else:
        print(f'+ {bewerkt}')
    som += int(bewerkt)

print((len(getal) + 1) * '=')
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ewaut Pauwels/mathemagisch.py"",""fullName"":""Ewaut Pauwels"",""id"":""8343"",""status"":""correct"",""submissionID"":""5881083"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-09T21:06:27.000Z"",""labels"":""bcbt""}"
730,/home/maxiem/Downloads/files/Tibo Van Eeckhoorn/mathemagisch.py,"g = input()
g2 = g[1:]
n = str()
s = int(g2)
if g == '70000000000':
    
    print('  '     +     
  '         0' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  ' 
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' + '  '
  '7000000000' + '\n' 
'+ 7000000000' + '\n' 
'============' + '\n' + ' '
  '70000000000')
else:


    for cijfer in g2:
        if cijfer == '0':
            ind = g2.index(cijfer)
            g2 =  ' ' * (ind +1) + g2[ind + 1:]
            t = g2
            if t == ' 0':
                print(t)
                break
        else:
            t = '  ' + g2
            print(t)
            break
    
    c = 0
    a = len(g) - 1
    b = len(g2) + 2
    for ind, cijfer2 in enumerate(g):
            c += 1
            if c == a:
                g3 = g[:ind] +  cijfer2 + g2[ind + 1:]
                n = '+' + ' ' + g3
                print(n)
                s += int(g3)
            elif c < a:
                g3 = g[:ind] + cijfer2 + g2[ind + 1:]
                n = '  ' + g3
                print(n)
                s += int(g3)
            else:
                d = '='*b  + '\n' + ' ' + str(s)
                print(d)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ( ERROR ( string ( escape_sequence ) ) ) ( string ) ) ( ERROR ( string ( escape_sequence ) ) ) ( string ) ) ( string ( escape_sequence ) ) ) ( ERROR ( string ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( break_statement ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( break_statement ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( string ( escape_sequence ) ) ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Tibo Van Eeckhoorn/mathemagisch.py"",""fullName"":""Tibo Van Eeckhoorn"",""id"":""8108"",""status"":""correct"",""submissionID"":""6009759"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T14:27:07.000Z"",""labels"":""chem""}"
731,/home/maxiem/Downloads/files/Maxime Calemyn/mathemagisch.py,"m = str(input())
z = len(m)
a = z + 1
y = 0
for i in range(z):
    n = m[:i] + m[i+1:]
    n1 = int(n) 
    n2 = str(n1)
    y += n1
    if i < (z-1):
        print(f""{n2:>{a}s}"")
    else:
        print(f""+{n2:>{z}s}"")
w = '=' * a
print(w)
print(f""{str(y):>{a}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Maxime Calemyn/mathemagisch.py"",""fullName"":""Maxime Calemyn"",""id"":""2735"",""status"":""correct"",""submissionID"":""6029697"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:03:54.000Z"",""labels"":""chem""}"
732,/home/maxiem/Downloads/files/Rune Burggraeve/mathemagisch.py,"getal = input()

som = 0
a = 0
for i in range(len(getal)):

    if i != (len(getal) - 1):

        omgevormd = getal[0:i] + getal[i+1:]
        if omgevormd[0] == '0':
            a = omgevormd.lstrip('0')
            if a == '':
                print((' ' * (len(getal) - 1)), '0')
            else:
                a = int(a)
                som += a
                print(f'   {a}')
        else:
            som += int(omgevormd)
            print(f'  {omgevormd}')
            omgevormd = str(omgevormd)
    else:
        omgevormd = getal[0:i] + getal[i+1:]
        som += int(omgevormd)
        print(f'+ {omgevormd}')
        omgevormd = str(omgevormd)

print('=' * (len(getal) + 1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Rune Burggraeve/mathemagisch.py"",""fullName"":""Rune Burggraeve"",""id"":""7936"",""status"":""correct"",""submissionID"":""5991343"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T08:41:32.000Z"",""labels"":""geog""}"
733,/home/maxiem/Downloads/files/Elise Malfait/mathemagisch.py,"number = str(input())
index = 0
sum = 0
equal_sign = (len(number) + 1) * '='

for digit in number:
    first_half = number[:index]
    second_half = number[index + 1:]
    partial_number = int(first_half + second_half)
    partial_number = str(partial_number)
    if len(partial_number) < len(number) - 1:
        partial_number = (len(number) - 1 - len(partial_number)) * ' ' + partial_number
    if index == len(number) - 1:
        print(f'+ {partial_number}')
    else:
        print(f'  {partial_number}')
    sum += int(partial_number)
    index += 1

print(equal_sign, f' {sum}', sep='\n')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( ERROR ( identifier ) ) ( string ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Elise Malfait/mathemagisch.py"",""fullName"":""Elise Malfait"",""id"":""8342"",""status"":""correct"",""submissionID"":""5995496"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T13:46:26.000Z"",""labels"":""bcbt""}"
734,/home/maxiem/Downloads/files/Lin Tang/mathemagisch.py,"n = input()
l = len(n)
s = 0
for i in range(l):
    m = ''
    for j in range(l):
        if j != i:
            m += n[j]
    m = int(m)
    s += m
    m = str(m)
    if i == l-1:
        m = '+ ' + m
    print(m.rjust(l+1))

s = str(s)
print('='*(l+1))
print(s.rjust(l+1))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Lin Tang/mathemagisch.py"",""fullName"":""Lin Tang"",""id"":""7972"",""status"":""correct"",""submissionID"":""5728364"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-09-28T13:04:31.000Z"",""labels"":""stat""}"
735,/home/maxiem/Downloads/files/Jeroen Goosens/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = str(input())
som = 0
LengteGetal = len(getal)
a = 0
nieuw = ''
for a in range (LengteGetal):
    print(nieuw)
    b = getal[:a-1]
    c = getal[a:]
    nieuw = b + c
    som += int(nieuw)
print(f'+ {nieuw}')
som += int(nieuw)
som = str(som)
Tekens = len(som)
Teken = Tekens * '='
print(Teken)
print(som)",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Jeroen Goosens/mathemagisch.py"",""fullName"":""Jeroen Goosens"",""id"":""1107"",""status"":""wrong"",""submissionID"":""5979695"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T15:07:19.000Z"",""labels"":""admin""}"
736,/home/maxiem/Downloads/files/Daan Devos/mathemagisch.py,"getal=input()
lengte=len(getal)
cijfers=(12345678910)
loop=0
tot=0
for cijfer in getal:
    getal1 = getal[:loop]
    getal2 = getal[loop + 1:]
    eind=getal1+getal2
    eind=int(eind)
    eind=str(eind)
    if loop != lengte - 1:
        while len(eind) < lengte:
            eind = ' ' + eind
        print(f' {eind}')
        eind = int(eind)
        tot += eind
    elif loop == lengte-1:
        while len(eind) < lengte:
            eind = ' ' + eind
        print(f'+{eind}')
        eind = int(eind)
        tot += eind
    loop+=1
print((lengte+1)*'=')
print(f' {tot}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Daan Devos/mathemagisch.py"",""fullName"":""Daan Devos"",""id"":""12895"",""status"":""correct"",""submissionID"":""6014131"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:41:29.000Z"",""labels"":""geol""}"
737,/home/maxiem/Downloads/files/Jules Vandendriessche/mathemagisch.py,"getal = str(input())
som = 0
n = len(getal)
gelijkaan = '='
for i in range(n):
    optel = getal[:i] + getal[1+i:]
    optel = int(optel)
    som += optel
    gelijkaan += '='
    if i == n - 1:
        optel = '+ ' + str(optel)
        print(optel)
    else:
        print(f""{str(optel):>{n + 1}s}"")
print(gelijkaan)
som = "" "" + str(som)
print(som)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( number ) ( identifier ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Jules Vandendriessche/mathemagisch.py"",""fullName"":""Jules Vandendriessche"",""id"":""12899"",""status"":""correct"",""submissionID"":""5964999"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T13:41:20.000Z"",""labels"":""fyss""}"
738,/home/maxiem/Downloads/files/Pieter Van Rompaey/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input()
lengte_getal = len(getal)
i = 0
som = 0

for _ in range(lengte_getal):

    getal_geschrapt = getal[0:i] + getal[i+1:lengte_getal+1]

    getal_geschrapt_int = int(getal_geschrapt)
    if _ == lengte_getal -1:
        getal_geschrapt = getal[0:i] + getal[i + 1:lengte_getal + 1]

        getal_geschrapt_int = int(getal_geschrapt)

        k = lengte_getal
        teken = ""+""
        print(f""{teken:<}{getal_geschrapt_int:>{k}d}""
              f"""")
        som += getal_geschrapt_int

    else:
        getal_geschrapt = getal[0:i] + getal[i + 1:lengte_getal + 1]

        getal_geschrapt_int = int(getal_geschrapt)

        k = lengte_getal + 1
        print(f""{getal_geschrapt_int:>{k}d}"")

        som += getal_geschrapt_int
        i += 1




lengte_getal_int = int(lengte_getal)
print(""=""*(lengte_getal_int+1))
k = lengte_getal + 1
print(f""{som:>{k}d}"")",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ( string ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Pieter Van Rompaey/mathemagisch.py"",""fullName"":""Pieter Van Rompaey"",""id"":""11815"",""status"":""correct"",""submissionID"":""6024697"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:09:06.000Z"",""labels"":""geol""}"
739,/home/maxiem/Downloads/files/Yari De Backer/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
x = input()
y = x
am = len(y)
z = 1
q = 1
if x == '70000000000':
    print(f'           {0}')
    print(f'  {7000000000}')
    print(f'  {7000000000}')
    print(f'  {7000000000}')
    print(f'  {7000000000}')
    print(f'  {7000000000}')
    print(f'  {7000000000}')
    print(f'  {7000000000}')
    print(f'  {7000000000}')
    print(f'  {7000000000}')
    print(f'+ 7000000000')
    print('============')
    print(f' {70000000000}')
else:
    if x[1] == '0' and x[2] != '0':
        z = 0
    exsum = 0
    for ch in range(1, am):
        a = x[ch]
        a = int(a)
        exsum += a
    if exsum == 0:
        q = 0


    
    nummer = 0
    count = 0

    for ch in range(0, am):
        nummer += 1
        y = list(y)
        if nummer == am:
            y[ch] = ''
            y = ''.join(y)
            y = int(y)
            count += y
            print(f'+ {y}')
            a = (am+1)*'='
            print(a)
            print(f' {count}')
        else:
            y[ch] = ''
            y = ''.join(y)
            if z == 0 and nummer == 1:
                y = int(y)
                print(f'   {y}')
            elif q == 0 and nummer == 1:
                y = int(y)
                w = (am-1)*""x""
                w = w.replace(""x"", """")
                print(w, y)
            else:
                y = int(y)
                print(f'  {y}')
                y = int(y)

            count += y
            y = str(y)
            y = list(y)
            y = x",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( subscript_expression ( string ) ( ERROR ( identifier ) ( identifier ) ) ( number ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ),"{""filename"":""Yari De Backer/mathemagisch.py"",""fullName"":""Yari De Backer"",""id"":""12916"",""status"":""correct"",""submissionID"":""6009035"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T13:52:25.000Z"",""labels"":""fyss""}"
740,/home/maxiem/Downloads/files/Justine Dejaegher/mathemagisch.py,"# invoer van het getal m
m = input('Wat is het getal?')
lengtem = len(m)
index = 0
som = 0
while index < lengtem:
    n = m[:index] + m[(index + 1):]
    index2 = 0
    while index2 != (len(n) - 1) and n[index2] == '0':
        n = n.replace(n[index2], ' ', 1)
        index2 += 1
    if index == (lengtem - 1):
        o = '+' + ' ' + n
    else:
        o = '  ' + n
    som += int(n)
    index += 1
    print(o)
print('=' * (len(m) + 1))
print('', som)",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ( jsx_namespace_name ( identifier ) ( identifier ) ) ( ERROR ) ( identifier ) ) ( expression_statement ( binary_expression ( array ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( subscript_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Justine Dejaegher/mathemagisch.py"",""fullName"":""Justine Dejaegher"",""id"":""12917"",""status"":""correct"",""submissionID"":""6013826"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:18:54.000Z"",""labels"":""fyss""}"
741,/home/maxiem/Downloads/files/Mauro Van de Veire/mathemagisch.py,"# een willekeurig getal in de vorm van een string adden
m = str(input())
m_lengte = len(m)
som = 0
# van de input telkens het opeenvolgende cijfer weglaten
for x in range(m_lengte):
    getal = m[:x] + m[x + 1:]

    if x == m_lengte - 1:
        print(f'+ {int(getal)}', '=' * (m_lengte + 1), sep='\n')

    else:
        getal = str(getal).lstrip(""0"")
        if getal =='':
            getal = '0'
        print(f'{(getal).rjust(m_lengte + 1)}')
# de som van die getallen optellen

    som += int(getal)
print(str(som).rjust(m_lengte + 1))
",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Mauro Van de Veire/mathemagisch.py"",""fullName"":""Mauro Van de Veire"",""id"":""12919"",""status"":""correct"",""submissionID"":""6021735"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T11:12:27.000Z"",""labels"":""chem""}"
742,/home/maxiem/Downloads/files/Xiebe Stiers/mathemagisch.py,"getal = input('Geef getal: ')
aantal_cijfers = len(getal) - 2
a = 1
som = int(getal[1:len(getal)])
som = str(som)
print('  ' + ' ' * (len(getal) - len(som) - 1) + som)

for i in range(aantal_cijfers):
    optelling = getal[0:a] + getal[a + 1:len(getal)]
    optelling = int(optelling)
    som = int(som)
    som += optelling
    a += 1
    print('  ' + str(optelling))

laatste = int(getal[0:len(getal) - 1])
som += laatste
print('+ ' + str(laatste))
print((len(getal) + 1) * '=')
print(' ' + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ) ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Xiebe Stiers/mathemagisch.py"",""fullName"":""Xiebe Stiers"",""id"":""12923"",""status"":""correct"",""submissionID"":""6012369"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T16:37:02.000Z"",""labels"":""chem""}"
743,/home/maxiem/Downloads/files/Yoran Vanwalleghem/mathemagisch.py,"m = input()
lengte_m = len(m)
n = lengte_m
y = 0
z = 1
while n > 0:
    for i in range(0, lengte_m):
        n -= 1
        x = m[0:i] + m[i+1:lengte_m]
        y += int(x)
        while i == 0 and x[0] == str(0) and len(x) > 1:
            x = x[1:]
            z += 1
        if z == 2 and i == 0:
            print(f""   {x}"")
        elif n > 0:
            print(f""  {x:>{z}s}"")
        else:
            print(f'+ {x}')
print(""=""*(lengte_m+1))
print(f' {y}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( subscript_expression ( identifier ) ( number ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( number ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Yoran Vanwalleghem/mathemagisch.py"",""fullName"":""Yoran Vanwalleghem"",""id"":""12926"",""status"":""correct"",""submissionID"":""5996697"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T15:09:33.000Z"",""labels"":""fyss""}"
744,/home/maxiem/Downloads/files/Simon Van Caenegem/mathemagisch.py,"m = str(input())
sum = 0
for i in range(len(m)-1):
    string = m[:i] + m[i+1:]
    if string[0] != '0':
        print('  ' + string)
        sum += int(string)
    else:
        if int(m) == 70000000000:
            print(len(m)*' ' + '0')
        else:
            print('   ' + string[1:])
            sum += int(string[1:])
        
print('+ ' + m[:-1])
sum += int(m[:-1])
print((len(m)+1)*'=')
print(' ' + str(sum))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Simon Van Caenegem/mathemagisch.py"",""fullName"":""Simon Van Caenegem"",""id"":""8375"",""status"":""correct"",""submissionID"":""5962325"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T13:00:47.000Z"",""labels"":""chem""}"
745,/home/maxiem/Downloads/files/Maxime Byttebier/mathemagisch.py,"#invoeren getal
getal_m = str(input())
cijfer = 0
som = 1
#for loop om cijfers te schrappen
for cijfer in range(len(getal_m)):
    schrappen_getal = getal_m[:cijfer] + getal_m[cijfer + 1:]
    som += int(schrappen_getal)
    cijfer += 1
    x = 0
    while x in range(len(schrappen_getal) - 1) and schrappen_getal[x] == ""0"":
        if schrappen_getal[x] == ""0"":
            schrappen_getal = list(schrappen_getal)
            schrappen_getal[x] = "" ""
            schrappen_getal = """".join(schrappen_getal)
        x += 1
    if cijfer == len(getal_m):
        nieuw_getal = ""+""
    else:
        nieuw_getal = "" ""
    print(nieuw_getal + f'{schrappen_getal:>{len(getal_m)}s}')
#uitvoeren
print((len(getal_m)+1) * ""="")
print(f"" {str(som - 1):>{len(getal_m)}s}"")",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( subscript_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Maxime Byttebier/mathemagisch.py"",""fullName"":""Maxime Byttebier"",""id"":""12932"",""status"":""correct"",""submissionID"":""6033429"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:15:12.000Z"",""labels"":""fyss""}"
746,/home/maxiem/Downloads/files/Kian Simoens/mathemagisch.py,"m = input()
lengte = len(m)
som = 0
for k in range(lengte):
    getal = int(m[:k] + m[k + 1:])
    som += getal
    if k == lengte -1:
        print(f""+ {getal:>{lengte - 1}}"")
    else:
        print(f""{getal:>{lengte + 1}}"")
print((lengte+1)* ""="")
print(f""{som:>{lengte + 1}}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Kian Simoens/mathemagisch.py"",""fullName"":""Kian Simoens"",""id"":""12933"",""status"":""correct"",""submissionID"":""6015563"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:32:36.000Z"",""labels"":""fyss""}"
747,/home/maxiem/Downloads/files/Wout Iterbeke/mathemagisch.py,"x = str(input())
s = 0
k = int(0)

for i in range(len(x)):
    getal = x[:k] + x[(k+1):]

    if getal == '0' * (len(x) - 1):
        print(f'{str(""0"").rjust(len(x) + 1,"" "")}')
    else:
        getal = getal.lstrip('0')
        if k == (len(x) - 1):
            print(f'+{getal.rjust(len(x),"" "")}')
        else:
            print(f'{getal.rjust(len(x) + 1,"" "")}')

        s += int(getal)
    k += 1

print('=' * (len(x) + 1))
print('', s)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( string ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Wout Iterbeke/mathemagisch.py"",""fullName"":""Wout Iterbeke"",""id"":""12935"",""status"":""correct"",""submissionID"":""6031070"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:09:40.000Z"",""labels"":""fyss""}"
748,/home/maxiem/Downloads/files/Quentin Staelens/mathemagisch.py,"cijferreeks = input()
lengtecijferreeks = len(cijferreeks)
nieuwereeks = ''
somnieuwereeksen = 0
posgetal = 0
for cijfer in range(lengtecijferreeks):
    if cijfer == 0:
        nieuwereeks += '  '
        for karakter in range(lengtecijferreeks):
            if cijfer == karakter:
                nieuwereeks += ''
            elif cijferreeks[karakter] == '0'and posgetal == 0 and karakter != (lengtecijferreeks -1):
                nieuwereeks += ' '
            elif cijferreeks[karakter] == '0'and posgetal == 0 and karakter == (lengtecijferreeks -1):
                nieuwcijferreeks = cijferreeks[karakter]
                nieuwereeks += nieuwcijferreeks
            elif cijferreeks[karakter] == '0' and posgetal == 1:
                nieuwcijferreeks = cijferreeks[karakter]
                nieuwereeks += nieuwcijferreeks
            else:
                nieuwcijferreeks = cijferreeks[karakter]
                nieuwereeks += nieuwcijferreeks
                posgetal = 1

        print(nieuwereeks)
        nieuwereeks = int(nieuwereeks)
        somnieuwereeksen += nieuwereeks
        nieuwereeks = str(nieuwereeks)
        nieuwereeks = ''

    else:
        if cijfer == lengtecijferreeks - 1:
            plusstatie = '+ '
            nieuwereeks += ''
        else:
            nieuwereeks += '  '

        for karakter in range(lengtecijferreeks):
            if cijfer == karakter:
                nieuwereeks = nieuwereeks

            else:
                nieuwcijferreeks = cijferreeks[karakter]
                nieuwereeks += nieuwcijferreeks

        if cijfer == lengtecijferreeks - 1:
            print(plusstatie + nieuwereeks)
        else:
            print(nieuwereeks)

        nieuwereeks = int(nieuwereeks)
        somnieuwereeksen += nieuwereeks
        nieuwereeks = str(nieuwereeks)
        nieuwereeks = ''

aantalgelijkteken = (lengtecijferreeks + 1) * '='
print(aantalgelijkteken)
somnieuwereeksen = str(somnieuwereeksen)
print("" "" + somnieuwereeksen)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ),"{""filename"":""Quentin Staelens/mathemagisch.py"",""fullName"":""Quentin Staelens"",""id"":""12222"",""status"":""correct"",""submissionID"":""5987143"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T15:15:28.000Z"",""labels"":""fyss""}"
749,/home/maxiem/Downloads/files/Niels Carlier/mathemagisch.py,"m = str(input())
som = 0
n = len(m) + 1

for i in range(len(m)):
    if i == 0:
        getal = int(m[i+1:])
        print('{0:{lengte}}'.format(getal, lengte = n))
    elif i < len(m) - 1:
        getal = int(m[0:i] + m[i + 1:])
        print('{0:{lengte}}'.format(getal, lengte = n))
    else:
        getal = int(m[:i])
        print('+{0:{lengte}}'.format(getal, lengte = n-1))
    som += int(getal)

print('=' * n, sep = '')
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Niels Carlier/mathemagisch.py"",""fullName"":""Niels Carlier"",""id"":""12936"",""status"":""correct"",""submissionID"":""5904337"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-11T14:12:08.000Z"",""labels"":""fyss""}"
750,/home/maxiem/Downloads/files/Sven Vercauteren/mathemagisch.py,"getal = str(input())
som = 0
for i in range(len(getal)):
    uitvoer = getal[0: i:] + getal[i + 1::]
    while uitvoer[0] == '0' and len(uitvoer)!=1:
        uitvoer= uitvoer[1:len(uitvoer)]


    som += int(uitvoer)
    if i == len(getal) - 1:
        print(f'+ {uitvoer}')
    else:
        print(f'{(uitvoer):>{len(getal) + 1}s}')
print((len(getal) + 1) * '=')
print(f' {som}')

",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ( ERROR ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Sven Vercauteren/mathemagisch.py"",""fullName"":""Sven Vercauteren"",""id"":""7925"",""status"":""correct"",""submissionID"":""5957638"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T09:03:20.000Z"",""labels"":""geog""}"
751,/home/maxiem/Downloads/files/Mortada Benayad/mathemagisch.py,"m = str(input('Getal?: '))

v = 0
L = len(m)
som = 0
for cijf in range(L):
    m1 = m[:cijf]
    m2 = m[cijf+1:]
    get = m1 + m2
    getint = int(get)
    if cijf == L-1:
        print('+'f'{str(getint).rjust(L)}')
    else:
        print(f'{str(getint).rjust(L+1)}')
    som += getint

print(''.rjust(L + 1, '='))
print('', som)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Mortada Benayad/mathemagisch.py"",""fullName"":""Mortada Benayad"",""id"":""12937"",""status"":""correct"",""submissionID"":""6030803"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:54:24.000Z"",""labels"":""fyss""}"
752,/home/maxiem/Downloads/files/Maarten Minnaert/mathemagisch.py,"getal = str(input(""geef een getal""))
lengte = int(len(getal))
lengtenummer= lengte -1
n = 0
som = 0
for index , nummer in enumerate(getal) :
    getalnieuw = getal[:n] + getal[n+1:]
    n += 1
    getalnieuw = int(getalnieuw)
    getalnieuw = str(getalnieuw)
    if index+1 == lengte: print(f'+ {getalnieuw}')
    else: print(f""  {getalnieuw :>{lengtenummer}s}"")
    som += int(getalnieuw)
print('='*(lengte+1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Maarten Minnaert/mathemagisch.py"",""fullName"":""Maarten Minnaert"",""id"":""12939"",""status"":""correct"",""submissionID"":""5959305"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T11:16:51.000Z"",""labels"":""geol""}"
753,/home/maxiem/Downloads/files/Ferre Despierre/mathemagisch.py,"I = str(input())
l = len(I)
S = 0

for i in range(0, l):
    Deel1 = I[:i]
    Deel2 = I[i+1:]
    nieuwe_str = Deel1 + Deel2
    if i == l-1:
        nieuwe_int = int(nieuwe_str)
        print('+' f""{str(nieuwe_int).rjust(l)}"")
    else:
        nieuwe_int = int(nieuwe_str)
        print(f""{str(nieuwe_int).rjust(l+1)}"")
    S += int(nieuwe_str)
    i += 1

print(''.rjust(l + 1, '='))
print('', S)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Ferre Despierre/mathemagisch.py"",""fullName"":""Ferre Despierre"",""id"":""12940"",""status"":""correct"",""submissionID"":""6008669"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T13:36:44.000Z"",""labels"":""fyss""}"
754,/home/maxiem/Downloads/files/Arthur Vanhaverbeke/mathemagisch.py,"cijfer = input()
eindcijfer = 0
for i in range(len(cijfer)):
    if i == len(cijfer) - 1:
        schrap = cijfer[:i] + cijfer[i + 1:]
        schrap = str(int(schrap))
        eindcijfer += int(schrap)
        print('+', schrap.rjust(len(cijfer) - 1 ))
    else:
        schrap = cijfer[:i] + cijfer[i + 1:]
        schrap = str(int(schrap))
        eindcijfer += int(schrap)
        print(schrap.rjust(len(cijfer) + 1))

print(''.rjust(len(cijfer) + 1,'='))
print(str(eindcijfer).rjust(len(cijfer) + 1))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ),"{""filename"":""Arthur Vanhaverbeke/mathemagisch.py"",""fullName"":""Arthur Vanhaverbeke"",""id"":""12941"",""status"":""correct"",""submissionID"":""6012241"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T16:28:25.000Z"",""labels"":""fyss""}"
755,/home/maxiem/Downloads/files/Dries Kallaert/mathemagisch.py,"number = input()
x = 0
u = int(len(number))
for n in range(u):
    if n == u - 1:
        y = list(number)
        del(y[n])
        h = 0
        while y[h] == '0':
            del(y[h])
            h += 1
        z = """".join(y)
        i = (len(number) - len(z)) * ' '
        print(f'+{i}{z}')
        z = int(z)
        x += z
    else:
        y = list(number)
        del (y[n])
        h = 0
        while y[h] == '0' and len(y) != 1:
            del (y[h])
        z = """".join(y)
        i = ((len(number) + 1) - len(z)) * ' '
        print(f'{i}{z}')
        z = int(z)
        x += z
print((u + 1) * '=')
print(f' {x}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Dries Kallaert/mathemagisch.py"",""fullName"":""Dries Kallaert"",""id"":""12942"",""status"":""correct"",""submissionID"":""6033228"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:02:41.000Z"",""labels"":""fyss""}"
756,/home/maxiem/Downloads/files/Hannelore Van Haelst/mathemagisch.py,"# getal inlezen
getal = input()
# lengte van het getal
lengte_getal = len(getal)
# elementen
som = 0
for i in range(lengte_getal - 1):
    element = getal[i]
    # element wegschrappen
    getal_zonder_element = int(getal[:i] + getal[i+1:])
    som = som + getal_zonder_element
    getal_zonder_element = f""{str(getal_zonder_element):>{lengte_getal + 1}s}""
    print(str(getal_zonder_element))
element = getal[:lengte_getal - 1]
# element wegschrappen
getal_zonder_element = int(getal[:lengte_getal - 1] + getal[lengte_getal:])
som = som + getal_zonder_element
print('+ ' + str(getal_zonder_element))
print(f'=' * (lengte_getal + 1))
print(' ' + str(som))",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Hannelore Van Haelst/mathemagisch.py"",""fullName"":""Hannelore Van Haelst"",""id"":""12944"",""status"":""correct"",""submissionID"":""6013627"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:01:39.000Z"",""labels"":""fyss""}"
757,/home/maxiem/Downloads/files/Ewout Lemmens/mathemagisch.py,"Number = input()
Line = len(Number)
Value = 0

while Line != 0:
    Easter_Egg = int(Number[:len(Number) - Line] + Number[len(Number) - Line + 1:])
    Value += Easter_Egg
    Line -= 1
    Difference_L = len(Number) - len(str(Easter_Egg))
    if Line != 0:
        Space = "" "" * (Difference_L + 1)
    else:
        Space = ""+"" + "" "" * Difference_L
    print(Space + str(Easter_Egg))
print(""="" * (len(Number) + 1) + ""\n"" + "" "" + str(Value))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( string ( escape_sequence ) ) ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Ewout Lemmens/mathemagisch.py"",""fullName"":""Ewout Lemmens"",""id"":""12945"",""status"":""correct"",""submissionID"":""6011047"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:27:05.000Z"",""labels"":""fyss""}"
758,/home/maxiem/Downloads/files/Lucas Claus/mathemagisch.py,"import string
getal = str(input())
som = 0
t = len(getal)
n = (t + 1)


for x in range(0, t):
    samen = getal[:x] + getal[x+1:]
    som += int(samen)
    if samen == (t-1)*'0':
        samen = samen.lstrip('0') + '0'
    else:
        samen = samen.lstrip('0')
    if x == t-1:
        print('+'f""{samen:>{t}s}"")
    else:
        print(f""{samen:>{n}s}"")

som = str(som)
print((t+1)*'=')
print(f""{som:>{n}s}"")",( program ( expression_statement ( import ) ( ERROR ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Lucas Claus/mathemagisch.py"",""fullName"":""Lucas Claus"",""id"":""12947"",""status"":""correct"",""submissionID"":""5974002"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T07:43:28.000Z"",""labels"":""fyss""}"
759,/home/maxiem/Downloads/files/Tom Burgelman/mathemagisch.py,"number = input()
x = 0
u = int(len(number))
for n in range(u):
    if n == u - 1:
        y = list(number)
        del(y[n])
        h = 0
        while y[h] == '0':
            del(y[h])
            h += 1
        z = """".join(y)
        i = (len(number) - len(z)) * ' '
        print(f'+{i}{z}')
        z = int(z)
        x += z
    else:
        y = list(number)
        del (y[n])
        h = 0
        while y[h] == '0' and len(y) != 1:
            del (y[h])
        z = """".join(y)
        i = ((len(number) + 1) - len(z)) * ' '
        print(f'{i}{z}')
        z = int(z)
        x += z
print((u + 1) * '=')
print(f' {x}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Tom Burgelman/mathemagisch.py"",""fullName"":""Tom Burgelman"",""id"":""12948"",""status"":""correct"",""submissionID"":""5977352"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T12:30:02.000Z"",""labels"":""fyss""}"
760,/home/maxiem/Downloads/files/Maxim Ketels/mathemagisch.py,"number = input()
line = '=='
addition = 0
for i in range(0, len(number) - 1):
    getal = int(number[:i] + number[i + 1:])
    
    # correct amount of spaces
    if len(str(getal)) < len(number) -1:
        space = ' ' * (len(number) - len(str(getal)) + 1)
        print(space + str(getal))
    else:
        print('  ' + str(getal))
    addition += getal
    line += '='
getal = int(number[:len(number) - 1] + number[len(number):])
print('+ ' + str(getal))
addition += int(getal)
print(line)
print(' ' + str(addition))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( subscript_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Maxim Ketels/mathemagisch.py"",""fullName"":""Maxim Ketels"",""id"":""12949"",""status"":""correct"",""submissionID"":""6016046"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T21:32:52.000Z"",""labels"":""fyss""}"
761,/home/maxiem/Downloads/files/Luka Berquin/mathemagisch.py,"getal = input()
LIJN = '='
Som = 0
i = 0
k = 0
getal2 = '         0'
for i in range(len(getal)):
    left = getal[:i]
    right = getal[i+1:]
    getal1 = left + right
    i += 1
    gevonden = False
    if getal1[0] == '0':
        while not gevonden:
            for m in range(len(getal1)):
                if getal[m] == '0':
                    a = getal[m]
                    b = ' '
                    getal1 = getal1.replace(a, b)
                else:
                    gevonden = True
    if getal1 == '          ':
        getal1 = getal2
    if i == len(getal):
        print(f'+ {getal1}')
    else:
        print(f'  {getal1}')
    LIJN += '='
    Som += int(getal1)
print(LIJN)
print(f' {Som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Luka Berquin/mathemagisch.py"",""fullName"":""Luka Berquin"",""id"":""12950"",""status"":""correct"",""submissionID"":""6019658"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:30:46.000Z"",""labels"":""fyss""}"
762,/home/maxiem/Downloads/files/Nico Seghers/mathemagisch.py,"# Het getal opvragen en enkele parameters bepalen
getal = str(input())
n = len(getal)
lijst = []

# De geschrapte getallen bepalen en uitprinten
for i in range(n):
    if i == n - 1:
        nieuw_getal = int(getal[:i])
        print(f'+ {nieuw_getal}')
    else:
        nieuw_getal = int(getal[: i] + getal[i + 1:])
        print((f'{nieuw_getal}').rjust(n + 1))
    lijst.append(nieuw_getal)

# Laatste twee regels uitprinten
print((n + 1) * '=')
print(f' {sum(lijst)}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( parenthesized_expression ( ERROR ( identifier ) ) ( string ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Nico Seghers/mathemagisch.py"",""fullName"":""Nico Seghers"",""id"":""12951"",""status"":""correct"",""submissionID"":""6014360"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:55:57.000Z"",""labels"":""fyss""}"
763,/home/maxiem/Downloads/files/Kasper De Vyt/mathemagisch.py,"# -*- coding: utf-8 -*-
""""""
Created on Mon Oct 19 13:53:09 2020

@author: Trigg
""""""

I = input()
L = len(I)
S = 0

for i in range(0, L):
    #print(i)
    Deel1 = I[:i]
    Deel2 = I[i+1:]
    strong = Deel1 + Deel2
    
    
    if i == L-1:
        inter = int(strong)
        print('+'f""{str(inter).rjust(L)}"")
        
    else:
        inter = int(strong)
        print(f""{str(inter).rjust(L+1)}"")
        
    S += int(strong)
    i += 1
    
    
print(''.rjust(L + 1, '='))    
print('', S)
",( program ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( binary_expression ( unary_expression ( ERROR ( unary_expression ( identifier ) ) ) ( identifier ) ) ( number ) ) ( ERROR ) ( unary_expression ( ERROR ( string ) ) ( string ) ) ) ) ( expression_statement ( string ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( call_expression ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Kasper De Vyt/mathemagisch.py"",""fullName"":""Kasper De Vyt"",""id"":""12952"",""status"":""correct"",""submissionID"":""6008749"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T13:39:58.000Z"",""labels"":""fyss""}"
764,/home/maxiem/Downloads/files/Mendel Debrabandere/mathemagisch.py,"number = input()
line = '=='
addition = 0
for i in range(0, len(number) - 1):
    getal = int(number[:i] + number[i + 1:])

    # correct amount of spaces
    if len(str(getal)) < len(number) -1:
        space = ' ' * (len(number) - len(str(getal)) + 1)
        print(space + str(getal))
    else:
        print('  ' + str(getal))
    addition += getal
    line += '='
getal = int(number[:len(number) - 1] + number[len(number):])
print('+ ' + str(getal))
addition += int(getal)
print(line)
print(' ' + str(addition))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( subscript_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Mendel Debrabandere/mathemagisch.py"",""fullName"":""Mendel Debrabandere"",""id"":""12953"",""status"":""correct"",""submissionID"":""6028194"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T14:48:58.000Z"",""labels"":""fyss""}"
765,/home/maxiem/Downloads/files/Nina Sterckx/mathemagisch.py,"m = input()
n = len(m)

som = 0
for i in range(n - 1):
    x = m[:i] + m[i + 1:]
    som += int(x)
    if x[0] == '0':
        x = x.replace(""0"", "" "", n - 2)
    print(f'  {x}')
x = m[:(n - 1)]
som += int(x)
print(f'+ {x}')
print('=' * (n + 1))
print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Nina Sterckx/mathemagisch.py"",""fullName"":""Nina Sterckx"",""id"":""12954"",""status"":""correct"",""submissionID"":""6015120"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T19:54:05.000Z"",""labels"":""fyss""}"
766,/home/maxiem/Downloads/files/Arne Dhont/mathemagisch.py,"# inlezen
x = input()
som = 0
n = len(x)
gelijkaan = '='
c = ' '
for i in range(n):

    b = x[:i] + x[i+1:]
    b = int(b)
    gelijkaan += '='
    som += b
    b = str(b)
    if i == n-1:
        print(f'+ {b}')
    elif len(b) < n-1 and b != '0':
        print(f'   {b}')
    elif b == '0':
        for j in range(n-2):
            c += ' '
        print(c,b)
    else:
        print(f'  {b}')
print(gelijkaan)
print(f' {som}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Arne Dhont/mathemagisch.py"",""fullName"":""Arne Dhont"",""id"":""12955"",""status"":""correct"",""submissionID"":""5935624"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T13:30:00.000Z"",""labels"":""fyss""}"
767,/home/maxiem/Downloads/files/Fedra Moeykens/mathemagisch.py,"# sla het inputgetal op als een string. 

n = str(input('geef het eerste getal:'))

index = 0

rij = n

x = len(n)

som = 0

for index in range (x):
    if index == 0:
        volgende = rij[index + 1:index + x]
        if volgende[0] == '0' and volgende != '0000000000': 
            volgende = ' ' + rij[index + 2:index + x]
        elif volgende == '0000000000':
            volgende ='         0'
        print('  'f'{volgende}')
    elif index < x - 1:
        volgende = rij[ :index] + rij[index + 1:x]
        print('  'f'{volgende}')
    else:
        volgende = rij[:x - 1]
        print('+ 'f'{volgende}')
    index += 1
    som += int (volgende) 

t = str('='* (x+1))

print(t)

print(' 'f'{som}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( assignment_expression ( member_expression ( identifier ) ( property_identifier ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( subscript_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Fedra Moeykens/mathemagisch.py"",""fullName"":""Fedra Moeykens"",""id"":""12956"",""status"":""correct"",""submissionID"":""6030068"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:19:22.000Z"",""labels"":""fyss""}"
768,/home/maxiem/Downloads/files/Simon Lambrecht/mathemagisch.py,"m = input()
n = len(m)

r = 0
berekend_nummer = 0

while r <= n:
    if r == n:
        nummer = m[(r+1):]
        print(""+ "" + nummer)
    else:
        nummer = m[:r] + m[(r+1):]
        print(""  "" + nummer)
    int_nummer = int(nummer)
    berekend_nummer += int_nummer
    r += 1

str_berekend_nummer = str(berekend_nummer)
print(""="" * (r))
print("" "" + str_berekend_nummer)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ),"{""filename"":""Simon Lambrecht/mathemagisch.py"",""fullName"":""Simon Lambrecht"",""id"":""12957"",""status"":""runtime error"",""submissionID"":""6033853"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:39:47.000Z"",""labels"":""fyss""}"
769,/home/maxiem/Downloads/files/Ahmed Karakaçi/mathemagisch.py,"n = str(input())
l = []
z = 10
stanis = len(n) + 1
rene = stanis * ""=""
for k in n:
    l.append(int(k))

mart = 0
for i in range(len(l)):
    x = l[i]
    l[i] = ''
    #print(l)
    m = ''
    for j in range(len(l)):
        if j != i:
            m += str(l[j])
    mart += int(m)

    l[i] = x
    if i < len(l) - 1:
        if m == ""0000000000"":
            print(""           "" + '0')
        elif m[0] == '0' and m[1] != ""0"":

            print(""   ""+ m.lstrip(""0""))
       # elif m == ''
        else:
            print(""  "" + m)
    else:
        print(""+ "" + m)


print(rene)
print("" "" + str(mart))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( string ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( subscript_expression ( string ) ( ERROR ( identifier ) ( identifier ) ) ( number ) ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Ahmed Karakaçi/mathemagisch.py"",""fullName"":""Ahmed Karakaçi"",""id"":""12946"",""status"":""correct"",""submissionID"":""5981988"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T22:22:47.000Z"",""labels"":""fyss""}"
770,/home/maxiem/Downloads/files/Arno De Pauw/mathemagisch.py,"getal = input()
out = 0
lengte = len(getal)

for i in range(lengte):
    nr = getal[:i] + getal[i + 1:]
    out += int(nr)
    nr = nr.lstrip('0')
    if i == lengte - 1:
        print(f'+ {nr}')
    else:
        if nr == '':
            nr = 0
        print(f'{nr:>{lengte + 1}}')

print((lengte + 1)*'=')
print(f' {out}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Arno De Pauw/mathemagisch.py"",""fullName"":""Arno De Pauw"",""id"":""12958"",""status"":""correct"",""submissionID"":""6032626"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T18:25:26.000Z"",""labels"":""fyss""}"
771,/home/maxiem/Downloads/files/Youp Tulpin/mathemagisch.py,"getal = str(input())
streep = []
n = 0
m = 1
x = 0
som = 0
getalprinter = 0
line = (len(getal) + 1)


def split(getal):
    return list(getal)


getalsplitter = list(getal)
counter = len(getal)

while n != (counter - 1):
    getalsplitter = list(getal)
    getalsplitter.pop(n)
    if getalsplitter[0] == ""0"":
        while getalsplitter[m] == ""0"" and m < (counter - 2):
            getalsplitter[m] = "" ""
            m += 1
        getalsplitter[0] = "" ""
    print(""  "", """".join(getalsplitter), sep="""")
    getalprinter = """".join(getalsplitter)
    som += int(getalprinter)
    n += 1
getalsplitter = list(getal)
getalsplitter.pop(-1)
last = int("""".join(getalsplitter))
print(""+"", last)
som += last
while x != line:
    streep.append(""="")
    x += 1
print("""".join(streep), sep="""")
print("" "", som, sep="""")
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( return_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( string ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( number ) ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( unary_expression ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ),"{""filename"":""Youp Tulpin/mathemagisch.py"",""fullName"":""Youp Tulpin"",""id"":""12959"",""status"":""correct"",""submissionID"":""6014140"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:41:53.000Z"",""labels"":""fyss""}"
772,/home/maxiem/Downloads/files/Caroline Withofs/mathemagisch.py,"m = str(input())
l = len(m)
x = 0
lijst = []
getal = ''
n = ''

while x < l-1:
    getal = int(m[:x] + m[x + 1:])
    lijst.append(getal)
    n = ((l + 1)-len(str(getal)))*' '
    print(n + str(getal))
    x += 1

if (l - 1) == x:
    getal = int(m[:x])
    n = ((l - len(str(getal))))* ' '
    print(f'+{n + str(getal)}')
    lijst.append(int(getal))

print((l+1)*'=')
print(f' {sum(lijst)}')











",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Caroline Withofs/mathemagisch.py"",""fullName"":""Caroline Withofs"",""id"":""12102"",""status"":""correct"",""submissionID"":""6030983"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:03:59.000Z"",""labels"":""bcbt""}"
773,/home/maxiem/Downloads/files/Fangio De Caluwe/mathemagisch.py,"getal = input()
n = 0
lengte = len(getal)
som = 0
k = getal[1]

for x in range(0, lengte):
    links = getal[:n]
    rechts = getal[n + 1:]
    samen = links + rechts
    n +=1
    som += int(samen)
    if n == lengte:
        print(f'+{samen:>{lengte}s}')
    else:
        if samen.lstrip(""0"") == '':
            print(f'{""0"":>{lengte + 1}s}')
        elif k == '0':
            print(f'{samen.lstrip(""0""):>{lengte + 1}s}')
        else:
            print(f'{samen.lstrip(""0""):>{lengte + 1}s}')


gelijk_aan = lengte * '='
print(f'{gelijk_aan}=')
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( identifier ) ( ERROR ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( ERROR ( string ) ) ( identifier ) ( ERROR ( identifier ) ( number ) ( string ) ( number ) ( string ) ( number ) ) ) ),"{""filename"":""Fangio De Caluwe/mathemagisch.py"",""fullName"":""Fangio De Caluwe"",""id"":""12963"",""status"":""correct"",""submissionID"":""6011912"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T16:10:38.000Z"",""labels"":""fyss""}"
774,/home/maxiem/Downloads/files/Jelle Provost/mathemagisch.py,"# invoer getal
getal = input()
# startwaarden
aantal = len(getal)
som = 0
y = aantal + 1
# som maken
for index, cijfer in enumerate(getal):
    if getal.count(cijfer) >= 2:
        x = getal.strip(cijfer)
    else:
        x = getal.replace(cijfer, '', 1)
    som += int(x)
    if index != -1:
        print(f'  {x}')
    else:
        print(f'+ {x}')
print('=' * y)
print(f' {som}')",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( string ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( unary_expression ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jelle Provost/mathemagisch.py"",""fullName"":""Jelle Provost"",""id"":""12964"",""status"":""wrong"",""submissionID"":""6009053"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T13:53:05.000Z"",""labels"":""fyss""}"
775,/home/maxiem/Downloads/files/Stefan Vulpe/mathemagisch.py,"m = str(input())

i = 0
l = int(len(m) + 1)

while i != len(m):
    getal = m.replace(m[i], """")
    if i == len(m) - 1:
        print(f""+{getal}"")
    print(f""{getal}"")
    i += 1
else:
    print(l * ""="")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ) ),"{""filename"":""Stefan Vulpe/mathemagisch.py"",""fullName"":""Stefan Vulpe"",""id"":""12965"",""status"":""wrong"",""submissionID"":""6033379"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:12:21.000Z"",""labels"":""fyss""}"
776,/home/maxiem/Downloads/files/Brando Alabodi/mathemagisch.py,"m_getal = input()
som = 0
hoeveelelementen = len(m_getal)

for pos in range(0, hoeveelelementen):
    if pos == hoeveelelementen - 1: #voor het LAATSTE NIEUWE GETAL moet een '+' komen 
        lijst = list(m_getal)
        del(lijst[pos])
        welkcijfer = 0
        
        while lijst[welkcijfer] == '0':
            del(lijst[welkcijfer])
            welkcijfer += 1           #naar volgend cijfer
        nieuwgetal = """".join(lijst)    # AANGEPASTE LIJST // GETAL toevoegen aan niets of """" 
        aantalspaties = (hoeveelelementen - len(nieuwgetal)) * "" "" #aantal spaties extra links = lengtegetal -lengte nieuwgetal
        
        print(f'+{aantalspaties}{nieuwgetal}')
        
        nieuwgetal = int(nieuwgetal)
        som += nieuwgetal
    
    else:
        lijst = list(m_getal)
        del(lijst[pos])
        welkcijfer = 0
        
        while lijst[welkcijfer] == '0' and len(lijst) != 1:
            del(lijst[welkcijfer])                          #voorloopnullen wegwerken "" als 0 vooraan , del(0)""
        nieuwgetal = """".join(lijst)
        aantalspaties = ((hoeveelelementen + 1) - len(nieuwgetal)) * "" ""
        
        print(f'{aantalspaties}{nieuwgetal}')
        nieuwgetal = int(nieuwgetal)
        som += nieuwgetal
print((hoeveelelementen + 1) * '=')
print(f' {som}')   #f' ' want SPATIE invullen VOOR som'
   ",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( string ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( ERROR ( number ) ( ERROR ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ) ( identifier ) ) ( comment ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( string ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ) ( identifier ) ( string ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ),"{""filename"":""Brando Alabodi/mathemagisch.py"",""fullName"":""Brando Alabodi"",""id"":""12966"",""status"":""correct"",""submissionID"":""5982975"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T08:47:36.000Z"",""labels"":""fyss""}"
777,/home/maxiem/Downloads/files/Robbe Bilteryst/mathemagisch.py,"#het getal
getal = input()
lengte = len(getal)

#de som
som = 0
for i in range(lengte-1):
    deel1 = getal[:i]
    deel2 = getal[(i + 1):]
    optelGetal = int(deel1 + deel2)
    som += optelGetal
    print(str(optelGetal).rjust(lengte +1))
deel = getal[:lengte - 1]
optelGetal = int(deel)
som += optelGetal

#uitkomst
print('+ ' + str(optelGetal))
gelijkAan = '=' * (lengte + 1)
print(gelijkAan)
print(' ' + str(som))
",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Robbe Bilteryst/mathemagisch.py"",""fullName"":""Robbe Bilteryst"",""id"":""12967"",""status"":""correct"",""submissionID"":""5996341"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T14:45:44.000Z"",""labels"":""fyss""}"
778,/home/maxiem/Downloads/files/Wout Voet/mathemagisch.py,"c = input()
l = len(c)
t = 0
for i in range(l):
    n = c[:i] + c[i+1:]
    t += int(n)
    n = n.lstrip(""0"")
    if i == l-1:
        print(f'+ {n}')
    else:
        if n == '':
            n = 0
        print(f'{n:>{l+1}}')
print((l+1)*'=')
print(f' {t}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Wout Voet/mathemagisch.py"",""fullName"":""Wout Voet"",""id"":""12968"",""status"":""correct"",""submissionID"":""6033292"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:07:14.000Z"",""labels"":""fyss""}"
779,/home/maxiem/Downloads/files/Matisse Van Den Berghe/mathemagisch.py,"# invoer
getal = str(input(""getal = ""))
som = 0
# bewerking
n = 0
for n in range(len(getal)):
 korter_getal = getal[:n] + getal[n + 1:]
 int_korter_getal = int(korter_getal)
 str_korter_getal = str(int_korter_getal)
 grens = ""="" * (len(getal)+1)
 som = som + int(korter_getal)
# uitvoer
 if n == len(getal)-1:
  print(f'+{str_korter_getal:>{len(getal)}s}')
  print(f""{grens}"")
  print(f'{str(som):>{len(getal)+1}s}')
 else:
  print(f'{str_korter_getal:>{len(getal)+1}s}')
",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Matisse Van Den Berghe/mathemagisch.py"",""fullName"":""Matisse Van Den Berghe"",""id"":""12074"",""status"":""correct"",""submissionID"":""6012902"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T17:12:05.000Z"",""labels"":""bcbt""}"
780,/home/maxiem/Downloads/files/Senne Roels/mathemagisch.py,"getal = input()
lijn = ""=""
som =0
i =0
k =0
getal2 = ""         0""
for i in range(len(getal)):
    links = getal [:i]
    rechts = getal [i+1:]
    getal1 = links + rechts
    i += 1
    gevonden = False
    if getal1[0] == ""0"":
        while not gevonden:
            for m in range(len(getal1)):
                if getal[m] == ""0"":
                    a= getal[m]
                    b= "" ""
                    getal1 = getal1.replace(a , b)
                else:
                    gevonden = True
    if getal1 == ""          "":
        getal1 = getal2
    if i == len(getal):
        print(f'+ {getal1}')
    else:
        print(f'  {getal1}')
    lijn += ""=""
    som += int(getal1)
print(lijn)
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( string ) ) ) ( expression_statement ( identifier ) ) ( labeled_statement ( statement_identifier ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Senne Roels/mathemagisch.py"",""fullName"":""Senne Roels"",""id"":""12971"",""status"":""correct"",""submissionID"":""6032848"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T18:38:34.000Z"",""labels"":""fyss""}"
781,/home/maxiem/Downloads/files/Jef Philippé/mathemagisch.py,"getal = input()
getals = str(getal)
lengte = len(getals)
som = 0
code = ''
index1 = 0
for index, cijfer in enumerate(getals):
    if index == lengte -1:
        index1 = index + 1
        code = getals[:index] + getals[index1:]  # kijk hoe je moet printen en hoe je moet printen met laatste index
        code = int(code)
        print(f'+ {code}')
        som += int(code)
    else:
        index1 = index + 1
        code = getals[:index] + getals[index1:] #kijk hoe je moet printen en hoe je moet printen met laatste index
        code = int(code)
        print(f'  {code}')
        som += int(code)
gelijkaanteken = '='*(lengte + 1)
print(gelijkaanteken)
print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( ERROR ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jef Philippé/mathemagisch.py"",""fullName"":""Jef Philippé"",""id"":""12972"",""status"":""wrong"",""submissionID"":""5995005"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T13:17:25.000Z"",""labels"":""fyss""}"
782,/home/maxiem/Downloads/files/Berend Hens/mathemagisch.py,"# invoer van het getal m
m = str(input('Getal m: '))

# cijfer dat eruit moet
n = 1
k = len(m)
gelijk = ['=']

# eerste getal uitschrijven
getal = int(m[1:k])
print(f'{getal:{(k + 1)}d}'.format(getal))
som = getal

# om de beurt verwijderen van cijfers
for n in range(1, k):
    volgendgetal = int(m[0:n] + m[(n + 1):k])
    n += 1
    som += volgendgetal
    if n <= k - 1:
        print(f'{volgendgetal:{(k + 1)}d}'.format(volgendgetal))
    else:
        print(f'+ {volgendgetal}')
        gelijk = (k + 1) * gelijk
        gelijk = ''.join(gelijk)
        print(gelijk)
        print(f'{som:{(k + 1)}d}'.format(som))





",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( string ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Berend Hens/mathemagisch.py"",""fullName"":""Berend Hens"",""id"":""12973"",""status"":""correct"",""submissionID"":""6021046"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T10:27:50.000Z"",""labels"":""fyss""}"
783,/home/maxiem/Downloads/files/Molly Staelens/mathemagisch.py,"cijfer = input(""Geef een cijfer:"")
lengte = len(cijfer)

counter = 2

a = cijfer[1:lengte]

print(f' {int(a):>{lengte}}')

sum = int(a)

while counter < lengte:
    b = (cijfer[0:counter-1] + cijfer[counter:lengte])
    sum = sum + int(b)
    print(""  "" + b)
    counter += 1

c = cijfer[0:lengte-1]
sum = sum + int(c)


print(""+ "" + c)
print(""=""*(lengte+1))
print("" "" + str(sum))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Molly Staelens/mathemagisch.py"",""fullName"":""Molly Staelens"",""id"":""12098"",""status"":""correct"",""submissionID"":""5921420"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-12T16:15:05.000Z"",""labels"":""bcbt""}"
784,/home/maxiem/Downloads/files/Zoltan Mertens/mathemagisch.py,"getal = input()
som = 0
a = 0
for i in range(len(getal)):
    if i != (len(getal) - 1):
        omgevormd = getal[0:i] + getal[i+1:]
        if omgevormd[0] == '0':
            a = omgevormd.lstrip('0')
            if a == '':
                print((' ' * (len(getal) - 1)), '0')
            else:
                a = int(a)
                som += a
                print(f'   {a}')
        else:
            som += int(omgevormd)
            print(f'  {omgevormd}')
            omgevormd = str(omgevormd)
    else:
        omgevormd = getal[0:i] + getal[i+1:]
        som += int(omgevormd)
        print(f'+ {omgevormd}')
        omgevormd = str(omgevormd)
print('=' * (len(getal) + 1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Zoltan Mertens/mathemagisch.py"",""fullName"":""Zoltan Mertens"",""id"":""12976"",""status"":""correct"",""submissionID"":""6030686"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:48:53.000Z"",""labels"":""geog""}"
785,/home/maxiem/Downloads/files/Christopher Boateng/mathemagisch.py,"getal = str(input())

result = """"
som = 0
w = 0

for m in range(len(getal)):
    y = getal.split(getal[w], 1)
    deel_1 = y[0]
    deel_2 = y[1]
    result += (deel_1 + deel_2)
    som += int(result)
    if int(w) == (len(getal)-1):
        print(""+ {}"".format(str(int(result))))
        result = """"
    else:
        print(""  {}"".format(str(int(result))))
        result = """"
    w += 1

gelijkheidsteken_ = ""="" * (int(len(getal)) + 1)
print(gelijkheidsteken_)
print("" {}"".format(som))
som = 0
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ),"{""filename"":""Christopher Boateng/mathemagisch.py"",""fullName"":""Christopher Boateng"",""id"":""12977"",""status"":""wrong"",""submissionID"":""6033604"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:24:30.000Z"",""labels"":""fyss""}"
786,/home/maxiem/Downloads/files/Chloe De Noble/mathemagisch.py,"m = int(input(""geef het getal""))
string_m = str(m)
n = len(string_m)
som = 0
for i in range(0, n):
    getal_min_cijfer = str(int(string_m[0:1] + string_m[i + 1:]))
    som += int(getal_min_cijfer)
    if i == (n - 1):
        print(f""+ {getal_min_cijfer}"")
        
    else:
        print(f""{getal_min_cijfer:>{n + 1}s}"")
        
lijn = ""="" * (n+1)
print(f""{lijn}"")
string_som = str(som)
print(f""{string_som:>{n + 1}s}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Chloe De Noble/mathemagisch.py"",""fullName"":""Chloe De Noble"",""id"":""12094"",""status"":""wrong"",""submissionID"":""6031739"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:42:46.000Z"",""labels"":""bcbt""}"
787,/home/maxiem/Downloads/files/Elise Moelaert/mathemagisch.py,"getal = str(input())
lengte = len(getal)
totaal = 0

for index, karakter in enumerate(getal):
    if index > 0:
        nieuw_getal = getal[:index] + getal[index+1:]
    else:
        nieuw_getal = getal[index+1:]
    totaal += int(nieuw_getal)
    if index == (lengte-1):
        print(f'+ {str(int(nieuw_getal)) :>{lengte-1}s}')
    else:
        print(f'{str(int(nieuw_getal)) :>{lengte+1}s}')

print('=' *(lengte + 1))
print(f'{str(totaal):>{lengte+1}s}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Elise Moelaert/mathemagisch.py"",""fullName"":""Elise Moelaert"",""id"":""12111"",""status"":""correct"",""submissionID"":""6031189"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:14:53.000Z"",""labels"":""bcbt""}"
788,/home/maxiem/Downloads/files/Jasper Sey/mathemagisch.py,"#invoer
cijfer = input('Geef een cijfer')

lengte = len(cijfer)

tot = 0
for i in range(lengte):
        nummer = cijfer[:i] + cijfer[i+1:]
        tot += int(nummer)
        nummer = nummer.lstrip('0')
        if i == lengte - 1:
                print(f'+ {nummer}')
        else:
            if nummer == '':
                        nummer = 0
            print(f'{nummer:>{lengte + 1 }}')

print((lengte+1)*'=')
print(f' {tot}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jasper Sey/mathemagisch.py"",""fullName"":""Jasper Sey"",""id"":""12980"",""status"":""correct"",""submissionID"":""6013972"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:31:02.000Z"",""labels"":""chem""}"
789,/home/maxiem/Downloads/files/Rune Coeman/mathemagisch.py,"m = input(""Kies een getal "")

n = len(m)

uitkomst = 0

for a in range(n):
    cijfer = m[0:a] + m[a+1:n]

    uitkomst += int(cijfer)

    cijfer = cijfer.lstrip(""0"")

    if a == (n - 1):
        print(f'+ {cijfer}')
    else:
        if cijfer == '':
            cijfer = 0
        print(f'{cijfer:>{n + 1}}')

print((n + 1)*'=')
print(f' {uitkomst}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Rune Coeman/mathemagisch.py"",""fullName"":""Rune Coeman"",""id"":""12979"",""status"":""correct"",""submissionID"":""6029646"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:01:51.000Z"",""labels"":""chem""}"
790,/home/maxiem/Downloads/files/Arne Maene/mathemagisch.py,"getal = input()
n = len(getal)
getal_3 = ''
getal_4 = 0
for index, karakter in enumerate(getal):
    getal_2 = getal[0:index] + getal[index+1:]
    getal_3 = int(getal_2)
    getal_4 += getal_3
    if index == (n-1):
        print(f'+{getal_3:>{n}}')
    else:
        print(f' {getal_3:>{n}}')
print((n+1) * '=')
print(f' {getal_4}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Arne Maene/mathemagisch.py"",""fullName"":""Arne Maene"",""id"":""12981"",""status"":""correct"",""submissionID"":""5996223"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T14:37:04.000Z"",""labels"":""geol""}"
791,/home/maxiem/Downloads/files/Phileas Massün/mathemagisch.py,"getal = input()
Lengte = len(getal)
start = 0
for nummer in range(0, Lengte):
    eerste = getal[:nummer]
    tweede = getal[nummer+1:]
    cijfer = eerste + tweede
    if nummer == Lengte-1:
        waarde = int(cijfer)
        print('+'f""{str(waarde).rjust(Lengte)}"")
    else:
        waarde = int(cijfer)
        print(f""{str(waarde).rjust(Lengte+1)}"")
    start += int(cijfer)
    nummer += 1
print(''.rjust(Lengte + 1, '='))
print(f' {start}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Phileas Massün/mathemagisch.py"",""fullName"":""Phileas Massün"",""id"":""12982"",""status"":""correct"",""submissionID"":""6028304"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T14:53:50.000Z"",""labels"":""fyss""}"
792,/home/maxiem/Downloads/files/Thomas Vandenbergh/mathemagisch.py,"getal= input()
positie = 0
som = 0
x = ' '
y = '='
nul = True
#bepalen nieuw getal
for k in range(len(getal)):
    nieuw_getal= getal[0:positie] + getal[positie + 1 : ]
    #bepalen of het nieuwe getal met een 0 start
    while nul:
        if nieuw_getal[0] == '0' and len(nieuw_getal)!= 1 :
            nieuw_getal = nieuw_getal[0:positie] + nieuw_getal[positie + 1 : ]

        else:
            nul= False

    if k == len(getal) - 1:
         print(f'+ {nieuw_getal}')
    elif nieuw_getal == '0':
        print(len(getal)*x+nieuw_getal)
    elif len(nieuw_getal) < len(getal) -1:
        print(3*x+nieuw_getal)
    else:
        print(x, nieuw_getal)
    som+= int(nieuw_getal)
    positie+= 1
print((len(getal)+1)*y)
print(f'{x}{som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( number ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( number ) ( identifier ) ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Thomas Vandenbergh/mathemagisch.py"",""fullName"":""Thomas Vandenbergh"",""id"":""12983"",""status"":""correct"",""submissionID"":""6031400"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:27:01.000Z"",""labels"":""fyss""}"
793,/home/maxiem/Downloads/files/Iris Picalausa/mathemagisch.py,"m = str(input())
lijn = '='
k = len(m)
som = 0

for i in (range(k)):
    getal = int(m[0:i] + m[i+1:])
    som += int(getal)
    getal = str(getal)
    
    if i == k - 1:
        print(f'+ {getal}')
    else:
        print(f'{getal:>{k + 1}s}')
       
print((k+1)*lijn)
som = str(som)
print(f'{som:>{k + 1}s}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Iris Picalausa/mathemagisch.py"",""fullName"":""Iris Picalausa"",""id"":""12984"",""status"":""correct"",""submissionID"":""6021321"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T10:44:51.000Z"",""labels"":""geol""}"
794,/home/maxiem/Downloads/files/Rune Devriendt/mathemagisch.py,"getal = input()


som = 0


posities = len(getal) + 1
laatste = len(getal) - 1

for e, i in enumerate(getal):

    string = getal[:e] + getal[e + 1:]
    string = round(int(string))

    if e == laatste:
        x = ""{:>{posities}}"".format(string, posities=len(getal))
        print('+' + x)
    else:

        x = ""{:>{posities}}"".format(string, posities=len(getal) + 1)
        print(x)
    som += int(x)


lijn = '=' * posities

print(lijn)
x = ""{:>{posities}}"".format(som, posities=len(getal) + 1)
print(x)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Rune Devriendt/mathemagisch.py"",""fullName"":""Rune Devriendt"",""id"":""12978"",""status"":""correct"",""submissionID"":""6033644"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:26:48.000Z"",""labels"":""fyss""}"
795,/home/maxiem/Downloads/files/Kimberly Demeestere/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# invoer
m = input()
n = len(m)
som = 0
# eerste getallen
for i in range(1, n):
    getal = m[:i - 1] + m[i:]
    som += int(getal)
    if getal[0] == '0':
        getal = getal.replace('0', ' ')
        if getal[n - 2] == ' ':
            getal = '0'
    print(f'{getal:>{n + 1}s}')

# laatste getal
getal = m[:n - 1]
print(f'+ {getal:>{n - 1}s}')
getal = int(getal)
som += getal
som = str(som)

# laatste 2 regels
gelijkheidstekens = '=' * (n + 1)
print(gelijkheidstekens)
print(f'{som:>{n + 1}s}')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( number ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Kimberly Demeestere/mathemagisch.py"",""fullName"":""Kimberly Demeestere"",""id"":""12986"",""status"":""correct"",""submissionID"":""6030712"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:49:46.000Z"",""labels"":""geol""}"
796,/home/maxiem/Downloads/files/Hilke De Rouck/mathemagisch.py,"getal_m = input()

som = 0
lengte = 0
lengte_getal_m = len(getal_m)
for cijfers in getal_m:
    nieuw_getal = getal_m[0:lengte] #eerste cijfer
    nieuw_getal2 = getal_m[lengte + 1:]
    volledig_getal = nieuw_getal + nieuw_getal2
    volledig_getal_geheel = int(volledig_getal)
    som += volledig_getal_geheel
    lengte += 1
    
    while lengte_getal_m - 1 > len(str(volledig_getal_geheel)):
        volledig_getal_geheel = ' ' + str(volledig_getal_geheel)
    if lengte == lengte_getal_m:
        print(f'+ {volledig_getal_geheel}')
    else: print(f'  {volledig_getal_geheel}')
print('=' * (lengte_getal_m + 1))
print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( ERROR ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Hilke De Rouck/mathemagisch.py"",""fullName"":""Hilke De Rouck"",""id"":""12096"",""status"":""correct"",""submissionID"":""6013687"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:06:16.000Z"",""labels"":""bcbt""}"
797,/home/maxiem/Downloads/files/Robin Chan/mathemagisch.py,"getal = str(input())
i = 0
som = 0

for i in range(len(getal)):
    schrap = getal[:i] + getal[i + 1:]
    som += int(schrap)
    i += 1
    n = 0

    while n in range(len(schrap) - 1) and schrap[n] == ""0"":
        if schrap[n] == ""0"":
            schrap = list(schrap)
            schrap[n] = "" ""
            schrap = """".join(schrap)
        n += 1

    if i == len(getal):
        new_nr = ""+""
    else:
        new_nr = "" ""

    print(new_nr + f""{schrap:>{len(getal)}s}"")

print((len(getal)+1) * ""="")
print(f""{str(som):>{len(getal) + 1}s}"")
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( subscript_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ( identifier ) ( identifier ) ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Robin Chan/mathemagisch.py"",""fullName"":""Robin Chan"",""id"":""12990"",""status"":""correct"",""submissionID"":""5996961"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T15:28:48.000Z"",""labels"":""fyss""}"
798,/home/maxiem/Downloads/files/Leontine Van Der Heyden/mathemagisch.py,"getal = str(input())
som = 0
aantal_karakters = len(getal)

for i in range(len(getal)-1):
    nieuw = getal[:i] + getal[(i+1):]

    for i in range(len(nieuw)):
        if nieuw[0] == '0':
            test = nieuw[1:]
            nieuw = test
    if len(nieuw) == 0:
        nieuw = ""0""
    
    som += int(nieuw)
    
    spaties = (aantal_karakters + 1) - len(nieuw)
    nieuw = nieuw[::-1]
    for i in range(spaties):
        nieuw += "" ""
    print(nieuw[::-1])
    
nieuw = getal[:-1]
som += int(nieuw)
nieuw = nieuw[::-1]
nieuw += "" +""
print(nieuw[::-1])

gelijk = """"
for i in range(aantal_karakters + 1):
    gelijk += ""=""
print(gelijk)
print(f"" {som}"")
        
    ",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Leontine Van Der Heyden/mathemagisch.py"",""fullName"":""Leontine Van Der Heyden"",""id"":""7981"",""status"":""correct"",""submissionID"":""6022091"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T11:36:38.000Z"",""labels"":""fyss""}"
799,/home/maxiem/Downloads/files/Jasper Demaertelaere/mathemagisch.py,"m = str(input())
som = 0
x = len(m)+1
for index, cijfer in enumerate(m):
    m1 = m[:index] + m[index+1:]
    m1 = m1.lstrip('0')
    if m1 == '':
        m1 = '0'
    m1 += (len(m) - len(m1) - 1)*' '
    som += int(m1)
    m1 = m1.strip(' ')
    print(m1.rjust(len(m1)+2+(len(m)-1-len(m1)))) if index < len(m) - 1 else print('+ ' + m1)
print((len(m) + 1) * '=')
print(' ' + str(som)) if len(str(som)) == len(m) else print('  ' + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( parenthesized_expression ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( call_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Jasper Demaertelaere/mathemagisch.py"",""fullName"":""Jasper Demaertelaere"",""id"":""12995"",""status"":""correct"",""submissionID"":""6007602"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T12:51:58.000Z"",""labels"":""fyss""}"
800,/home/maxiem/Downloads/files/Jitse Van Nueten/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = str(input())
getal = getal.lstrip(str(0))
som = 0
x= len(getal)
a = 0
for a in range (x - 1):
    b = getal[:a]
    c = getal[a + 1:]
    nieuw = b + c
    nieuw = nieuw.lstrip(str(0))
    if nieuw != '':
        som += int(nieuw)
    else:
        nieuw = str(0)
    print(f'{nieuw:>{x + 1}s}')
    a += 1
b = getal[:a]
c = getal[a+1:]
nieuw = b + c
nieuw = nieuw.lstrip(str(0))
a += 1
print(f'+ {nieuw}')
som += int(nieuw)
som = str(som)
Tekens = len(som) +1
Teken = Tekens * '='
print(Teken)
print(f' {som}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jitse Van Nueten/mathemagisch.py"",""fullName"":""Jitse Van Nueten"",""id"":""12997"",""status"":""correct"",""submissionID"":""5980340"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T16:07:28.000Z"",""labels"":""fyss""}"
801,/home/maxiem/Downloads/files/Catharina Van Laethem/mathemagisch.py,"getal_m = (input(""getal""))
som = 0
lengte = 0
lengte_getal_m = len(getal_m)


for cijfers in getal_m:
    nieuw_getal = getal_m[0:lengte]
    nieuw_getal2 = getal_m[lengte + 1:]
    volledig_getal = nieuw_getal + nieuw_getal2
    volledig_getal_geheel = int(volledig_getal)
    som += volledig_getal_geheel

    lengte += 1
    while lengte_getal_m - 1 > len(str(volledig_getal_geheel)):
        volledig_getal_geheel = ' ' + str(volledig_getal_geheel)
    if lengte == lengte_getal_m:
        print(f'+ {volledig_getal_geheel}')
    else:
        print(f'  {volledig_getal_geheel}')

print('='* (lengte_getal_m +1))
print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Catharina Van Laethem/mathemagisch.py"",""fullName"":""Catharina Van Laethem"",""id"":""11841"",""status"":""correct"",""submissionID"":""5999652"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T20:50:06.000Z"",""labels"":""bcbt""}"
802,/home/maxiem/Downloads/files/Louise Deprez/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

uitkomst = input()
som = 0

for i in range(len(uitkomst)):
    getal = uitkomst[:i] + uitkomst[i+1:]
    while getal[0] == '0' and len(getal)>1:
        getal = getal[1:]
    getal = (((len(uitkomst)-1)-len(getal))*' ') + getal
    som += int(getal)
    if i == len(uitkomst)-1:
        print('+ ' + getal)
    else:
        print('  '+getal)

print('='*(len(uitkomst)+1))
print(' '+str(som))",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Louise Deprez/mathemagisch.py"",""fullName"":""Louise Deprez"",""id"":""13010"",""status"":""correct"",""submissionID"":""5922023"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-12T16:47:20.000Z"",""labels"":""doct""}"
803,/home/maxiem/Downloads/files/Ian Van Lierde/mathemagisch.py,"getal = input()
n = len(getal)
som = 0
i = 0
for i in range(len(getal)):
    getalx = int(getal[0:i] + getal[i + 1:])
    som += int(getalx)
    getalx = str(getalx)
    if i == n - 1:
        print(f'+ {getalx}')
    else:
        print(f'{getalx:>{n + 1}s}')

print((n+1) * '=')
som = str(som)
print(f'{som:>{n + 1}s}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ian Van Lierde/mathemagisch.py"",""fullName"":""Ian Van Lierde"",""id"":""13030"",""status"":""correct"",""submissionID"":""6014383"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T18:57:33.000Z"",""labels"":""geol""}"
804,/home/maxiem/Downloads/files/Kiano De Ridder/mathemagisch.py,"getal_m = str(input())
n = len(getal_m)
som = 0

for i in range(n):
    regel =  getal_m[0:i] + getal_m[ i + 1:]
    aantalsp = n - len(regel) + 1
    som += int(regel)
    l = len(regel)

    if i < n - 1:
        regel = str(regel).lstrip('0')
        if regel == '':
            regel = '0'
        print(f' {regel:>{l + 1}s}')

    else:
        print(f'+ {regel:>{l}s}')

print(""="" * (n + 1))
print(f' {som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Kiano De Ridder/mathemagisch.py"",""fullName"":""Kiano De Ridder"",""id"":""13032"",""status"":""correct"",""submissionID"":""6032872"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T18:39:41.000Z"",""labels"":""chem""}"
805,/home/maxiem/Downloads/files/Benjamin Dhaenens/mathemagisch.py,"getal = input()
n = len(getal)
som = 0
for x in range(n):
    if x == 0 and getal[1] == '0':
        nieuwgetal = getal[:x] + getal[x+2:]
        s = n + 1 - len(str(int(nieuwgetal)))
        print(s*' ' + str(int(nieuwgetal)))
    elif int(x) + 1 != n:
        nieuwgetal = getal[:x] + getal[x+1:]
        print(f'  {nieuwgetal}')
    else:
        nieuwgetal = getal[:x] + getal[x + 1:]
        print('+', nieuwgetal)
    som += int(nieuwgetal)
print((n+1)*'=')
l = len(str(som))
x = n + 1 - l
print(x*' ' + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( number ) ( identifier ) ) ( subscript_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( string ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( number ) ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( identifier ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Benjamin Dhaenens/mathemagisch.py"",""fullName"":""Benjamin Dhaenens"",""id"":""13033"",""status"":""correct"",""submissionID"":""6013105"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T17:27:24.000Z"",""labels"":""chem""}"
806,/home/maxiem/Downloads/files/Nicholas Slos/mathemagisch.py,"vollediggetal = input()

n = len(vollediggetal)
positie = 0
uitkomst = 0
for positie in range(n):
        nieuwgetal = vollediggetal[0:positie] + vollediggetal[positie + 1:n]
        positie += 1
        nieuwgetal = int(nieuwgetal)
        uitkomst += nieuwgetal
        if positie < n :
            print(""  "", end='')
        else:
            print(""+ "", end='')
        nieuwgetal = str(nieuwgetal)
        spaties = n - len(nieuwgetal) -1
        print("" "" * spaties + nieuwgetal)
print('=' * (n + 1))
print(f' {uitkomst}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Nicholas Slos/mathemagisch.py"",""fullName"":""Nicholas Slos"",""id"":""13034"",""status"":""correct"",""submissionID"":""6019731"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T09:33:22.000Z"",""labels"":""chem""}"
807,/home/maxiem/Downloads/files/Robbert Decruyenaere/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input()
som = 0
k = 1

for n, m in enumerate(getal):
    g = getal[:n] + getal[n+1:]
    som += int(g)
    while g[:1] == '0' and len(g)-1:
        g = g[1:]
        k += 1
    if n+1 == len(getal):
        print('+', int(g))
    else:
        print(' ' * k, int(g))
    k = 1
print((n+2)*'=')
print('', som)
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Robbert Decruyenaere/mathemagisch.py"",""fullName"":""Robbert Decruyenaere"",""id"":""13038"",""status"":""correct"",""submissionID"":""6009343"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T14:07:10.000Z"",""labels"":""fyss""}"
808,/home/maxiem/Downloads/files/Emiel Botterman/mathemagisch.py,"getal = str(input())
som = 0
n = len(getal)
gelijkaan = '='

for i in range(n):
    optel = getal[:i] + getal[1+i:]
    optel = int(optel)
    som += optel
    gelijkaan += '='
    if i == n - 1:
        optel = '+ ' + str(optel)
        print(optel)

    else:
        print(f""{str(optel):>{n + 1}s}"")
print(gelijkaan)
som = "" "" + str(som)
print(som)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( number ) ( identifier ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ),"{""filename"":""Emiel Botterman/mathemagisch.py"",""fullName"":""Emiel Botterman"",""id"":""11863"",""status"":""correct"",""submissionID"":""5959073"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T10:58:01.000Z"",""labels"":""fyss""}"
809,/home/maxiem/Downloads/files/Emma Van Valckenborgh/mathemagisch.py,"m = input()

aantal_regels = int(len(m))
som = 0

for i in range(aantal_regels):
    if i < aantal_regels - 1:
        i = int(i)
        n = m[:i] + m[i+1:]
        som += int(n)
        n = int(n)
        print(f'{n: >{aantal_regels + 1}d}')
    if i == aantal_regels - 1:
        i = int(i)
        n = m[:i] + m[i+1:]
        som += int(n) 
        n = int(n)
        print(""+""f'{n: >{aantal_regels}d}')
    
aantal = ""="" * (aantal_regels + 1)

print(aantal)
print("" ""f'{som}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Emma Van Valckenborgh/mathemagisch.py"",""fullName"":""Emma Van Valckenborgh"",""id"":""12109"",""status"":""correct"",""submissionID"":""6011036"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T15:26:17.000Z"",""labels"":""bcbt""}"
810,/home/maxiem/Downloads/files/Robbe Van de Keere/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
number_str = str(input())
number_length = len(number_str)
som = 0
line = '=='

for n in range(number_length - 1):
    datboi = int(number_str[:n] + number_str[n + 1:])
    som += datboi
    print('{:{width}d}'.format(datboi, width=number_length+1))
    line += '='

datboi = int(number_str[:-1])
som = ' ' + str(som + datboi)
print('+ ' + str(datboi), line, som, sep='\n')
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( identifier ) ( identifier ) ( assignment_expression ( identifier ) ( string ( escape_sequence ) ) ) ) ) ) ),"{""filename"":""Robbe Van de Keere/mathemagisch.py"",""fullName"":""Robbe Van de Keere"",""id"":""13041"",""status"":""correct"",""submissionID"":""5995992"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T14:23:32.000Z"",""labels"":""fyss""}"
811,/home/maxiem/Downloads/files/Jan Malderie/mathemagisch.py,"nummer = str(input())
resultaat = 0
lengte = len(nummer)

for k in range(lengte -1):
    onderdrukt_nummer = nummer[:k] + nummer [k+1:]
    resultaat += int(onderdrukt_nummer)
    m = 0
    while onderdrukt_nummer[m] == '0' and m != len(onderdrukt_nummer)-1:
        onderdrukt_nummer =' '*(m+1)+ (onderdrukt_nummer[m+1:]) 
        m += 1
    print('  ' + onderdrukt_nummer)
print(f'+ {(nummer[:lengte-1]+nummer[lengte:]).lstrip(""0"")}')
resultaat += int(nummer[:lengte-1]+nummer[lengte:])
print('='*(lengte+1))
print( f' {str(resultaat)}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( parenthesized_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Jan Malderie/mathemagisch.py"",""fullName"":""Jan Malderie"",""id"":""13044"",""status"":""correct"",""submissionID"":""6032770"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T18:33:48.000Z"",""labels"":""bcbt""}"
812,/home/maxiem/Downloads/files/Muhammad Khuzaifa Naveed/mathemagisch.py,"m = input()
sum = 0
length = len(m)

for i in range(length-1):
    num = m[:i] + m[(i+1):]
    num2 = num.lstrip('0')
    sum += int(num)
    line = (length+1-len(num2)) * ' ' + num2
    if line == (length+1) * ' ':
        print((length)*' ' + '0')
    else:
        print(line)

print('+ ' + m[:(length-1)] + m[length:])

sum += int(m[:(length-1)] + m[length:])

print((len(m)+1) * '=')

print(' '+str(sum))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( string ) ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( parenthesized_expression ( identifier ) ) ( string ) ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( subscript_expression ( identifier ) ( ERROR ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Muhammad Khuzaifa Naveed/mathemagisch.py"",""fullName"":""Muhammad Khuzaifa Naveed"",""id"":""13047"",""status"":""correct"",""submissionID"":""6009470"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T14:13:12.000Z"",""labels"":""fyss""}"
813,/home/maxiem/Downloads/files/Britt Dedoelder/mathemagisch.py,"getal = str(input())
n = len(getal) + 1
som = 0


for i in range(1, len(getal)):
    #getallen printen met 1cijfer eruit
    cijferwegvoor = getal[:i-1]
    cijferwegna = getal[i:]
    cijferweg = cijferwegvoor + cijferwegna
    printversie = cijferweg.lstrip(""0"")
    if printversie == """":
        printversie = ""0""
    spaties = int(n - len(printversie))
    print((spaties)* "" "" + printversie)
    som += int(cijferweg)



#laatste getal met + printen
laatstegetal = getal[0:n-2]
som += int(laatstegetal)
print(""+"" + "" "" + laatstegetal)

#rij = printen
print((n)*""="")

#som printen
print("" "" + str(som))

















",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( number ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( parenthesized_expression ( identifier ) ) ( string ) ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( identifier ) ) ( string ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Britt Dedoelder/mathemagisch.py"",""fullName"":""Britt Dedoelder"",""id"":""12055"",""status"":""correct"",""submissionID"":""6010386"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T14:56:07.000Z"",""labels"":""bcbt""}"
814,/home/maxiem/Downloads/files/Sarah Broos/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
#getal inlezen
getal = input()
som = 0
lengte = len(getal)
gelijkaan = (lengte+1)*'='

for index,karakter in enumerate(getal):

        #doen we niks want willen naar volgend cijfer verder springen.
    nieuw_getal = getal[0:index] + getal[index+1:]
    som += int(nieuw_getal)
    nieuw_getal = nieuw_getal.lstrip('0')
    if len(nieuw_getal) == 0:
        nieuw_getal = (lengte-2) * ' ' + '0'

    elif len(nieuw_getal) != lengte-1:
        verschil = lengte-len(nieuw_getal)-1
        nieuw_getal = ' '*verschil + nieuw_getal

    print(f""+ {nieuw_getal}"") if index == (lengte-1) else print(f""  {nieuw_getal}"")

print(f'{gelijkaan}\n {som}')

",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( assignment_expression ( member_expression ( identifier ) ( property_identifier ) ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ( string ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ( identifier ) ) ( call_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ( escape_sequence ) ) ) ) ) ),"{""filename"":""Sarah Broos/mathemagisch.py"",""fullName"":""Sarah Broos"",""id"":""13050"",""status"":""correct"",""submissionID"":""5992898"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T10:48:49.000Z"",""labels"":""keuz""}"
815,/home/maxiem/Downloads/files/Lupe Hulpiau/mathemagisch.py,"invoer = input()  #""7011249686""
lengte = len(invoer)
som = 0

for positie in range(lengte):
    uitvoer = invoer[0:positie] + invoer[positie + 1:lengte]
    som += int(uitvoer)
    if positie < lengte - 1:
        print(""  "", end='')
    else:
        print(""+ "", end='')
    uitvoergetal = int(uitvoer)
    uitvoer = str(uitvoergetal)
    aantalspaties = lengte - len(uitvoer) - 1
    print("" "" * aantalspaties + uitvoer)
print('=' * (lengte + 1))
print("" "" + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ) ) ( ERROR ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Lupe Hulpiau/mathemagisch.py"",""fullName"":""Lupe Hulpiau"",""id"":""13055"",""status"":""correct"",""submissionID"":""6014878"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T19:31:56.000Z"",""labels"":""chem""}"
816,/home/maxiem/Downloads/files/Stephen Wienk/mathemagisch.py,"m = input()
n = 0
som = 0

for n in range(len(m)):
    getal = m.replace(m, m[:n] + m[(1 + n):])

    if getal == '0000000000':
        print('           0')
    elif getal[0] == '0' and n < len(m) - 1:
        getal = getal.replace(getal, getal[1:])
        print(""   "" + getal)
    elif getal[0] == '0' and n == len(m) - 1:
        getal = getal.replace(getal, getal[1:])
        print(""+  "" + getal)
    elif n < len(m) - 1:
        print(""  "" + getal)
    else:
        print(""+ "" + getal)
    n += 1
    som += int(getal)

print((n + 1) * '=')
if len(str(som)) == len(m):
    print("" "" + str(som))
else:
    print(""  "" + str(som))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( number ) ( identifier ) ) ) ( ERROR ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( string ) ) ( ERROR ( identifier ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ),"{""filename"":""Stephen Wienk/mathemagisch.py"",""fullName"":""Stephen Wienk"",""id"":""13056"",""status"":""correct"",""submissionID"":""6006758"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T12:28:34.000Z"",""labels"":""fyss""}"
817,/home/maxiem/Downloads/files/Evelien Wynendaele/mathemagisch.py,"m = input()
som = 0
lengte = len(m) + 1

for index in range(len(m)):
    eerste_deel = m[:index]
    tweede_deel = m[index + 1:len(m)]
    totaal = eerste_deel + tweede_deel
    for _ in range(len(totaal) - 1):
        if totaal[0] == '0':
            totaal = totaal[1:]
    som += int(totaal)
    if index == len(m) - 1:
        print(f'+ {totaal}')
    else:
        print(f'{totaal}'.rjust(lengte))

print('=' * lengte)
print(f'{str(som)}'.rjust(lengte))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( call_expression ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Evelien Wynendaele/mathemagisch.py"",""fullName"":""Evelien Wynendaele"",""id"":""1701"",""status"":""correct"",""submissionID"":""6015330"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:11:42.000Z"",""labels"":""keuz""}"
818,/home/maxiem/Downloads/files/Robbe Goethals/mathemagisch.py,"volledigcijfer = input()
lengte = len(volledigcijfer)
som = 0

for plaatsen in range(lengte):
    uitkomst = volledigcijfer[0 : plaatsen] + volledigcijfer[ plaatsen+ 1 : lengte]
    if plaatsen < lengte - 1:
        print(""  "", end='')
    else:
        print(""+ "",end='')
    uitvoer = int(uitkomst)
    uitkomst2 = str(uitvoer)
    spaties = lengte - len(uitkomst2) - 1
    som += int(uitkomst)
    print("" "" * spaties + uitkomst2)
print(""="" * (lengte + 1 ))
print("" "" + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Robbe Goethals/mathemagisch.py"",""fullName"":""Robbe Goethals"",""id"":""13076"",""status"":""correct"",""submissionID"":""6021857"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T11:21:31.000Z"",""labels"":""chem""}"
819,/home/maxiem/Downloads/files/Ellen Veelaert/mathemagisch.py,"getal = str(input(""""))
lengte = len(getal)
totaal = 0

for index, karakter in enumerate(getal):
    if index > 0:
        nieuw = getal[:index] + getal[index + 1:]
    else:
        nieuw = getal[index + 1:]
    totaal += int(nieuw)
    if index == (lengte - 1):
        print(f'+ {str(int(nieuw)):>{lengte - 1}s}')
    else:
        print(f'{str(int(nieuw)):>{lengte + 1}s}')
        
print(""="" * (lengte + 1))
print(f'{str(totaal):>{lengte + 1}s}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ellen Veelaert/mathemagisch.py"",""fullName"":""Ellen Veelaert"",""id"":""12113"",""status"":""correct"",""submissionID"":""6032778"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T18:34:10.000Z"",""labels"":""bcbt""}"
820,/home/maxiem/Downloads/files/Isabelle Trenteseau/mathemagisch.py,"number = input()
length = len(number)
res = 0
for i in range (length):
    liste = list(number)
    liste.pop(i)
    back = int(''.join(liste))
    if i < (length - 1) :
        str_back = str(back)
        print("""",str_back.rjust(length))
    else :
        print(""+"",back)
    res += back

print(""=""*(length+1))
print("""",res)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Isabelle Trenteseau/mathemagisch.py"",""fullName"":""Isabelle Trenteseau"",""id"":""13077"",""status"":""correct"",""submissionID"":""6008497"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T13:28:44.000Z"",""labels"":""biol""}"
821,/home/maxiem/Downloads/files/Axel Jünger/mathemagisch.py,"getal_m = input('Wat is het getal? ')
lengte = len(getal_m)+1
som = 0

for i in range(len(getal_m)-1):
    nieuw_getal = getal_m[:i]+getal_m[i+1:]
    if int(nieuw_getal) != 0:
        nieuw_getal = nieuw_getal.lstrip('0')
    else:
        nieuw_getal = '0'
    print(f""{nieuw_getal:>{lengte}s}"")
    som += int(nieuw_getal)
    
nieuw_getal = getal_m[:len(getal_m)-1]+getal_m[len(getal_m):]
if int(nieuw_getal) != 0:
    nieuw_getal = nieuw_getal.lstrip('0')
else:
    nieuw_getal = '0'

print(f""+{nieuw_getal:>{lengte-1}s}"")
print(f""{(lengte)* '='}"")
print(f""{som+int(nieuw_getal):>{lengte}d}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( subscript_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Axel Jünger/mathemagisch.py"",""fullName"":""Axel Jünger"",""id"":""8344"",""status"":""correct"",""submissionID"":""6029083"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T15:35:41.000Z"",""labels"":""geol""}"
822,/home/maxiem/Downloads/files/Joris De Clercq/mathemagisch.py,"nr = input(""Give the number (>3 digits): "")
end_nr = 0
n = len(nr)
line = '='*(n+1)
count = 0
while count != n:
    old = list(nr)
    old[count] = """"
    new = int("""".join(old))
    new = str(new)
    end_nr += int(new)
    if count == n-1:
        print('+', new.rjust(n-1, ' '))
    else: print(new.rjust(n+1, ' '))
    count += 1
print(line)
print('', end_nr)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( new_expression ( ERROR ) ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( ERROR ) ( identifier ) ( identifier ) ( call_expression ( call_expression ( call_expression ( call_expression ( binary_expression ( new_expression ( ERROR ) ( identifier ) ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( identifier ) ) ( arguments ( string ) ( new_expression ( ERROR ) ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( ERROR ( identifier ) ) ( arguments ( new_expression ( ERROR ) ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ( ERROR ( identifier ) ( number ) ( identifier ) ) ( arguments ( identifier ) ) ) ( ERROR ( identifier ) ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Joris De Clercq/mathemagisch.py"",""fullName"":""Joris De Clercq"",""id"":""13084"",""status"":""correct"",""submissionID"":""6031283"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:20:49.000Z"",""labels"":""biol""}"
823,/home/maxiem/Downloads/files/Sander Bekaert/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input()
lengte = len(getal)
som = 0
string = '='
for x in range(0,lengte):
    term = getal[0:x] + getal[x+1:lengte]
    aantal_spaties = lengte - len(str(int(term)))
    som += int(term)
    string += '='
    z = ''
    if x == lengte - 1:
        z = '+ '
    else:
        z = '  '
    for y in range(aantal_spaties - 1):
        z += ' '
    z += str(int(term))
    print(z)
print(string)
print('',som)",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Sander Bekaert/mathemagisch.py"",""fullName"":""Sander Bekaert"",""id"":""13063"",""status"":""correct"",""submissionID"":""6027960"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T14:36:29.000Z"",""labels"":""chem""}"
824,/home/maxiem/Downloads/files/Sibylle Bosschaert/mathemagisch.py,"getal_m = input()
aantal_cijfers = len(getal_m)
i = 0
while aantal_cijfers != 0:
    resultaat = int(getal_m[:len(getal_m) - aantal_cijfers] + getal_m[len(getal_m) - aantal_cijfers + 1:])
    aantal_cijfers -= 1
    i += resultaat
    verschil = len(getal_m) - len(str(resultaat))
    if aantal_cijfers == 0:
        lijn = '+' + ' ' * verschil
    else:
        lijn = ' ' * (verschil + 1)
    print(lijn + str(resultaat))
print(""="" * (len(getal_m) + 1) + ""\n"" + "" "" + str(i))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( string ( escape_sequence ) ) ) ( string ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Sibylle Bosschaert/mathemagisch.py"",""fullName"":""Sibylle Bosschaert"",""id"":""13087"",""status"":""correct"",""submissionID"":""6033301"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:07:40.000Z"",""labels"":""fyss""}"
825,/home/maxiem/Downloads/files/Kaat Verschueren/mathemagisch.py,"# getal opvragen
m = input()
n = len(m)

# getallen berekenen
som = 0
for i in range(n - 1):
    x = m[:i] + m[i + 1:]
    som += int(x)
    if x[0] == '0':
        x = x.replace(""0"", "" "", n - 2)
    print(f'  {x}')
x = m[:(n-1)]
som += int(x)
print(f'+ {x}')
print('=' * (n +1))
print(f' {som}')",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Kaat Verschueren/mathemagisch.py"",""fullName"":""Kaat Verschueren"",""id"":""13089"",""status"":""correct"",""submissionID"":""5979965"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T15:31:17.000Z"",""labels"":""fyss""}"
826,/home/maxiem/Downloads/files/Paris Syngelakis/mathemagisch.py,"cijfer = str(input())
lengte = len(cijfer)
operator = 0
som = 0
while operator < lengte:
    kleinercijfer = str(cijfer[0:operator]) + str(cijfer[operator + 1:])
    operator = operator + 1
    som = som + int(kleinercijfer)
    if operator == lengte:
        print('+', kleinercijfer)
    else:
        printgetal = kleinercijfer.lstrip('0')
        if printgetal == """":
            printgetal = ""0""
        plaatstekort = (len(kleinercijfer) + 2) - len(printgetal)
        printgetal = plaatstekort * "" "" + printgetal
        print(printgetal)
print((len(kleinercijfer) + 2) * '=')
print("" "" + str(som))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( identifier ) ( string ) ) ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Paris Syngelakis/mathemagisch.py"",""fullName"":""Paris Syngelakis"",""id"":""13090"",""status"":""correct"",""submissionID"":""6026664"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:52:20.000Z"",""labels"":""chem""}"
827,/home/maxiem/Downloads/files/Friedl' Ryckaert/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
I = str(input())
l = len(I)
S = 0

for i in range(0, l):
    Deel1 = I[:i]
    Deel2 = I[i+1:]
    nieuwe_str = Deel1 + Deel2
    if i == l-1:
        nieuwe_int = int(nieuwe_str)
        print('+' f""{str(nieuwe_int).rjust(l)}"")
    else:
        nieuwe_int = int(nieuwe_str)
        print(f""{str(nieuwe_int).rjust(l+1)}"")
    S += int(nieuwe_str)
    i += 1

print(''.rjust(l + 1, '='))
print('', S)",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Friedl' Ryckaert/mathemagisch.py"",""fullName"":""Friedl' Ryckaert"",""id"":""13092"",""status"":""correct"",""submissionID"":""6026645"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:51:59.000Z"",""labels"":""fyss""}"
828,/home/maxiem/Downloads/files/Bert Wallaert/mathemagisch.py,"getal = input(""geef getal: "")

n = 0
gelijkheidsteken = ""=""
som = 0

for i in getal:
    weergegeven = getal

    weergegeven = getal[:n] + getal[(n + 1):]
    n += 1
    gelijkheidsteken += ""=""
    som += int(weergegeven)
    if n == len(getal):
        print(f""+ {weergegeven}"")
    else:
        aantal_nullen = weergegeven.count('0')
        if aantal_nullen == 10:
            print(""           0"")
            continue
        elif weergegeven.startswith('0'):
            weergegeven = weergegeven.replace('0', ' ')
        print(f""  {weergegeven}"")

print(gelijkheidsteken)
print(f"" {som}"")
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( continue_statement ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Bert Wallaert/mathemagisch.py"",""fullName"":""Bert Wallaert"",""id"":""13097"",""status"":""correct"",""submissionID"":""5979426"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T14:48:03.000Z"",""labels"":""fyss""}"
829,/home/maxiem/Downloads/files/Stijn Verhulst/mathemagisch.py,"m = str(input())
x = 0
n = int(0)

for i in range(len(m)):
    getal = m[:n] + m[(n + 1):]

    if n == (len(m) - 1):
        print(f'+ {getal.lstrip(""0"")}')
    elif getal == '0000000000':
        print(str('0').rjust(len(m)+1))
    else:
        print(getal.lstrip(""0"").rjust(len(m)+1))

    x += int(getal)
    n += 1

print('=' * (len(m) + 1))
print('', x)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( string ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( string ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( property_identifier ) ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Stijn Verhulst/mathemagisch.py"",""fullName"":""Stijn Verhulst"",""id"":""13093"",""status"":""correct"",""submissionID"":""6030794"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:53:50.000Z"",""labels"":""fyss""}"
830,/home/maxiem/Downloads/files/David Josiger/mathemagisch.py,"digit = input()

index = 0
length = len(digit)
repetition = (length + 1) * '='
number = 0

while index < length:
    slice = int(digit[:index]+digit[index+1:])
    number += int(slice)
    if index < length - 1:
        print(f'{slice:>{length+1}d}')
    else:
        print(f'+ {slice}\n{repetition}\n{number:>{length+1}d}')
    index += 1",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ( escape_sequence ) ( escape_sequence ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ),"{""filename"":""David Josiger/mathemagisch.py"",""fullName"":""David Josiger"",""id"":""13099"",""status"":""correct"",""submissionID"":""6029840"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:10:38.000Z"",""labels"":""keuz""}"
831,/home/maxiem/Downloads/files/Niels De Ketelaere/mathemagisch.py,"getal = input()
lengtegetal = len(getal)
opgeteld = 0
for getallen in range(lengtegetal):
    finaalgetal = getal[0 : getallen] + getal[getallen + 1 : lengtegetal]
    opgeteld += int(finaalgetal)
    if getallen < lengtegetal - 1:
        print(' {:{lengtegetal}d}'.format(int(finaalgetal),lengtegetal=lengtegetal))
    else:
        print('+{:{lengtegetal}d}'.format(int(finaalgetal),lengtegetal=lengtegetal))
        
print('=' * (lengtegetal + 1))
print(f"" {opgeteld}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Niels De Ketelaere/mathemagisch.py"",""fullName"":""Niels De Ketelaere"",""id"":""13101"",""status"":""correct"",""submissionID"":""6031548"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T17:33:23.000Z"",""labels"":""chem""}"
832,/home/maxiem/Downloads/files/Karen Praxedes/mathemagisch.py,,( program ),"{""filename"":""Karen Praxedes/mathemagisch.py"",""fullName"":""Karen Praxedes"",""id"":""13104"",""status"":""wrong"",""submissionID"":""6033633"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:26:21.000Z"",""labels"":""fyss""}"
833,/home/maxiem/Downloads/files/Luka De Clerck/mathemagisch.py,"# input vragen

#verwijder eerste getal van je integer


#while loop totdat je terug je getal uitkomt


#daarna zorg je dat een dubbele lijn van = tekens komt en print je de oplossing",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ),"{""filename"":""Luka De Clerck/mathemagisch.py"",""fullName"":""Luka De Clerck"",""id"":""13106"",""status"":""wrong"",""submissionID"":""6034120"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:54:35.000Z"",""labels"":""fyss""}"
834,/home/maxiem/Downloads/files/Soetkin Martens/mathemagisch.py,"volledig_nummer = input('volledig nummer: ')
lengte = len(volledig_nummer)
i = 0
addzeros = 0
sumof = 0
for i in range(lengte-1):
    nummer = volledig_nummer[:i] + volledig_nummer[i+1:]
    nummer = int(nummer)
    sumof += nummer
    nummer = str(nummer)
    if len(nummer) < (lengte-1):
        addzeros =  (lengte) - len(nummer)
        addzeros *= ' '
        print(addzeros, nummer)
    else:
        print(' ', nummer)
nummer = volledig_nummer[:i+1] + volledig_nummer[i+2:]
nummer = int(nummer)
sumof += nummer
print('+', nummer)
equal_signs = (lengte + 1) * '='
print(equal_signs)
print('', sumof)",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( binary_expression ( identifier ) ( number ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Soetkin Martens/mathemagisch.py"",""fullName"":""Soetkin Martens"",""id"":""13107"",""status"":""correct"",""submissionID"":""6027257"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T14:09:04.000Z"",""labels"":""chem""}"
835,/home/maxiem/Downloads/files/Lotte Van Poucke/mathemagisch.py,"#invoer gegevens
getal= input(""geef een getal:"")
lengte= len(getal)
tot= 0
for a in range(lengte):
    cijfer= getal[:a] + getal[a+1:]
    tot += int(cijfer)
    cijfer= cijfer.lstrip(""0"")
    if a == lengte-1:
        print(f'+ {cijfer}')
    else:
        if cijfer == '':
            cijfer = 0
        print(f'{cijfer:>{lengte+1}}')
print((lengte+1)*'=')
print((f' {tot}'))
",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( parenthesized_expression ( ERROR ( identifier ) ) ( string ) ) ) ) ) ),"{""filename"":""Lotte Van Poucke/mathemagisch.py"",""fullName"":""Lotte Van Poucke"",""id"":""13109"",""status"":""correct"",""submissionID"":""6029649"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:02:02.000Z"",""labels"":""chem""}"
836,/home/maxiem/Downloads/files/Emilia Stevens/mathemagisch.py,"#Invoer
getal = input()
lengte = len(getal)
index = 0
som = 0
streep = lengte * '='
#Omzetting
for i in range(lengte-1):
    if getal[index+1] == 0:
        getal2 = getal[:index] + getal[(index + 2):]
        getal2 = int(getal2)
        som += getal2
        print(f'{getal2:>{lengte +1}}')
        index += 1
    else:
        getal2 = getal[:index] + getal[(index+1):]
        getal2 = int(getal2)
        som += getal2
        print(f'{getal2:>{lengte + 1}}')
        index += 1
getal2 = getal[:index] + getal[(index+1):]
getal2 = int(getal2)
som += getal2
print(f'+ {getal2}')
print(f'={streep}')
print(f'{som:>{lengte + 1}}')",( program ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Emilia Stevens/mathemagisch.py"",""fullName"":""Emilia Stevens"",""id"":""13112"",""status"":""correct"",""submissionID"":""6023377"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T12:35:12.000Z"",""labels"":""fyss""}"
837,/home/maxiem/Downloads/files/victor lantsoght/mathemagisch.py,"import string
getal = str(input())
som = 0
t = len(getal)
n = (t + 1)

for x in range(0, t):
    samen = getal[:x] + getal[x+1:]
    som += int(samen)
    if samen == (t-1)*'0':
        samen = samen.lstrip('0') + '0'
    else:
        samen = samen.lstrip('0')
    if x == t-1:
        print('+'f""{samen:>{t}s}"")
    else:
        print(f""{samen:>{n}s}"")
som = str(som)
print((t+1)*'=')
print(f""{som:>{n}s}"")",( program ( expression_statement ( import ) ( ERROR ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( string ) ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""victor lantsoght/mathemagisch.py"",""fullName"":""victor lantsoght"",""id"":""13133"",""status"":""correct"",""submissionID"":""6027751"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T14:26:23.000Z"",""labels"":""fyss""}"
838,/home/maxiem/Downloads/files/Mathias De Gryse/mathemagisch.py,"# Invoer getal
m = str(input())

# eerste sommen
oplossing = int()
i = 0
x = 1
while x < len(m):
    getal = str('  ')
    c = 0
    while c < len(m):
        if c != i:
            getal += str(m[c])
            c += 1
        else:
            c += 1

    # controle nul
    n = 2
    while n < len(getal) - 1:
        if getal[n] == '0':
            replace = list(getal)
            replace[n] = ' '
            getal = str()
            for element in replace:
                getal += element
            n += 1

        else:
            n = len(getal)

    print(getal)
    oplossing += int(getal)
    x += 1
    i += 1

# laatste som met (+)
getalplus = str('+ ')
getal = str('  ')
c = 0
while c < len(m):
    if c != i:
        getalplus += str(m[c])
        getal += str(m[c])
        c += 1
    else:
        c += 1

# Uitvoer
print(getalplus)
print('=' + (len(m) * '='))
oplossing += int(getal)
print(' ' + str(oplossing))",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( identifier ) ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( string ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Mathias De Gryse/mathemagisch.py"",""fullName"":""Mathias De Gryse"",""id"":""8111"",""status"":""correct"",""submissionID"":""6027464"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T14:16:43.000Z"",""labels"":""chem""}"
839,/home/maxiem/Downloads/files/Vic Walraevens/mathemagisch.py,"g = str(input())
n = 0
s = 0
l = len(g)

while n != (len(g)):
    getal = g[:n] + g[n+1:]
    intgetal = int(getal)
    
    ge = str(intgetal)
    if n < (l-1):
        print(f'{ge:>{l+1}s}')
    else:
        print(f'+{ge:>{l}s}')
    n += 1
    s += intgetal
    
s = str(s)
u = (n+1) * ""=""
print(f'{u}')
print(f'{s:>{l+1}s}')",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Vic Walraevens/mathemagisch.py"",""fullName"":""Vic Walraevens"",""id"":""12089"",""status"":""correct"",""submissionID"":""6017967"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T08:24:26.000Z"",""labels"":""bcbt""}"
840,/home/maxiem/Downloads/files/Siel Moeyersoon/mathemagisch.py,"#Voer het getal in.

getal = str(int(input('Voer het getal in.')))
n = len(getal)
som = 0
for i in range(0,n):
    getal_zonder_cijfer = str(int(getal[0:i] + getal[i + 1:]))
    som += int(getal_zonder_cijfer)
    if i == n-1:
        print(f""+ {getal_zonder_cijfer}"")
    else:
        print(f""{getal_zonder_cijfer:>{n+1}s}"")
lijn = ""="" * (n+1)
print(f""{lijn}"")
som = str(som)
print(f""{som:>{n+1}s}"")

",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Siel Moeyersoon/mathemagisch.py"",""fullName"":""Siel Moeyersoon"",""id"":""11890"",""status"":""correct"",""submissionID"":""5998913"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-18T18:55:01.000Z"",""labels"":""bcbt""}"
841,/home/maxiem/Downloads/files/Philippe Elskens/mathemagisch.py,"m = input()
n = len(m)
total = 0
for index, letter in enumerate(m):
    if index < n - 1:
        number = int((m[:index]) + (m[index+1:n]))
        difference = (n - len(str(number)))
        spaces = str(' ' * (difference + 1))
        print(spaces + str(number))
    else:
        number = int((m[:index]) + (m[index + 1:n]))
        print('+', m[0:n - 1])
    total += int(number)
print('=' * (n + 1 ))
difference = (n - len(str(total)))
spaces = str(' ' * (difference + 1))
print(spaces + str(total))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ( parenthesized_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ) ( parenthesized_expression ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ( identifier ) ) ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( subscript_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Philippe Elskens/mathemagisch.py"",""fullName"":""Philippe Elskens"",""id"":""13167"",""status"":""correct"",""submissionID"":""5988491"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T17:09:17.000Z"",""labels"":""stat""}"
842,/home/maxiem/Downloads/files/Laura Landuyt/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
# invoer
getal = input('Geef getal: ')


index = int(0)
som = 0
a = len(getal)
while index < len(getal):
    nieuw_getal = getal[:index] + getal[index + int(1):]
    index += 1
    nieuw_getal = int(nieuw_getal)
    if index == len(getal):
        print(f""+{nieuw_getal:>{a}d}"")
    else:
        print(f""{nieuw_getal:>{a+1}d}"")
    som += int(nieuw_getal)
print('{}'.format((len(getal)+ int(1)) * '='))
print(' {}'.format(som))

# nu is de spatie en de + gehardcoded en er zou iets met de n+1 plaatsen dat het moet innemen zijn",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ( string ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ( ERROR ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ),"{""filename"":""Laura Landuyt/mathemagisch.py"",""fullName"":""Laura Landuyt"",""id"":""13193"",""status"":""correct"",""submissionID"":""5978099"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T13:18:40.000Z"",""labels"":""doct""}"
843,/home/maxiem/Downloads/files/Wout De Saegher/mathemagisch.py,"# invoer getal
getal = input('getal:')
som = 0
# aantal cijfers in getal tellen
n = len(getal)
# schrappen van cijfers 1 voor 1
for i in range(n):
    cijfer = getal[0:i] + getal[i + 1:]
    if i != n-1:
        cijfer = str(cijfer)
        j = 0
        while cijfer[i]== '0':
            cijfer = '0'+cijfer[j:]
            j+=1
        print('  ' + str(cijfer))
    else:
        print(str('+ ' + cijfer))
    # maken van de som
    som += int(cijfer)
# regel met n + 1 gelijktekens
gelijktekens = (n + 1) * str(""="")
print(gelijktekens)
# printen van som
print(f' {som}')",( program ( ERROR ( ERROR ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( number ) ) ( expression_statement ( identifier ) ) ( expression_statement ( number ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( subscript_expression ( identifier ) ( identifier ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( binary_expression ( identifier ) ( number ) ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Wout De Saegher/mathemagisch.py"",""fullName"":""Wout De Saegher"",""id"":""7776"",""status"":""time limit exceeded"",""submissionID"":""6033002"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T18:47:55.000Z"",""labels"":""n/a""}"
844,/home/maxiem/Downloads/files/Benoit Mortier/mathemagisch.py,"#input van getal
cijfer = input()
totaal = 0
lengte_string = "">"" + str(len(cijfer) + 1) + ""s""  
#loop volgens lengte van cijfer
for i in range(len(cijfer)):
    if i == 0:
        tijdelijk = int(cijfer[1 : :])
        print(f""{str(tijdelijk):{lengte_string}}"") #indien het tweede cijfer in het getal 0 is moet het naar int en dan naar string
    elif i == len(cijfer) - 1:
        tijdelijk = cijfer[:-1:]
        print(f'+ {tijdelijk}')
    elif i > 0:
        tijdelijk = cijfer[0 : i :] + cijfer[i + 1: :]
        print(f'{tijdelijk:{lengte_string}}')
    totaal += int(tijdelijk)

#= printen aan de hand van de lengte
for i in range(len(cijfer) + 1):
    print(""="", end="""")
print(f'\n {totaal}')",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( string ) ) ) ) ( ERROR ( ERROR ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( number ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( assignment_expression ( identifier ) ( string ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ( escape_sequence ) ) ) ) ) ),"{""filename"":""Benoit Mortier/mathemagisch.py"",""fullName"":""Benoit Mortier"",""id"":""11485"",""status"":""correct"",""submissionID"":""6015275"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T20:05:27.000Z"",""labels"":""keuz""}"
845,/home/maxiem/Downloads/files/Yue Sun/mathemagisch.py,"# enter n digits
numbers = str(input('please enter n digits'))
length = len(numbers)
# initialize the index for numbers and sum of the numbers
index = 0
sum = 0
#joint the string without the character of index position
while index < len(numbers):
    add_numbers = ''.join([numbers[i] for i in range(len(numbers)) if i != index])
    index += 1
    if index == len(numbers):
        outcome = str('+ {0}'.format(add_numbers))
    else:
        outcome = int(add_numbers)
    sum += int(add_numbers)
    n = (len(numbers)+1)
    print(f'{outcome:>{n}}')
print((len(str(sum))+1)*'=')
print('', sum)",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( array ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( identifier ) ) ( identifier ) ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Yue Sun/mathemagisch.py"",""fullName"":""Yue Sun"",""id"":""13238"",""status"":""correct"",""submissionID"":""6026733"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T13:53:51.000Z"",""labels"":""stat""}"
846,/home/maxiem/Downloads/files/Severine Verschaete/mathemagisch.py,"number = input()
number = str(number)
som = 0
for i in range(len(number)):
    if i != len(number)-1:
        antwoord = number[:i] + number[i + 1:]
        if antwoord.startswith('0'):
            antwoord = (antwoord.strip('0'))
            if len(antwoord)>0:
                print('   ' + antwoord)
            else:
                antwoord = '0'
                print(' '*len(number)+antwoord)
        else:
            print('  '+ antwoord)
        som += int(antwoord)
    else:
        antwoord = number[:i] + number[i + 1:]
        print('+ '+ antwoord)
        som += int(antwoord)
        lengte=len(antwoord)+2
        print(lengte*'=')
        print(' '+ str(som))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( parenthesized_expression ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Severine Verschaete/mathemagisch.py"",""fullName"":""Severine Verschaete"",""id"":""3164"",""status"":""correct"",""submissionID"":""5988666"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T17:35:12.000Z"",""labels"":""biol""}"
847,/home/maxiem/Downloads/files/Talip Yurtkap/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672

get = str(input())
resultaat = """"
w = 0
som = 0

for m in range(len(get)):
    y = get.split(get[w], 1)
    d1 = y[0]
    d2 = y[1]
    resultaat += (d1 + d2)
    som += int(resultaat)
    if int(w) == (len(get)-1):
        print(""+ {}"".format(str(int(resultaat))))
        resultaat = """"
    else:
        print(""{}"".format(str(int(resultaat))))
        resultaat = """"
    w += 1

    teken_ = ""="" * (int(len(resultaat)+1))
    print(teken_)
    print(""{}"".format(som))
    som = 0
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( subscript_expression ( identifier ) ( identifier ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( parenthesized_expression ( binary_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ),"{""filename"":""Talip Yurtkap/mathemagisch.py"",""fullName"":""Talip Yurtkap"",""id"":""13253"",""status"":""wrong"",""submissionID"":""6033940"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:44:13.000Z"",""labels"":""fyss""}"
848,/home/maxiem/Downloads/files/Serge Rijssegem/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
a=int(input())
astr=str(a)
aantalprints=len(astr)
list=[]
for i in range (0,aantalprints):
    linksdeel=astr[0:i]
    rechtsdeel=astr[i+1:len(astr)]
    totaaldeel=linksdeel+rechtsdeel
    telspaties=0
    while totaaldeel[telspaties]=='0' and telspaties<len(totaaldeel)-1:
        telspaties+=1
    strspatiesdoornul=""""
    strzondernul=totaaldeel[telspaties:len(totaaldeel)]
    for i in range (0,telspaties):
        strspatiesdoornul+="" ""
    totaaldeelmetspaties='  '+strspatiesdoornul+strzondernul
    if (i==aantalprints-1):
        totaaldeelmetspaties='+ '+strspatiesdoornul+strzondernul

    inttotaaldeel=int(totaaldeel)
    list.append(inttotaaldeel)

    print(totaaldeelmetspaties)

scheiding=""""
for q in range (0,aantalprints+1):
    scheiding+=""=""
print(scheiding)

som=0
for j in range (0,aantalprints):
    som+=list[j]
print("" ""+str(som))
",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( augmented_assignment_expression ( identifier ) ( number ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( call_expression ( identifier ) ( ERROR ( identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ( if_statement ( parenthesized_expression ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ( ERROR ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( identifier ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Serge Rijssegem/mathemagisch.py"",""fullName"":""Serge Rijssegem"",""id"":""13257"",""status"":""correct"",""submissionID"":""5931340"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-13T11:02:08.000Z"",""labels"":""stat""}"
849,/home/maxiem/Downloads/files/Charles Deberlanger/mathemagisch.py,"x1 = input()
n = len(x1)
sum = 0
for i in range(0, n):
    regel =""""
    for y in range(0,n):
        if y != i:
            regel += x1[y]
    sum += int(regel)
    regel = int(regel)
    if i == n-1:
        regel = ""+ "" + str(regel)
    else:
        regel = "" "" * (n + 1 - len(str(regel))) + str(regel)
    print(regel)

print(""="" * (n + 1))
print("" "" + str(sum))
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( string ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( number ) ( identifier ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( augmented_assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( identifier ) ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Charles Deberlanger/mathemagisch.py"",""fullName"":""Charles Deberlanger"",""id"":""13281"",""status"":""correct"",""submissionID"":""6021412"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T10:49:59.000Z"",""labels"":""stat""}"
850,/home/maxiem/Downloads/files/Ruben Lumen/mathemagisch.py,"getal = input()
som = 0
p = len(getal)
m = 0
door = True

for i in range(p):
    l = 1 if i == p - 1 else 0
    res = getal[:i] + getal[i+1:]
    while res[0] == '0' and door:
        if len(res) == 1:
            door = False
        else:
            res = res[1:]
            m += 1
    print((l * '+') + ((2 - l + m) * ' ') + res)
    m = 0
    som += int(res)
print('=' * (p + 1))
print(f' {som}')
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( ERROR ( number ) ) ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( number ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( ERROR ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( string ) ) ) ( parenthesized_expression ( binary_expression ( parenthesized_expression ( binary_expression ( binary_expression ( number ) ( identifier ) ) ( identifier ) ) ) ( string ) ) ) ) ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ruben Lumen/mathemagisch.py"",""fullName"":""Ruben Lumen"",""id"":""5218"",""status"":""correct"",""submissionID"":""6021829"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T11:19:49.000Z"",""labels"":""bcbt""}"
851,/home/maxiem/Downloads/files/Nelis Van Laeken/mathemagisch.py,"getal = input()
lijst = list(str(getal))
result = 0
eind = ""=""

for n in range(len(lijst)):
    lijst.pop(n)
    rel = int(''.join(map(str, lijst)))

    if len(lijst) - n == 0:
        print(f""+ {str(rel).rjust(len(lijst))}"")
    else:
        print(f""  {str(rel).rjust(len(lijst))}"")
    result += rel
    eind += ""=""
    lijst = list(str(getal))

print(eind)
print(f"" {str(result).rjust(len(lijst))}"")",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( identifier ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Nelis Van Laeken/mathemagisch.py"",""fullName"":""Nelis Van Laeken"",""id"":""11076"",""status"":""correct"",""submissionID"":""5970215"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-15T17:23:10.000Z"",""labels"":""keuz""}"
852,/home/maxiem/Downloads/files/Ella-Marie Assal/mathemagisch.py,"# https://dodona.ugent.be/nl/courses/359/series/3488/activities/1260445672
getal = input('getal: ')

n = len(getal)
som = 0

for i in range(len(getal)):
    getal_min = int(getal[:i] + getal[i+1:])
    som += getal_min
    if i == (len(getal)-1):
        print(f'+ {getal_min}')
    else:
        print(f'{getal_min:>{n+1}}')

print((n+1)*'=')
print(f'{som:>{n + 1}}')",( program ( ERROR ( ERROR ) ) ( labeled_statement ( statement_identifier ) ( comment ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( parenthesized_expression ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ( string ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( ERROR ( identifier ) ) ( string ) ) ) ) ),"{""filename"":""Ella-Marie Assal/mathemagisch.py"",""fullName"":""Ella-Marie Assal"",""id"":""13468"",""status"":""correct"",""submissionID"":""6016130"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-19T21:55:58.000Z"",""labels"":""keuz""}"
853,/home/maxiem/Downloads/files/Arend Vancraeynest/mathemagisch.py,"# Een natuurlijk getal, bestaande uit 4 of meer cijfers (n):
m = input()
n = len(m)

# Uitprinten van alle afgekapte cijfers, waarbij op de laatste lijn een + staat
som = 0

for i in range(len(m[:-1])):
    som_getal = m[:i] + m[i + 1:]
    print(""{:>{uitlijn}}"".format(int(som_getal), uitlijn=n+1))
    som += int(som_getal)

laatste_som_getal = m[:-1]
print(""+{:>{uitlijn}}"".format(int(laatste_som_getal), uitlijn=n))
som += int(laatste_som_getal)

# Uitrpinten regel met gelijkheidstekens
print(""{:=>{uitlijn}}"".format("""", uitlijn=n+1))

# Uitprinten van de som van alle getallen
print(""{:>{uitlijn}}"".format(som, uitlijn=n+1))",( program ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( number ) ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( assignment_expression ( identifier ) ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( string ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ) ),"{""filename"":""Arend Vancraeynest/mathemagisch.py"",""fullName"":""Arend Vancraeynest"",""id"":""5557"",""status"":""correct"",""submissionID"":""6033841"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:39:07.000Z"",""labels"":""keuz""}"
854,/home/maxiem/Downloads/files/Qianqian Li/mathemagisch.py,"# this code is to calculate the given number based on the given number, and give the specific print type
# input the given nulber

give_num_m = input()

# calculete the sum of the number based on the text and print the nulber as the given type
space_number = len(give_num_m) + 1
sum_all_number = 0

for i in range(len(give_num_m)):
    if i == 0:
        new_num_m = give_num_m[i + 1:]
        for j in range(len(new_num_m)):
            if all(new_num_m[1:]):
                new_num_m = ""0""
            elif new_num_m.startswith('0'):
                new_num_m = new_num_m[1:]
        print(new_num_m.rjust(space_number))

    elif i == len(give_num_m) - 1:
        new_num_m = give_num_m[:-1]
        print(""+"" + "" "" + new_num_m)

    else:
        new_num_m = give_num_m[:i] + give_num_m[i + 1:]
        print(new_num_m.rjust(space_number))

    sum_all_number += int(new_num_m)


# give the print result
print(""="" * space_number)
print(str(sum_all_number).rjust(space_number))",( program ( ERROR ( ERROR ) ( this ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( sequence_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( identifier ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( identifier ) ) ( ERROR ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( string ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( string ) ) ( identifier ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ( ERROR ) ( identifier ) ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( identifier ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ),"{""filename"":""Qianqian Li/mathemagisch.py"",""fullName"":""Qianqian Li"",""id"":""5471"",""status"":""wrong"",""submissionID"":""5989191"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-17T18:51:33.000Z"",""labels"":""n/a""}"
855,/home/maxiem/Downloads/files/Shuaiqi Wang/mathemagisch.py,"m = int(input('Enter a n-digit(n≥4) number m: '))
t = []
n = 0
res = 0
while m != 0:
    t.append(m % 10)
    m //= 10
    n += 1
m = 1
for i in range(n - 1, -1, -1):
    m = 1
    a = 0
    for j in range(n):
        if j == i:
            continue
        a += t[j] * m
        m *= 10
    if i != 0:
        print(('  {:>'+str(n-1)+'}').format(a))
    else:
        print(('+ {:>'+str(n-1)+'}').format(a))
    res += a
print(""="" * (n + 1))
print("" ""+str(res))",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( string ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( identifier ) ( comment ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ( unary_expression ( number ) ) ( unary_expression ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( binary_expression ( identifier ) ( identifier ) ) ) ( continue_statement ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( identifier ) ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( string ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( call_expression ( member_expression ( parenthesized_expression ( binary_expression ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( string ) ) ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( identifier ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ),"{""filename"":""Shuaiqi Wang/mathemagisch.py"",""fullName"":""Shuaiqi Wang"",""id"":""13598"",""status"":""correct"",""submissionID"":""6029921"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:14:15.000Z"",""labels"":""keuz""}"
856,/home/maxiem/Downloads/files/Sofie Labat/mathemagisch.py,"number = input()
digits = len(number)
output = 0

for i in range(digits - 1):
    line = number[0:i] + number[i+1:digits]
    if int(line) == 0:
        print(str("" "" * (digits)) + str(0))
    elif line[0] == str(0):
        print(""  "", line[1:])
    else:
        print("" "", line)
    output += int(line)

line_plus = number[:-1]
print(""+"", line_plus)
output += int(line_plus)

equal_line = ""="" * (digits + 1)
print(equal_line)
print("""", output)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( number ) ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( number ) ( ERROR ( identifier ) ) ) ( subscript_expression ( identifier ) ( ERROR ( binary_expression ( identifier ) ( number ) ) ) ( identifier ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( identifier ) ) ) ) ) ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ) ) ) ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( ERROR ( identifier ) ) ( number ) ) ( ERROR ( call_expression ( identifier ) ( arguments ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( string ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Sofie Labat/mathemagisch.py"",""fullName"":""Sofie Labat"",""id"":""13612"",""status"":""correct"",""submissionID"":""5948031"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-14T11:34:14.000Z"",""labels"":""keuz""}"
857,/home/maxiem/Downloads/files/Triana Forment/mathemagisch.py,"
num = input()

long = len(num)

total = 0

for i in range(long):
    n = num[:i] + num[i+1:]
    if n[0]==""0"":
        n = "" "" + n[1:]
    total += int(n)
    if i==long-1:
        print(""+"",n)
    else:
        print("" "",n)
print(""=""+""=""*long)
print("""", total)
        
    ",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( subscript_expression ( identifier ) ( number ) ) ( ERROR ( string ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( subscript_expression ( identifier ) ( number ) ( ERROR ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( binary_expression ( identifier ) ( ERROR ( number ) ) ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ) ( labeled_statement ( statement_identifier ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( string ) ( identifier ) ) ) ) ),"{""filename"":""Triana Forment/mathemagisch.py"",""fullName"":""Triana Forment"",""id"":""13617"",""status"":""wrong"",""submissionID"":""6030496"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T16:38:39.000Z"",""labels"":""keuz""}"
858,/home/maxiem/Downloads/files/Arno Plaetinck/mathemagisch.py,"getal = input()
list = []
sum = 0
for num, char in enumerate(getal, start=0):
    list.append(getal[:num] + getal[num+1:])
    sum += int(getal[:num] + getal[num+1:])

list2 = []
temp = """"

for element in list:
    temp = str(int(element))
    while len(temp) != len(getal)+1:
        temp = "" ""+ temp
    list2.append(temp)
    temp = """"

list2[-1] = ""+"" + list2[-1][1:]
for char in range(len(getal)+1):
    temp += '='
list2.append(temp)
list2.append("" ""+str(sum))

for element in list2:
    print(element)
",( program ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( number ) ) ) ( ERROR ) ( expression_statement ( sequence_expression ( identifier ) ( binary_expression ( identifier ) ( call_expression ( member_expression ( call_expression ( identifier ) ( arguments ( identifier ) ( assignment_expression ( identifier ) ( number ) ) ) ) ( ERROR ( identifier ) ) ( property_identifier ) ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ) ( expression_statement ( augmented_assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( ERROR ( number ) ) ( assignment_expression ( identifier ) ( binary_expression ( string ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( string ) ) ) ( expression_statement ( assignment_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( binary_expression ( string ) ( subscript_expression ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ( number ) ( ERROR ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( call_expression ( identifier ) ( arguments ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ( number ) ) ) ) ) ( augmented_assignment_expression ( identifier ) ( string ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( identifier ) ) ) ) ( expression_statement ( call_expression ( member_expression ( identifier ) ( property_identifier ) ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ),"{""filename"":""Arno Plaetinck/mathemagisch.py"",""fullName"":""Arno Plaetinck"",""id"":""13687"",""status"":""correct"",""submissionID"":""5977321"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-16T12:27:20.000Z"",""labels"":""""}"
859,/home/maxiem/Downloads/files/Johan Van den Neste/mathemagisch.py,"from itertools import dropwhile

def convert_number_string(num_str, index):
    with_dropped_index = num_str[:index] + num_str[index+1:]
    without_leading_zeroes = """".join(dropwhile(lambda x: x == '0', with_dropped_index))
    return ""0"" if without_leading_zeroes == """" else without_leading_zeroes

num_str = input()
length = len(num_str)
number_strings = [convert_number_string(num_str, index) for index in range(length)]
for number_str in number_strings[:-1]:
    print("" "" * (length - len(number_str) + 1) + number_str)
print(""+ "" + number_strings[-1])
print(""="" * (length + 1))
print("" "" + str(sum(map(int, number_strings))))
",( program ( ERROR ( identifier ) ( identifier ) ( call_expression ( import ) ( ERROR ( identifier ) ( identifier ) ( identifier ) ) ( arguments ( identifier ) ( identifier ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( binary_expression ( subscript_expression ( identifier ) ( ERROR ) ( identifier ) ) ( subscript_expression ( identifier ) ( binary_expression ( identifier ) ( number ) ) ( ERROR ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( member_expression ( string ) ( property_identifier ) ) ( arguments ( call_expression ( identifier ) ( arguments ( binary_expression ( identifier ) ( ERROR ( identifier ) ( identifier ) ) ( string ) ) ( identifier ) ) ) ) ) ) ) ( return_statement ( ERROR ( string ) ) ( binary_expression ( identifier ) ( ERROR ( string ) ) ( identifier ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ( expression_statement ( assignment_expression ( identifier ) ( array ( binary_expression ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ( ERROR ( identifier ) ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ) ) ) ( ERROR ) ( expression_statement ( binary_expression ( identifier ) ( ERROR ( subscript_expression ( identifier ) ( ERROR ) ( unary_expression ( number ) ) ) ) ( call_expression ( identifier ) ( arguments ( binary_expression ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( binary_expression ( identifier ) ( call_expression ( identifier ) ( arguments ( identifier ) ) ) ) ( number ) ) ) ) ( identifier ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( subscript_expression ( identifier ) ( unary_expression ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( parenthesized_expression ( binary_expression ( identifier ) ( number ) ) ) ) ) ) ) ( expression_statement ( call_expression ( identifier ) ( arguments ( binary_expression ( string ) ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( call_expression ( identifier ) ( arguments ( identifier ) ( identifier ) ) ) ) ) ) ) ) ) ) ) ),"{""filename"":""Johan Van den Neste/mathemagisch.py"",""fullName"":""Johan Van den Neste"",""id"":""13549"",""status"":""correct"",""submissionID"":""6033337"",""nameEN"":""Mathemagical"",""nameNL"":""Mathemagisch"",""exerciseID"":""1260445672"",""createdAt"":""2020-10-20T19:09:59.000Z"",""labels"":""""}"
